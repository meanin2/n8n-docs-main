Directory structure:
└── gemini-docs/
    ├── app-nodes.json
    ├── build-json-workflows.txt
    ├── cluster-nodes.json
    ├── core-nodes.json
    ├── docs.txt
    ├── integration-credentials.json
    └── trigger-nodes.json

================================================
File: app-nodes.json
================================================
{
    "nodes": {
        "ActionsLibrary": {
            "description": "This section provides information about n8n's Actions.",
            "contentType": "overview"
        },
        "ActionNetwork": {
            "description": "Use the Action Network node to automate work in Action Network, and integrate Action Network with other applications.",
            "operations": {
                "Attendance": [
                    "Create",
                    "Get",
                    "Get All"
                ],
                "Event": [
                    "Create",
                    "Get",
                    "Get All"
                ],
                "Person": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Person Tag": [
                    "Add",
                    "Remove"
                ],
                "Petition": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Signature": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Tag": [
                    "Create",
                    "Get",
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/actionnetwork.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "ActiveCampaign": {
            "description": "Use the ActiveCampaign node to automate work in ActiveCampaign, and integrate ActiveCampaign with other applications.",
            "operations": {
                "Account": [
                    "Create an account",
                    "Delete an account",
                    "Get data of an account",
                    "Get data of all accounts",
                    "Update an account"
                ],
                "Account Contact": [
                    "Create an association",
                    "Delete an association",
                    "Update an association"
                ],
                "Contact": [
                    "Create a contact",
                    "Delete a contact",
                    "Get data of a contact",
                    "Get data of all contact",
                    "Update a contact"
                ],
                "Contact List": [
                    "Add contact to a list",
                    "Remove contact from a list"
                ],
                "Contact Tag": [
                    "Add a tag to a contact",
                    "Remove a tag from a contact"
                ],
                "Connection": [
                    "Create a connection",
                    "Delete a connection",
                    "Get data of a connection",
                    "Get data of all connections",
                    "Update a connection"
                ],
                "Deal": [
                    "Create a deal",
                    "Delete a deal",
                    "Get data of a deal",
                    "Get data of all deals",
                    "Update a deal",
                    "Create a deal note",
                    "Update a deal note"
                ],
                "E-commerce Order": [
                    "Create a order",
                    "Delete a order",
                    "Get data of a order",
                    "Get data of all orders",
                    "Update a order"
                ],
                "E-Commerce Customer": [
                    "Create a E-commerce Customer",
                    "Delete a E-commerce Customer",
                    "Get data of a E-commerce Customer",
                    "Get data of all E-commerce Customer",
                    "Update a E-commerce Customer"
                ],
                "E-commerce Order Products": [
                    "Get data of all order products",
                    "Get data of a ordered product",
                    "Get data of an order's products"
                ],
                "List": [
                    "Get all lists"
                ],
                "Tag": [
                    "Create a tag",
                    "Delete a tag",
                    "Get data of a tag",
                    "Get data of all tags",
                    "Update a tag"
                ]
            },
            "credentials": "/integrations/builtin/credentials/activecampaign.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Adalo": {
            "description": "Use the Adalo node to automate work in Adalo, and integrate Adalo with other applications.",
            "operations": {
                "Collection": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/adalo.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Affinity": {
            "description": "Use the Affinity node to automate work in Affinity, and integrate Affinity with other applications.",
            "operations": {
                "List": [
                    "Get a list",
                    "Get all lists"
                ],
                "List Entry": [
                    "Create a list entry",
                    "Delete a list entry",
                    "Get a list entry",
                    "Get all list entries"
                ],
                "Organization": [
                    "Create an organization",
                    "Delete an organization",
                    "Get an organization",
                    "Get all organizations",
                    "Update an organization"
                ],
                "Person": [
                    "Create a person",
                    "Delete a person",
                    "Get a person",
                    "Get all persons",
                    "Update a person"
                ]
            },
            "credentials": "/integrations/builtin/credentials/affinity.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AgileCRM": {
            "description": "Use the Agile CRM node to automate work in Agile CRM, and integrate Agile CRM with other applications.",
            "operations": {
                "Company": [
                    "Create a new company",
                    "Delete a company",
                    "Get a company",
                    "Get all companies",
                    "Update company properties"
                ],
                "Contact": [
                    "Create a new contact",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update contact properties"
                ],
                "Deal": [
                    "Create a new deal",
                    "Delete a deal",
                    "Get a deal",
                    "Get all deals",
                    "Update deal properties"
                ]
            },
            "credentials": "/integrations/builtin/credentials/agilecrm.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AMQPSender": {
            "description": "Use the AMQP Sender node to automate work in AMQP Sender, and integrate AMQP Sender with other applications.",
            "operations": [
                "Send message"
            ],
            "credentials": "/integrations/builtin/credentials/amqp.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "APITemplate.io": {
            "description": "Use the APITemplate.io node to automate work in APITemplate.io, and integrate APITemplate.io with other applications.",
            "operations": {
                "Account": [
                    "Get"
                ],
                "Image": [
                    "Create"
                ],
                "PDF": [
                    "Create"
                ]
            },
            "credentials": "/integrations/builtin/credentials/apitemplateio.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Asana": {
            "description": "Use the Asana node to automate work in Asana, and integrate Asana with other applications.",
            "operations": {
                "Project": [
                    "Create a new project",
                    "Delete a project",
                    "Get a project",
                    "Get all projects",
                    "Update a project"
                ],
                "Subtask": [
                    "Create a subtask",
                    "Get all subtasks"
                ],
                "Task": [
                    "Create a task",
                    "Delete a task",
                    "Get a task",
                    "Get all tasks",
                    "Move a task",
                    "Search for tasks",
                    "Update a task"
                ],
                "Task Comment": [
                    "Add a comment to a task",
                    "Remove a comment from a task"
                ],
                "Task Tag": [
                    "Add a tag to a task",
                    "Remove a tag from a task"
                ],
                "Task Project": [
                    "Add a task to a project",
                    "Remove a task from a project"
                ],
                "User": [
                    "Get a user",
                    "Get all users"
                ]
            },
            "credentials": "/integrations/builtin/credentials/asana.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Automizy": {
            "description": "Use the Automizy node to automate work in Automizy, and integrate Automizy with other applications.",
            "operations": {
                "Contact": [
                    "Create a contact",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update a contact"
                ],
                "List": [
                    "Create a list",
                    "Delete a list",
                    "Get a list",
                    "Get all lists",
                    "Update a list"
                ]
            },
            "credentials": "/integrations/builtin/credentials/automizy.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Autopilot": {
            "description": "Use the Autopilot node to automate work in Autopilot, and integrate Autopilot with other applications.",
            "operations": {
                "Contact": [
                    "Create/Update a contact",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts"
                ],
                "Contact Journey": [
                    "Add contact to list"
                ],
                "Contact List": [
                    "Add contact to list",
                    "Check if contact is on list",
                    "Get all contacts on list",
                    "Remove a contact from a list"
                ],
                "List": [
                    "Create a list",
                    "Get all lists"
                ]
            },
            "credentials": "/integrations/builtin/credentials/autopilot.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSCertificateManager": {
            "description": "Use the AWS Certificate Manager node to automate work in AWS Certificate Manager, and integrate AAWS Certificage Manager node into your workflows.",
            "operations": {
                "Certificate": [
                    "Delete",
                    "Get",
                    "Get Many",
                    "Get Metadata",
                    "Renew"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSComprehend": {
            "description": "Use the AWS Comprehend node to automate work in AWS Comprehend, and integrate AWS Comprehend node into your workflows.",
            "operations": {
                "Text": [
                    "Identify the dominant language",
                    "Analyse the sentiment of the text"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSDynamoDB": {
            "description": "Use the AWS DynamoDB node to automate work in AWS DynamoDB, and integrate AWS DynamoDB with other applications.",
            "operations": {
                "Item": [
                    "Create a new record, or update the current one if it already exists (upsert/put)",
                    "Delete an item",
                    "Get an item",
                    "Get all items"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSELB": {
            "description": "Use the AWS Elastic Load Balancing node to automate work in AWS ELB, and integrate AWS Elastic Load Balancing node into your workflows.",
            "operations": {
                "Listener Certificate": [
                    "Add",
                    "Get Many",
                    "Remove"
                ],
                "Load Balancer": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSLambda": {
            "description": "Use the AWS Lambda node to automate work in AWS Lambda, and integrate AWS Lambda node into your workflows.",
            "operations": [
                "Invoke a function"
            ],
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSRekognition": {
            "description": "Use the AWS Rekognition node to automate work in AWS Rekognition, and integrate AWS Rekognition node into your workflows.",
            "operations": {
                "Image": [
                    "Analyze"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSS3": {
            "description": "Use the AWS S3 node to automate work in AWS S3, and integrate AWS S3 with other applications.",
            "operations": {
                "Bucket": [
                    "Create a bucket",
                    "Delete a bucket",
                    "Get all buckets",
                    "Search within a bucket"
                ],
                "File": [
                    "Copy a file",
                    "Delete a file",
                    "Download a file",
                    "Get all files",
                    "Upload a file"
                ],
                "Folder": [
                    "Create a folder",
                    "Delete a folder",
                    "Get all folders"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "AWSSES": {
            "description": "Use the AWS SES node to automate work in AWS SES, and integrate AWS SES with other applications.",
            "operations": {
                "Custom Verification Email": [
                    "Create a new custom verification email template",
                    "Delete an existing custom verification email template",
                    "Get the custom email verification template",
                    "Get all the existing custom verification email templates for your account",
                    "Add an email address to the list of identities",
                    "Update an existing custom verification email template."
                ],
                "Email": [
                    "Send",
                    "Send Template"
                ],
                "Template": [
                    "Create a template",
                    "Delete a template",
                    "Get a template",
                    "Get all templates",
                    "Update a template"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSSNS": {
            "description": "Use the AWS SNS node to automate work in AWS SNS, and integrate AWS SNS with other applications.",
            "operations": [
                "Publish a message to a topic"
            ],
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSSQS": {
            "description": "Use the AWS SQS node to automate work in AWS SNS, and integrate AWS SQS with other applications.",
            "operations": [
                "Send a message to a queue."
            ],
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSTextract": {
            "description": "Use the AWS Textract node to automate work in AWS Textract, and integrate AWS Textract with other applications.",
            "operations": [
                "Analyze Receipt or Invoice"
            ],
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AWSTranscribe": {
            "description": "Use the AWS Transcribe node to automate work in AWS Transcribe, and integrate AWS Transcribe with other applications.",
            "operations": {
                "Transcription Job": [
                    "Create a transcription job",
                    "Delete a transcription job",
                    "Get a transcription job",
                    "Get all transcriptions job"
                ]
            },
            "credentials": "/integrations/builtin/credentials/aws.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "AzureStorage": {
            "description": "The Azure Storage node has built-in support for a wide range of features, which includes creating, getting, and deleting blobs and containers.",
            "operations": {
                "Blob": [
                    "Create blob",
                    "Delete blob",
                    "Get blob",
                    "Get many blobs"
                ],
                "Container": [
                    "Create container",
                    "Delete container",
                    "Get container",
                    "Get many containers"
                ]
            },
            "credentials": "/integrations/builtin/credentials/azurestorage.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "BambooHR": {
            "description": "Use the BambooHR node to automate work in BambooHR, and integrate BambooHR with other applications.",
            "operations": {
                "Company Report": [
                    "Get a company report"
                ],
                "Employee": [
                    "Create an employee",
                    "Get an employee",
                    "Get all employees",
                    "Update an employee"
                ],
                "Employee Document": [
                    "Delete an employee document",
                    "Download an employee document",
                    "Get all employee document",
                    "Update an employee document",
                    "Upload an employee document"
                ],
                "File": [
                    "Delete a company file",
                    "Download a company file",
                    "Get all company files",
                    "Update a company file",
                    "Upload a company file"
                ]
            },
            "credentials": "/integrations/builtin/credentials/bamboohr.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Bannerbear": {
            "description": "Use the Bannerbear node to automate work in Bannerbear, and integrate Bannerbear with other applications.",
            "operations": {
                "Image": [
                    "Create an image",
                    "Get an image"
                ],
                "Template": [
                    "Get a template",
                    "Get all templates"
                ]
            },
            "credentials": "/integrations/builtin/credentials/bannerbear.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Baserow": {
            "description": "Use the Baserow node to automate work in Baserow, and integrate Baserow with other applications.",
            "operations": {
                "Row": [
                    "Create a row",
                    "Delete a row",
                    "Retrieve a row",
                    "Retrieve all rows",
                    "Update a row"
                ]
            },
            "credentials": "/integrations/builtin/credentials/baserow.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "Beeminder": {
            "description": "Use the Beeminder node to automate work in Beeminder, and integrate Beeminder with other applications.",
            "operations": {
                "data point": [
                    "Create data point for a goal",
                    "Delete a data point",
                    "Get all data points for a goal",
                    "Update a data point"
                ]
            },
            "credentials": "/integrations/builtin/credentials/beeminder.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Bitly": {
            "description": "Use the Bitly node to automate work in Bitly, and integrate Bitly with other applications.",
            "operations": {
                "Link": [
                    "Create a link",
                    "Get a link",
                    "Update a link"
                ]
            },
            "credentials": "/integrations/builtin/credentials/bitly.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Bitwarden": {
            "description": "Use the Bitwarden node to automate work in Bitwarden, and integrate Bitwarden with other applications.",
            "operations": {
                "Collection": [
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Event": [
                    "Get All"
                ],
                "Group": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Get Members",
                    "Update",
                    "Update Members"
                ],
                "Member": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Get Groups",
                    "Update",
                    "Update Groups"
                ]
            },
            "credentials": "/integrations/builtin/credentials/bitwarden.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Box": {
            "description": "Use the Box node to automate work in Box, and integrate Box with other applications.",
            "operations": {
                "File": [
                    "Copy a file",
                    "Delete a file",
                    "Download a file",
                    "Get a file",
                    "Search files",
                    "Share a file",
                    "Upload a file"
                ],
                "Folder": [
                    "Create a folder",
                    "Get a folder",
                    "Delete a folder",
                    "Search files",
                    "Share a folder",
                    "Update folder"
                ]
            },
            "credentials": "/integrations/builtin/credentials/box.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Brandfetch": {
            "description": "Use the Brandfetch node to automate work in Brandfetch, and integrate Brandfetch with other applications.",
            "operations": [
                "Return a company's colors",
                    "Return a company's data",
                    "Return a company's fonts",
                    "Return a company's industry",
                    "Return a company's logo & icon"
            ],
            "credentials": "/integrations/builtin/credentials/brandfetch.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Brevo": {
            "description": "Use the Brevo node to automate work in Brevo, and integrate Brevo with other applications.",
            "operations": {
                "Contact": [
                    "Create",
                    "Create or Update",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Contact Attribute": [
                    "Create",
                    "Delete",
                    "Get All",
                    "Update"
                ],
                "Email": [
                    "Send",
                    "Send Template"
                ],
                "Sender": [
                    "Create",
                    "Delete",
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/brevo.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Bubble": {
            "description": "Use the Bubble node to automate work in Bubble, and integrate Bubble with other applications.",
            "operations": {
                "Object": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/bubble.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Chargebee": {
            "description": "Use the Chargebee node to automate work in Chargebee, and integrate Chargebee with other applications.",
            "operations": {
                "Customer": [
                    "Create a customer"
                ],
                "Invoice": [
                    "Return the invoices",
                    "Get URL for the invoice PDF"
                ],
                "Subscription": [
                    "Cancel a subscription",
                    "Delete a subscription"
                ]
            },
            "credentials": "/integrations/builtin/credentials/chargebee.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "CircleCI": {
            "description": "Use the CircleCI node to automate work in CircleCI, and integrate CircleCI with other applications.",
            "operations": {
                "Pipeline": [
                    "Get a pipeline",
                    "Get all pipelines",
                    "Trigger a pipeline"
                ]
            },
            "credentials": "/integrations/builtin/credentials/circleci.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "WebexByCisco": {
            "description": "Use the Webex by Cisco node to automate work in Webex, and integrate Webex with other applications.",
            "operations": {
                "Meeting": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Message": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/ciscowebex.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Clearbit": {
            "description": "Use the Clearbit node to automate work in Clearbit, and integrate Clearbit with other applications.",
            "operations": {
                "Company": [
                    "Auto-complete company names and retrieve logo and domain",
                    "Look up person and company data based on an email or domain"
                ],
                "Person": [
                    "Look up a person and company data based on an email or domain"
                ]
            },
            "credentials": "/integrations/builtin/credentials/clearbit.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "ClickUp": {
            "description": "Use the ClickUp node to automate work in ClickUp, and integrate ClickUp with other applications.",
            "operations": {
                "Checklist": [
                    "Create a checklist",
                    "Delete a checklist",
                    "Update a checklist"
                ],
                "Checklist Item": [
                    "Create a checklist item",
                    "Delete a checklist item",
                    "Update a checklist item"
                ],
                "Comment": [
                    "Create a comment",
                    "Delete a comment",
                    "Get all comments",
                    "Update a comment"
                ],
                "Folder": [
                    "Create a folder",
                    "Delete a folder",
                    "Get a folder",
                    "Get all folders",
                    "Update a folder"
                ],
                "Goal": [
                    "Create a goal",
                    "Delete a goal",
                    "Get a goal",
                    "Get all goals",
                    "Update a goal"
                ],
                "Goal Key Result": [
                    "Create a key result",
                    "Delete a key result",
                    "Update a key result"
                ],
                "List": [
                    "Create a list",
                    "Retrieve list's custom fields",
                    "Delete a list",
                    "Get a list",
                    "Get all lists",
                    "Get list members",
                    "Update a list"
                ],
                "Space Tag": [
                    "Create a space tag",
                    "Delete a space tag",
                    "Get all space tags",
                    "Update a space tag"
                ],
                "Task": [
                    "Create a task",
                    "Delete a task",
                    "Get a task",
                    "Get all tasks",
                    "Get task members",
                    "Set a custom field",
                    "Update a task"
                ],
                "Task List": [
                    "Add a task to a list",
                    "Remove a task from a list"
                ],
                "Task Tag": [
                    "Add a tag to a task",
                    "Remove a tag from a task"
                ],
                "Task Dependency": [
                    "Create a task dependency",
                    "Delete a task dependency"
                ],
                "Time Entry": [
                    "Create a time entry",
                    "Delete a time entry",
                    "Get a time entry",
                    "Get all time entries",
                    "Start a time entry",
                    "Stop the current running timer",
                    "Update a time Entry"
                ],
                "Time Entry Tag": [
                    "Add tag to time entry",
                    "Get all time entry tags",
                    "Remove tag from time entry"
                ]
            },
            "credentials": "/integrations/builtin/credentials/clickup.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Clockify": {
            "description": "Use the Clockify node to automate work in Clockify, and integrate Clockify with other applications.",
            "operations": {
                "Project": [
                    "Create a project",
                    "Delete a project",
                    "Get a project",
                    "Get all projects",
                    "Update a project"
                ],
                "Tag": [
                    "Create a tag",
                    "Delete a tag",
                    "Get all tags",
                    "Update a tag"
                ],
                "Task": [
                    "Create a task",
                    "Delete a task",
                    "Get a task",
                    "Get all tasks",
                    "Update a task"
                ],
                "Time Entry": [
                    "Create a time entry",
                    "Delete a time entry",
                    "Get time entry",
                    "Update a time entry"
                ]
            },
            "credentials": "/integrations/builtin/credentials/clockify.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Cloudflare": {
            "description": "Use the Cloudflare node to automate work in Cloudflare, and integrate Cloudflare with other applications.",
            "operations": {
                "Zone Certificate": [
                    "Delete",
                    "Get",
                    "Get Many",
                    "Upload"
                ]
            },
            "credentials": "/integrations/builtin/credentials/cloudflare.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Cockpit": {
            "description": "Use the Cockpit node to automate work in Cockpit, and integrate Cockpit with other applications.",
            "operations": {
                "Collection": [
                    "Create a collection entry",
                    "Get all collection entries",
                    "Update a collection entry"
                ],
                "Form": [
                    "Store data from a form submission"
                ],
                "Singleton": [
                    "Get a singleton"
                ]
            },
            "credentials": "/integrations/builtin/credentials/cockpit.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Coda": {
            "description": "Use the Coda node to automate work in Coda, and integrate Coda with other applications.",
            "operations": {
                "Control": [
                    "Get a control",
                    "Get all controls"
                ],
                "Formula": [
                    "Get a formula",
                    "Get all formulas"
                ],
                "Table": [
                    "Create/Insert a row",
                    "Delete one or multiple rows",
                    "Get all columns",
                    "Get all the rows",
                    "Get a column",
                    "Get a row",
                    "Pushes a button"
                ],
                "View": [
                    "Delete view row",
                    "Get a view",
                    "Get all views",
                    "Get all views columns",
                    "Get all views rows",
                    "Update row",
                    "Push view button"
                ]
            },
            "credentials": "/integrations/builtin/credentials/coda.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "CoinGecko": {
            "description": "Use the CoinGecko node to automate work in CoinGecko, and integrate CoinGecko with other applications.",
            "operations": {
                "Coin": [
                    "Get a candlestick open-high-low-close chart for the selected currency",
                    "Get current data for a coin",
                    "Get all coins",
                    "Get historical data (name, price, market, stats) at a given date for a coin",
                    "Get prices and market related data for all trading pairs that match the selected currency",
                    "Get historical market data include price, market cap, and 24h volume (granularity auto)",
                    "Get the current price of any cryptocurrencies in any other supported currencies that you need",
                    "Get coin tickers"
                ],
                "Event": [
                    "Get all events"
                ]
            },
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Contentful": {
            "description": "Use the Contentful node to automate work in Contentful, and integrate Contentful with other applications.",
            "operations": {
                "Asset": [
                    "Get",
                    "Get All"
                ],
                "Content Type": [
                    "Get"
                ],
                "Entry": [
                    "Get",
                    "Get All"
                ],
                "Locale": [
                    "Get All"
                ],
                "Space": [
                    "Get"
                ]
            },
            "credentials": "/integrations/builtin/credentials/contentful.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "ConvertKit": {
            "description": "Use the ConvertKit node to automate work in ConvertKit, and integrate ConvertKit with other applications.",
            "operations": {
                "Custom Field": [
                    "Create a field",
                    "Delete a field",
                    "Get all fields",
                    "Update a field"
                ],
                "Form": [
                    "Add a subscriber",
                    "Get all forms",
                    "List subscriptions to a form including subscriber data"
                ],
                "Sequence": [
                    "Add a subscriber",
                    "Get all sequences",
                    "Get all subscriptions to a sequence including subscriber data"
                ],
                "Tag": [
                    "Create a tag",
                    "Get all tags"
                ],
                "Tag Subscriber": [
                    "Add a tag to a subscriber",
                    "List subscriptions to a tag including subscriber data",
                    "Delete a tag from a subscriber"
                ]
            },
            "credentials": "/integrations/builtin/credentials/convertkit.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Copper": {
            "description": "Use the Copper node to automate work in Copper, and integrate Copper with other applications.",
            "operations": {
                "Company": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Customer Source": [
                    "Get All"
                ],
                "Lead": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Opportunity": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Person": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Project": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Task": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "User": [
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/copper.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Cortex": {
            "description": "Use the Cortex node to automate work in Cortex, and integrate Cortex with other applications.",
            "operations": {
                "Analyzer": [
                    "Execute Analyzer"
                ],
                "Job": [
                    "Get job details",
                    "Get job report"
                ],
                "Responder": [
                    "Execute Responder"
                ]
            },
            "credentials": "/integrations/builtin/credentials/cortex.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "CrateDB": {
            "description": "Use the CrateDB node to automate work in CrateDB, and integrate CrateDB with other applications.",
            "operations": [
                "Execute an SQL query",
                "Insert rows in database",
                "Update rows in database"
            ],
            "credentials": "/integrations/builtin/credentials/cratedb.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "crowd.dev": {
            "description": "Use the crowd.dev node to automate work in crowd.dev and integrate crowd.dev with other applications.",
            "operations": {
                "Activity": [
                    "Create or Update with a Member",
                    "Create"
                ],
                "Automation": [
                    "Create",
                    "Destroy",
                    "Find",
                    "List",
                    "Update"
                ],
                "Member": [
                    "Create or Update",
                    "Delete",
                    "Find",
                    "Update"
                ],
                "Note": [
                    "Create",
                    "Delete",
                    "Find",
                    "Update"
                ],
                "Organization": [
                    "Create",
                    "Delete",
                    "Find",
                    "Update"
                ],
                "Task": [
                    "Create",
                    "Delete",
                    "Find",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/crowddev.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Customer.io": {
            "description": "Use the Customer.io node to automate work in Customer.io, and integrate Customer.io with other applications.",
            "operations": {
                "Customer": [
                    "Create/Update a customer.",
                    "Delete a customer."
                ],
                "Event": [
                    "Track a customer event.",
                    "Track an anonymous event."
                ],
                "Campaign": [
                    "Get",
                    "Get All",
                    "Get Metrics"
                ],
                "Segment": [
                    "Add Customer",
                    "Remove Customer"
                ]
            },
            "credentials": "/integrations/builtin/credentials/customerio.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "DeepL": {
            "description": "Use the DeepL node to automate work in DeepL, and integrate DeepL with other applications.",
            "operations": {
                "Language": [
                    "Translate data"
                ]
            },
            "credentials": "/integrations/builtin/credentials/deepl.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Demio": {
            "description": "Use the Demio node to automate work in Demio, and integrate Demio with other applications.",
            "operations": {
                "Event": [
                    "Get an event",
                    "Get all events",
                    "Register someone to an event"
                ],
                "Report": [
                    "Get an event report"
                ]
            },
            "credentials": "/integrations/builtin/credentials/demio.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "DHL": {
            "description": "Use the DHL node to automate work in DHL, and integrate DHL with other applications.",
            "operations": {
                "Shipment": [
                    "Get Tracking Details"
                ]
            },
            "credentials": "/integrations/builtin/credentials/dhl.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Discourse": {
            "description": "Use the Discourse node to automate work in Discourse, and integrate Discourse with other applications.",
            "operations": {
                "Category": [
                    "Create a category",
                    "Get all categories",
                    "Update a category"
                ],
                "Group": [
                    "Create a group",
                    "Get a group",
                    "Get all groups",
                    "Update a group"
                ],
                "Post": [
                    "Create a post",
                    "Get a post",
                    "Get all posts",
                    "Update a post"
                ],
                "User": [
                    "Create a user",
                    "Get a user",
                    "Get all users"
                ],
                "User Group": [
                    "Create a user to group",
                    "Remove user from group"
                ]
            },
            "credentials": "/integrations/builtin/credentials/discourse.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Disqus": {
            "description": "Use the Disqus node to automate work in Disqus, and integrate Disqus with other applications.",
            "operations": {
                "Forum": [
                    "Return forum details",
                    "Return a list of categories within a forum",
                    "Return a list of threads within a forum",
                    "Return a list of posts within a forum"
                ]
            },
            "credentials": "/integrations/builtin/credentials/disqus.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Drift": {
            "description": "Use the Drift node to automate work in Drift, and integrate Drift with other applications.",
            "operations": {
                "Contact": [
                    "Create a contact",
                    "Get custom attributes",
                    "Delete a contact",
                    "Get a contact",
                    "Update a contact"
                ]
            },
            "credentials": "/integrations/builtin/credentials/drift.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Dropbox": {
            "description": "Use the Dropbox node to automate work in Dropbox, and integrate Dropbox with other applications.",
            "operations": {
                "File": [
                    "Copy a file",
                    "Delete a file",
                    "Download a file",
                    "Move a file",
                    "Upload a file"
                ],
                "Folder": [
                    "Copy a folder",
                    "Create a folder",
                    "Delete a folder",
                    "Return the files and folders in a given folder",
                    "Move a folder"
                ],
                "Search": [
                    "Query"
                ]
            },
            "credentials": "/integrations/builtin/credentials/dropbox.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Dropcontact": {
            "description": "Use the Dropcontact node to automate work in Dropcontact, and integrate Dropcontact with other applications.",
            "operations": {
                "Contact": [
                    "Enrich",
                    "Fetch Request"
                ]
            },
            "credentials": "/integrations/builtin/credentials/dropcontact.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "E-goi": {
            "description": "Use the E-goi node to automate work in E-goi, and integrate E-goi with other applications.",
            "operations": {
                "Contact": [
                    "Create a member",
                    "Get a member",
                    "Get all members",
                    "Update a member"
                ]
            },
            "credentials": "/integrations/builtin/credentials/egoi.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Elasticsearch": {
            "description": "Use the Elasticsearch node to automate work in Elasticsearch, and integrate Elasticsearch with other applications.",
            "operations": {
                "Document": [
                    "Create a document",
                    "Delete a document",
                    "Get a document",
                    "Get all documents",
                    "Update a document"
                ],
                "Index": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/elasticsearch.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "ElasticSecurity": {
            "description": "Use the Elastic Security node to automate work in Elastic Security, and integrate Elastic Security with other applications.",
            "operations": {
                "Case": [
                    "Create a case",
                    "Delete a case",
                    "Get a case",
                    "Retrieve all cases",
                    "Retrieve a summary of all case activity",
                    "Update a case"
                ],
                "Case Comment": [
                    "Add a comment to a case",
                    "Get a case comment",
                    "Retrieve all case comments",
                    "Remove a comment from a case",
                    "Update a comment in a case"
                ],
                "Case Tag": [
                    "Add a tag to a case",
                    "Remove a tag from a case"
                ],
                "Connector": [
                    "Create a connector"
                ]
            },
            "credentials": "/integrations/builtin/credentials/elasticsecurity.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Emelia": {
            "description": "Use the Emelia node to automate work in Emelia, and integrate Emelia with other applications.",
            "operations": {
                "Campaign": [
                    "Add Contact",
                    "Create",
                    "Get",
                    "Get All",
                    "Pause",
                    "Start"
                ],
                "Contact List": [
                    "Add",
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/emelia.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "ERPNext": {
            "description": "Use the ERPNext node to automate work in ERPNext, and integrate ERPNext with other applications.",
            "operations": {
                "Document": [
                    "Create a document",
                    "Delete a document",
                    "Retrieve a document",
                    "Retrieve all documents",
                    "Update a document"
                ]
            },
            "credentials": "/integrations/builtin/credentials/erpnext.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "FacebookGraphAPI": {
            "description": "Use the Facebook Graph API node to automate work in Facebook Graph API, and integrate Facebook Graph API with other applications.",
            "operations": {
                "Default": [
                    "GET",
                    "POST",
                    "DELETE"
                ],
                "Video Uploads": [
                    "GET",
                    "POST",
                    "DELETE"
                ]
            },
            "credentials": "/integrations/builtin/credentials/facebookgraph.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "FileMaker": {
            "description": "Use the FileMaker node to automate work in FileMaker, and integrate FileMaker with other applications.",
            "operations": [
                "Find Records",
                "Get Records",
                "Get Records by Id",
                "Perform Script",
                "Create Record",
                "Edit Record",
                "Duplicate Record",
                "Delete Record"
            ],
            "credentials": "/integrations/builtin/credentials/filemaker.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Flow": {
            "description": "Use the Flow node to automate work in Flow, and integrate Flow with other applications.",
            "operations": {
                "Task": [
                    "Create a new task",
                    "Update a task",
                    "Get a task",
                    "Get all the tasks"
                ]
            },
            "credentials": "/integrations/builtin/credentials/flow.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Freshdesk": {
            "description": "Use the Freshdesk node to automate work in Freshdesk and integrate Freshdesk with other applications.",
            "operations": {
                "Contact": [
                    "Create a new contact",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update a contact"
                ],
                "Ticket": [
                    "Create a new ticket",
                    "Delete a ticket",
                    "Get a ticket",
                    "Get all tickets",
                    "Update a ticket"
                ]
            },
            "credentials": "/integrations/builtin/credentials/freshdesk.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Freshservice": {
            "description": "Use the Freshservice node to automate work in Freshservice and integrate Freshservice with other applications.",
            "operations": {
                "Agent": [
                    "Create an agent",
                    "Delete an agent",
                    "Retrieve an agent",
                    "Retrieve all agents",
                    "Update an agent"
                ],
                "Agent Group": [
                    "Create an agent group",
                    "Delete an agent group",
                    "Retrieve an agent group",
                    "Retrieve all agent groups",
                    "Update an agent group"
                ],
                "Agent Role": [
                    "Retrieve an agent role",
                    "Retrieve all agent roles"
                ],
                "Announcement": [
                    "Create an announcement",
                    "Delete an announcement",
                    "Retrieve an announcement",
                    "Retrieve all announcements",
                    "Update an announcement"
                ],
                "Asset Type": [
                    "Create an asset type",
                    "Delete an asset type",
                    "Retrieve an asset type",
                    "Retrieve all asset types",
                    "Update an asset type"
                ],
                "Change": [
                    "Create a change",
                    "Delete a change",
                    "Retrieve a change",
                    "Retrieve all changes",
                    "Update a change"
                ],
                "Department": [
                    "Create a department",
                    "Delete a department",
                    "Retrieve a department",
                    "Retrieve all departments",
                    "Update a department"
                ],
                "Location": [
                    "Create a location",
                    "Delete a location",
                    "Retrieve a location",
                    "Retrieve all locations",
                    "Update a location"
                ],
                "Problem": [
                    "Create a problem",
                    "Delete a problem",
                    "Retrieve a problem",
                    "Retrieve all problems",
                    "Update a problem"
                ],
                "Product": [
                    "Create a product",
                    "Delete a product",
                    "Retrieve a product",
                    "Retrieve all products",
                    "Update a product"
                ],
                "Release": [
                    "Create a release",
                    "Delete a release",
                    "Retrieve a release",
                    "Retrieve all releases",
                    "Update a release"
                ],
                "Requester": [
                    "Create a requester",
                    "Delete a requester",
                    "Retrieve a requester",
                    "Retrieve all requesters",
                    "Update a requester"
                ],
                "Requester Group": [
                    "Create a requester group",
                    "Delete a requester group",
                    "Retrieve a requester group",
                    "Retrieve all requester groups",
                    "Update a requester group"
                ],
                "Software": [
                    "Create a software application",
                    "Delete a software application",
                    "Retrieve a software application",
                    "Retrieve all software applications",
                    "Update a software application"
                ],
                "Ticket": [
                    "Create a ticket",
                    "Delete a ticket",
                    "Retrieve a ticket",
                    "Retrieve all tickets",
                    "Update a ticket"
                ]
            },
            "credentials": "/integrations/builtin/credentials/freshservice.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "FreshworksCRM": {
            "description": "Use the Freshworks CRM node to automate work in Freshworks CRM, and integrate Freshworks CRM with other applications.",
            "operations": {
                "Account": [
                    "Create an account",
                    "Delete an account",
                    "Retrieve an account",
                    "Retrieve all accounts",
                    "Update an account"
                ],
                "Appointment": [
                    "Create an appointment",
                    "Delete an appointment",
                    "Retrieve an appointment",
                    "Retrieve all appointments",
                    "Update an appointment"
                ],
                "Contact": [
                    "Create a contact",
                    "Delete a contact",
                    "Retrieve a contact",
                    "Retrieve all contacts",
                    "Update a contact"
                ],
                "Deal": [
                    "Create a deal",
                    "Delete a deal",
                    "Retrieve a deal",
                    "Retrieve all deals",
                    "Update a deal"
                ],
                "Note": [
                    "Create a note",
                    "Delete a note",
                    "Update a note"
                ],
                "Sales Activity": [
                    "Retrieve a sales activity",
                    "Retrieve all sales activities"
                ],
                "Task": [
                    "Create a task",
                    "Delete a task",
                    "Retrieve a task",
                    "Retrieve all tasks",
                    "Update a task"
                ]
            },
            "credentials": "/integrations/builtin/credentials/freshworkscrm.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GetResponse": {
            "description": "Use the GetResponse node to automate work in GetResponse, and integrate GetResponse with other applications.",
            "operations": {
                "Contact": [
                    "Create a new contact",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update contact properties"
                ]
            },
            "credentials": "/integrations/builtin/credentials/getresponse.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Ghost": {
            "description": "Use the Ghost node to automate work in Ghost, and integrate Ghost with other applications.",
            "operations": {
                "Admin API": {
                    "Post": [
                        "Create a post",
                        "Delete a post",
                        "Get a post",
                        "Get all posts",
                        "Update a post"
                    ]
                },
                "Content API": {
                    "Post": [
                        "Get a post",
                        "Get all posts"
                    ]
                }
            },
            "credentials": "/integrations/builtin/credentials/ghost.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GitHub": {
            "description": "Use the GitHub node to automate work in GitHub, and integrate GitHub with other applications.",
            "operations": {
                "File": [
                    "Create",
                    "Delete",
                    "Edit",
                    "Get",
                    "List"
                ],
                "Issue": [
                    "Create",
                    "Create Comment",
                    "Edit",
                    "Get",
                    "Lock"
                ],
                "Organization": [
                    "Get Repositories"
                ],
                "Release": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Repository": [
                    "Get",
                    "Get Issues",
                    "Get License",
                    "Get Profile",
                    "Get Pull Requests",
                    "List Popular Paths",
                    "List Referrers"
                ],
                "Review": [
                    "Create",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "User": [
                    "Get Repositories",
                    "Invite"
                ],
                "Workflow": [
                    "Disable",
                    "Dispatch",
                    "Enable",
                    "Get",
                    "Get Usage",
                    "List"
                ]
            },
            "credentials": "/integrations/builtin/credentials/github.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GitLab": {
            "description": "Use the GitLab node to automate work in GitLab, and integrate GitLab with other applications.",
            "operations": {
                "File": [
                    "Create",
                    "Delete",
                    "Edit",
                    "Get",
                    "List"
                ],
                "Issue": [
                    "Create a new issue",
                    "Create a new comment on an issue",
                    "Edit an issue",
                    "Get the data of a single issue",
                    "Lock an issue"
                ],
                "Release": [
                    "Create a new release",
                    "Delete a new release",
                    "Get a new release",
                    "Get all releases",
                    "Update a new release"
                ],
                "Repository": [
                    "Get the data of a single repository",
                    "Returns issues of a repository"
                ],
                "User": [
                    "Returns the repositories of a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/gitlab.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Gong": {
            "description": "Use the Gong node to automate work in Gong and integrate Gong with other applications.",
            "operations": {
                "Call": [
                    "Get",
                    "Get Many"
                ],
                "User": [
                    "Get",
                    "Get Many"
                ]
            },
            "credentials": "/integrations/builtin/credentials/gong.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleAds": {
            "description": "Use the Google Ads node to automate work in Google Ads, and integrate Google Ads with other applications.",
            "operations": {
                "Campaign": [
                    "Get all campaigns",
                    "Get a campaign"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GoogleAnalytics": {
            "description": "Use the Google Analytics node to automate work in Google Analytics, and integrate Google Analytics with other applications.",
            "operations": {
                "Report": [
                    "Get"
                ],
                "User Activity": [
                    "Search"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GoogleBigQuery": {
            "description": "Use the Google BigQuery node to automate work in Google BigQuery, and integrate Google BigQuery with other applications.",
            "operations": [
                "Execute Query",
                "Insert"
            ],
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GoogleBooks": {
            "description": "Use the Google Books node to automate work in Google Books, and integrate Google Books with other applications.",
            "operations": {
                "Bookshelf": [
                    "Retrieve a specific bookshelf resource for the specified user",
                    "Get all public bookshelf resource for the specified user"
                ],
                "Bookshelf Volume": [
                    "Add a volume to a bookshelf",
                    "Clears all volumes from a bookshelf",
                    "Get all volumes in a specific bookshelf for the specified user",
                    "Moves a volume within a bookshelf",
                    "Removes a volume from a bookshelf"
                ],
                "Volume": [
                    "Get a volume resource based on ID",
                    "Get all volumes filtered by query"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleBusinessProfile": {
            "description": "Use the Google Business Profile node to automate work in Google Business Profile and integrate Google Business Profile with other applications.",
            "operations": {
                "Post": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Review": [
                    "Delete Reply",
                    "Get",
                    "Get Many",
                    "Reply"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleChat": {
            "description": "Use the Google Chat node to automate work in Google Chat, and integrate Google Chat with other applications.",
            "operations": {
                "Member": [
                    "Get a membership",
                    "Get all memberships in a space"
                ],
                "Message": [
                    "Create a message",
                    "Delete a message",
                    "Get a message",
                    "Update a message"
                ],
                "Space": [
                    "Get a space",
                    "Get all spaces the caller is a member of"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GoogleCloudFirestore": {
            "description": "Use the Google Cloud Firestore node to automate work in Google Cloud Firestore, and integrate Google Cloud Firestore with other applications.",
            "operations": {
                "Document": [
                    "Create a document",
                    "Create/Update a document",
                    "Delete a document",
                    "Get a document",
                    "Get all documents from a collection",
                    "Runs a query against your documents"
                ],
                "Collection": [
                    "Get all root collections"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GoogleCloudNaturalLanguage": {
            "description": "Use the Google Cloud Natural Language node to automate work in Google Cloud Natural Language, and integrate Google Cloud Natural Language with other applications.",
            "operations": {
                "Document": [
                    "Analyze Sentiment"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleCloudRealtimeDatabase": {
            "description": "Use the Google Cloud Realtime Database node to automate work in Google Cloud Realtime Database, and integrate Google Cloud Realtime Database with other applications.",
            "operations": [
                "Write data to a database",
                "Delete data from a database",
                "Get a record from a database",
                "Append to a list of data",
                "Update item on a database"
            ],
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleCloudStorage": {
            "description": "Use the Google Cloud Storage node to automate work in Google Cloud Storage, and integrate Google Cloud Storage with other applications.",
            "operations": {
                "Bucket": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Object": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleContacts": {
            "description": "Use the Google Contacts node to automate work in Google Contacts, and integrate Google Contacts with other applications.",
            "operations": {
                "Contact": [
                    "Create a contact",
                    "Delete a contact",
                    "Get a contact",
                    "Retrieve all contacts",
                    "Update a contact"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleDocs": {
            "description": "Use the Google Docs node to automate work in Google Docs, and integrate Google Docs with other applications.",
            "operations": {
                "Document": [
                    "Create",
                    "Get",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GooglePerspective": {
            "description": "Use the Google Perspective node to automate work in Google Perspective, and integrate Google Perspective with other applications.",
            "operations": [
                "Analyze Comment"
            ],
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleSlides": {
            "description": "Use the Google Slides node to automate work in Google Slides, and integrate Google Slides with other applications.",
            "operations": {
                "Page": [
                    "Get a page",
                    "Get a thumbnail"
                ],
                "Presentation": [
                    "Create a presentation",
                    "Get a presentation",
                    "Get presentation slides",
                    "Replace text in a presentation"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleTasks": {
            "description": "Use the Google Tasks node to automate work in Google Tasks, and integrate Google Tasks with other applications.",
            "operations": {
                "Task": [
                    "Add a task to task list",
                    "Delete a task",
                    "Retrieve a task",
                    "Retrieve all tasks from a task list",
                    "Update a task"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoogleTranslate": {
            "description": "Use the Google Translate node to automate work in Google Translate, and integrate Google Translate with other applications.",
            "operations": {
                "Language": [
                    "Translate data"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Gotify": {
            "description": "Use the Gotify node to automate work in Gotify, and integrate Gotify with other applications.",
            "operations": {
                "Message": [
                    "Create",
                    "Delete",
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/gotify.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "GoToWebinar": {
            "description": "Use the GoToWebinar node to automate work in GoToWebinar, and integrate GoToWebinar with other applications.",
            "operations": {
                "Attendee": [
                    "Get",
                    "Get All",
                    "Get Details"
                ],
                "Co-Organizer": [
                    "Create",
                    "Delete",
                    "Get All",
                    "Re-invite"
                ],
                "Panelist": [
                    "Create",
                    "Delete",
                    "Get All",
                    "Re-invite"
                ],
                "Registrant": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All"
                ],
                "Session": [
                    "Get",
                    "Get All",
                    "Get Details"
                ],
                "Webinar": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/gotowebinar.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Grafana": {
            "description": "Use the Grafana node to automate work in Grafana, and integrate Grafana with other applications.",
            "operations": {
                "Dashboard": [
                    "Create a dashboard",
                    "Delete a dashboard",
                    "Get a dashboard",
                    "Get all dashboards",
                    "Update a dashboard"
                ],
                "Team": [
                    "Create a team",
                    "Delete a team",
                    "Get a team",
                    "Retrieve all teams",
                    "Update a team"
                ],
                "Team Member": [
                    "Add a member to a team",
                    "Retrieve all team members",
                    "Remove a member from a team"
                ],
                "User": [
                    "Delete a user from the current organization",
                    "Retrieve all users in the current organization",
                    "Update a user in the current organization"
                ]
            },
            "credentials": "/integrations/builtin/credentials/grafana.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Grist": {
            "description": "Use the Grist node to automate work in Grist, and integrate Grist with other applications.",
            "operations": [
                "Append",
                "Delete",
                "List",
                "Read",
                "Update"
            ],
            "credentials": "/integrations/builtin/credentials/grist.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "GSuiteAdmin": {
            "description": "Use the Google Workspace Admin node to automate work in Google Workspace Admin, and integrate Google Workspace Admin with other applications.",
            "operations": {
                "Group": [
                    "Create a group",
                    "Delete a group",
                    "Get a group",
                    "Get all groups",
                    "Update a group"
                ],
                "User": [
                    "Create a user",
                    "Delete a user",
                    "Get a user",
                    "Get all users",
                    "Update a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "HackerNews": {
            "description": "Use the Hacker News node to automate work in Hacker News, and integrate Hacker News with other applications.",
            "operations": {
                "All": [
                    "Get all items"
                ],
                "Article": [
                    "Get a Hacker News article"
                ],
                "User": [
                    "Get a Hacker News user"
                ]
            },
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "HaloPSA": {
            "description": "Use the HaloPSA node to automate work in HaloPSA, and integrate HaloPSA with other applications.",
            "operations": {
                "Client": [
                    "Create a client",
                    "Delete a client",
                    "Get a client",
                    "Get all clients",
                    "Update a client"
                ],
                "Site": [
                    "Create a site",
                    "Delete a site",
                    "Get a site",
                    "Get all sites",
                    "Update a site"
                ],
                "Ticket": [
                    "Create a ticket",
                    "Delete a ticket",
                    "Get a ticket",
                    "Get all tickets",
                    "Update a ticket"
                ],
                "User": [
                    "Create a user",
                    "Delete a user",
                    "Get a user",
                    "Get all users",
                    "Update a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/halopsa.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Harvest": {
            "description": "Use the Harvest node to automate work in Harvest, and integrate Harvest with other applications.",
            "operations": {
                "Client": [
                    "Create a client",
                    "Delete a client",
                    "Get data of a client",
                    "Get data of all clients",
                    "Update a client"
                ],
                "Company": [
                    "Retrieves the company for the currently authenticated user"
                ],
                "Contact": [
                    "Create a contact",
                    "Delete a contact",
                    "Get data of a contact",
                    "Get data of all contacts",
                    "Update a contact"
                ],
                "Estimate": [
                    "Create an estimate",
                    "Delete an estimate",
                    "Get data of an estimate",
                    "Get data of all estimates",
                    "Update an estimate"
                ],
                "Expense": [
                    "Get data of an expense",
                    "Get data of all expenses",
                    "Create an expense",
                    "Update an expense",
                    "Delete an expense"
                ],
                "Invoice": [
                    "Get data of an invoice",
                    "Get data of all invoices",
                    "Create an invoice",
                    "Update an invoice",
                    "Delete an invoice"
                ],
                "Project": [
                    "Create a project",
                    "Delete a project",
                    "Get data of a project",
                    "Get data of all projects",
                    "Update a project"
                ],
                "Task": [
                    "Create a task",
                    "Delete a task",
                    "Get data of a task",
                    "Get data of all tasks",
                    "Update a task"
                ],
                "Time Entries": [
                    "Create a time entry using duration",
                    "Create a time entry using start and end time",
                    "Delete a time entry",
                    "Delete a time entry's external reference.",
                    "Get data of a time entry",
                    "Get data of all time entries",
                    "Restart a time entry",
                    "Stop a time entry",
                    "Update a time entry"
                ],
                "User": [
                    "Create a user",
                    "Delete a user",
                    "Get data of a user",
                    "Get data of all users",
                    "Get data of authenticated user",
                    "Update a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/harvest.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "HelpScout": {
            "description": "Use the Help Scout node to automate work in Help Scout, and integrate Help Scout with other applications.",
            "operations": {
                "Conversation": [
                    "Create a new conversation",
                    "Delete a conversation",
                    "Get a conversation",
                    "Get all conversations"
                ],
                "Customer": [
                    "Create a new customer",
                    "Get a customer",
                    "Get all customers",
                    "Get customer property definitions",
                    "Update a customer"
                ],
                "Mailbox": [
                    "Get data of a mailbox",
                    "Get all mailboxes"
                ],
                "Thread": [
                    "Create a new chat thread",
                    "Get all chat threads"
                ]
            },
            "credentials": "/integrations/builtin/credentials/helpscout.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "HighLevel": {
            "description": "Use the HighLevel node to automate work in HighLevel, and integrate HighLevel with other applications.",
            "operations": {
                "Contact": [
                    "Create or update",
                    "Delete",
                    "Get",
                    "Get many",
                    "Update"
                ],
                "Opportunity": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get many",
                    "Update"
                ],
                "Task": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get many",
                    "Update"
                ],
                "Calendar": [
                    "Book an appointment",
                    "Get free slots"
                ]
            },
            "credentials": "/integrations/builtin/credentials/highlevel.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "HomeAssistant": {
            "description": "Use the Home Assistant node to automate work in Home Assistant, and integrate Home Assistant with other applications.",
            "operations": {
                "Camera Proxy": [
                    "Get the camera screenshot"
                ],
                "Config": [
                    "Get the configuration",
                    "Check the configuration"
                ],
                "Event": [
                    "Create an event",
                    "Get all events"
                ],
                "Log": [
                    "Get a log for a specific entity",
                    "Get all logs"
                ],
                "Service": [
                    "Call a service within a specific domain",
                    "Get all services"
                ],
                "State": [
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Get a state for a specific entity",
                    "Get all states"
                ],
                "Template": [
                    "Create a template"
                ]
            },
            "credentials": "/integrations/builtin/credentials/homeassistant.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "HubSpot": {
            "description": "Use the HubSpot node to automate work in HubSpot, and integrate HubSpot with other applications.",
            "operations": {
                "Contact": [
                    "Create/Update a contact",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Get recently created/updated contacts",
                    "Search contacts"
                ],
                "Contact List": [
                    "Add contact to a list",
                    "Remove a contact from a list"
                ],
                "Company": [
                    "Create a company",
                    "Delete a company",
                    "Get a company",
                    "Get all companies",
                    "Get recently created companies",
                    "Get recently modified companies",
                    "Search companies by domain",
                    "Update a company"
                ],
                "Deal": [
                    "Create a deal",
                    "Delete a deal",
                    "Get a deal",
                    "Get all deals",
                    "Get recently created deals",
                    "Get recently modified deals",
                    "Search deals",
                    "Update a deal"
                ],
                "Engagement": [
                    "Create an engagement",
                    "Delete an engagement",
                    "Get an engagement",
                    "Get all engagements"
                ],
                "Form": [
                    "Get all fields from a form",
                    "Submit data to a form"
                ],
                "Ticket": [
                    "Create a ticket",
                    "Delete a ticket",
                    "Get a ticket",
                    "Get all tickets",
                    "Update a ticket"
                ]
            },
            "credentials": "/integrations/builtin/credentials/hubspot.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "HumanticAI": {
            "description": "Use the Humantic AI node to automate work in Humantic AI, and integrate Humantic AI with other applications.",
            "operations": {
                "Profile": [
                    "Create a profile",
                    "Retrieve a profile",
                    "Update a profile"
                ]
            },
            "credentials": "/integrations/builtin/credentials/humanticai.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Hunter": {
            "description": "Use the Hunter node to automate work in Hunter, and integrate Hunter with other applications.",
            "operations": [
                "Get every email address found on the internet using a given domain name, with sources",
                "Generate or retrieve the most likely email address from a domain name, a first name and a last name",
                "Verify the deliverability of an email address"
            ],
            "credentials": "/integrations/builtin/credentials/hunter.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Intercom": {
            "description": "Use the Intercom node to automate work in Intercom, and integrate Intercom with other applications.",
            "operations": {
                "Company": [
                    "Create a new company",
                    "Get data of a company",
                    "Get data of all companies",
                    "Update a company",
                    "List company's users"
                ],
                "Lead": [
                    "Create a new lead",
                    "Delete a lead",
                    "Get data of a lead",
                    "Get data of all leads",
                    "Update new lead"
                ],
                "User": [
                    "Create a new user",
                    "Delete a user",
                    "Get data of a user",
                    "Get data of all users",
                    "Update a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/intercom.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "InvoiceNinja": {
            "description": "Use the Invoice Ninja node to automate work in Invoice Ninja, and integrate Invoice Ninja with other applications.",
            "operations": {
                "Client": [
                    "Create a new client",
                    "Delete a client",
                    "Get data of a client",
                    "Get data of all clients"
                ],
                "Expense": [
                    "Create a new expense",
                    "Delete an expense",
                    "Get data of an expense",
                    "Get data of all expenses"
                ],
                "Invoice": [
                    "Create a new invoice",
                    "Delete a invoice",
                    "Email an invoice",
                    "Get data of a invoice",
                    "Get data of all invoices"
                ],
                "Payment": [
                    "Create a new payment",
                    "Delete a payment",
                    "Get data of a payment",
                    "Get data of all payments"
                ],
                "Quote": [
                    "Create a new quote",
                    "Delete a quote",
                    "Email an quote",
                    "Get data of a quote",
                    "Get data of all quotes"
                ],
                "Task": [
                    "Create a new task",
                    "Delete a task",
                    "Get data of a task",
                    "Get data of all tasks"
                ]
            },
            "credentials": "/integrations/builtin/credentials/invoiceninja.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Iterable": {
            "description": "Use the Iterable node to automate work in Iterable, and integrate Iterable with other applications.",
            "operations": {
                "Event": [
                    "Record the actions a user perform"
                ],
                "User": [
                    "Create/Update a user",
                    "Delete a user",
                    "Get a user"
                ],
                "User List": [
                    "Add user to list",
                    "Remove a user from a list"
                ]
            },
            "credentials": "/integrations/builtin/credentials/iterable.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Jenkins": {
            "description": "Use the Jenkins node to automate work in Jenkins, and integrate Jenkins with other applications.",
            "operations": {
                "Build": [
                    "List Builds"
                ],
                "Instance": [
                    "Cancel quiet down state",
                    "Put Jenkins in quiet mode, no builds can be started, Jenkins is ready for shutdown",
                    "Restart Jenkins immediately on environments where it's possible",
                    "Restart Jenkins once no jobs are running on environments where it's possible",
                    "Shutdown once no jobs are running",
                    "Shutdown Jenkins immediately"
                ],
                "Job": [
                    "Copy a specific job",
                    "Create a new job",
                    "Trigger a specific job",
                    "Trigger a specific job"
                ]
            },
            "credentials": "/integrations/builtin/credentials/jenkins.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "JiraSoftware": {
            "description": "Use the Jira Software node to automate work in Jira, and integrate Jira with other applications.",
            "operations": {
                "Issue": [
                    "Get issue changelog",
                    "Create a new issue",
                    "Delete an issue",
                    "Get an issue",
                    "Get all issues",
                    "Create an email notification for an issue and add it to the mail queue",
                    "Return either all transitions or a transition that can be performed by the user on an issue, based on the issue's status",
                    "Update an issue"
                ],
                "Issue Attachment": [
                    "Add attachment to issue",
                    "Get an attachment",
                    "Get all attachments",
                    "Remove an attachment"
                ],
                "Issue Comment": [
                    "Add comment to issue",
                    "Get a comment",
                    "Get all comments",
                    "Remove a comment",
                    "Update a comment"
                ],
                "User": [
                    "Create a new user.",
                    "Delete a user.",
                    "Retrieve a user."
                ]
            },
            "credentials": "/integrations/builtin/credentials/jira.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Kafka": {
            "description": "Use the Kafka node to automate work in Kafka, and integrate Kafka with other applications.",
            "operations": [
                "Send message"
            ],
            "credentials": "/integrations/builtin/credentials/kafka.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Keap": {
            "description": "Use the Keap node to automate work in Keap, and integrate Keap with other applications.",
            "operations": {
                "Company": [
                    "Create a company",
                    "Retrieve all companies"
                ],
                "Contact": [
                    "Create/update a contact",
                    "Delete an contact",
                    "Retrieve an contact",
                    "Retrieve all contacts"
                ],
                "Contact Note": [
                    "Create a note",
                    "Delete a note",
                    "Get a notes",
                    "Retrieve all notes",
                    "Update a note"
                ],
                "Contact Tag": [
                    "Add a list of tags to a contact",
                    "Delete a contact's tag",
                    "Retrieve all contact's tags"
                ],
                "Ecommerce Order": [
                    "Create an ecommerce order",
                    "Get an ecommerce order",
                    "Delete an ecommerce order",
                    "Retrieve all ecommerce orders"
                ],
                "Ecommerce Product": [
                    "Create an ecommerce product",
                    "Delete an ecommerce product",
                    "Get an ecommerce product",
                    "Retrieve all ecommerce product"
                ],
                "Email": [
                    "Create a record of an email sent to a contact",
                    "Retrieve all sent emails",
                    "Send Email"
                ],
                "File": [
                    "Delete a file",
                    "Retrieve all files",
                    "Upload a file"
                ]
            },
            "credentials": "/integrations/builtin/credentials/keap.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Kitemaker": {
            "description": "Use the Kitemaker node to automate work in Kitemaker, and integrate Kitemaker with other applications.",
            "operations": {
                "Organization": [
                    "Retrieve data on the logged-in user's organization."
                ],
                "Space": [
                    "Retrieve data on all the spaces in the logged-in user's organization."
                ],
                "User": [
                    "Retrieve data on all the users in the logged-in user's organization."
                ],
                "Work Item": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/kitemaker.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "KoboToolbox": {
            "description": "Use the KoboToolbox node to automate work in KoboToolbox, and integrate KoboToolbox with other applications.",
            "operations": {
                "File": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many"
                ],
                "Form": [
                    "Get",
                    "Get Many",
                    "Redeploy"
                ],
                "Hook": [
                    "Get",
                    "Get Many",
                    "Logs",
                    "Retry All",
                    "Retry One"
                ],
                "Submission": [
                    "Delete",
                    "Get",
                    "Get Many",
                    "Get Validation Status",
                    "Update Validation Status"
                ]
            },
            "credentials": "/integrations/builtin/credentials/kobotoolbox.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Lemlist": {
            "description": "Use the Lemlist node to automate work in Lemlist, and integrate Lemlist with other applications.",
            "operations": {
                "Activity": [
                    "Get Many: Get many activities"
                ],
                "Campaign": [
                    "Get Many: Get many campaigns",
                    "Get Stats: Get campaign stats"
                ],
                "Enrichment": [
                    "Get: Fetches a previously completed enrichment",
                    "Enrich Lead: Enrich a lead using an email or LinkedIn URL",
                    "Enrich Person: Enrich a person using an email or LinkedIn URL"
                ],
                "Lead": [
                    "Create: Create a new lead",
                    "Delete: Delete an existing lead",
                    "Get: Get an existing lead",
                    "Unsubscribe: Unsubscribe an existing lead"
                ],
                "Team": [
                    "Get: Get an existing team",
                    "Get Credits: Get an existing team's credits"
                ],
                "Unsubscribe": [
                    "Add: Add an email to an unsubscribe list",
                    "Delete: Delete an email from an unsubscribe list",
                    "Get Many: Get many unsubscribed emails"
                ]
            },
            "credentials": "/integrations/builtin/credentials/lemlist.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Line": {
            "description": "Use the Line node to automate work in Line, and integrate Line with other applications.",
            "operations": {
                "Notification": [
                    "Sends notifications to users or groups"
                ]
            },
            "credentials": "/integrations/builtin/credentials/line.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Linear": {
            "description": "Use the Linear node to automate work in Linear, and integrate Linear with other applications.",
            "operations": {
                "Issue": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/linear.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "LingvaNex": {
            "description": "Use the LingvaNex node to automate work in LingvaNex, and integrate LingvaNex with other applications.",
            "operations": [
                "Translate data"
            ],
            "credentials": "/integrations/builtin/credentials/lingvanex.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "LinkedIn": {
            "description": "Use the LinkedIn node to automate work in LinkedIn, and integrate LinkedIn with other applications.",
            "operations": {
                "Post": [
                    "Create"
                ]
            },
            "credentials": "/integrations/builtin/credentials/linkedin.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "LoneScale": {
            "description": "Use the LoneScale node to automate work in LoneScale and integrate LoneScale with other applications.",
            "operations": {
                "List": [
                    "Create"
                ],
                "Item": [
                    "Create"
                ]
            },
            "credentials": "/integrations/builtin/credentials/lonescale.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Magento2": {
            "description": "Use the Magento 2 node to automate work in Magento 2, and integrate Magento 2 with other applications.",
            "operations": {
                "Customer": [
                    "Create a new customer",
                    "Delete a customer",
                    "Get a customer",
                    "Get all customers",
                    "Update a customer"
                ],
                "Invoice": [
                    "Create an invoice"
                ],
                "Order": [
                    "Cancel an order",
                    "Get an order",
                    "Get all orders",
                    "Ship an order"
                ],
                "Product": [
                    "Create a product",
                    "Delete a product",
                    "Get a product",
                    "Get all products",
                    "Update a product"
                ]
            },
            "credentials": "/integrations/builtin/credentials/magento2.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mailcheck": {
            "description": "Use the Mailcheck node to automate work in Mailcheck, and integrate Mailcheck with other applications.",
            "operations": {
                "Email": [
                    "Check"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mailcheck.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mailchimp": {
            "description": "Use the Mailchimp node to automate work in Mailchimp, and integrate Mailchimp with other applications.",
            "operations": {
                "Campaign": [
                    "Delete a campaign",
                    "Get a campaign",
                    "Get all the campaigns",
                    "Replicate a campaign",
                    "Creates a Resend to Non-Openers version of this campaign",
                    "Send a campaign"
                ],
                "List Group": [
                    "Get all groups"
                ],
                "Member": [
                    "Create a new member on list",
                    "Delete a member on list",
                    "Get a member on list",
                    "Get all members on list",
                    "Update a new member on list"
                ],
                "Member Tag": [
                    "Add tags from a list member",
                    "Remove tags from a list member"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mailchimp.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MailerLite": {
            "description": "Use the MailerLite node to automate work in MailerLite, and integrate MailerLite with other applications.",
            "operations": {
                "Subscriber": [
                    "Create a new subscriber",
                    "Get an subscriber",
                    "Get all subscribers",
                    "Update an subscriber"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mailerlite.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mailgun": {
            "description": "Use the Mailgun node to automate work in Mailgun, and integrate Mailgun with other applications.",
            "operations": [
                "Send an email"
            ],
            "credentials": "/integrations/builtin/credentials/mailgun.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mailjet": {
            "description": "Use the Mailjet node to automate work in Mailjet, and integrate Mailjet with other applications.",
            "operations": {
                "Email": [
                    "Send an email",
                    "Send an email template"
                ],
                "SMS": [
                    "Send an SMS"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mailjet.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mandrill": {
            "description": "Use the Mandrill node to automate work in Mandrill, and integrate Mandrill with other applications.",
            "operations": {
                "Message": [
                    "Send message based on template.",
                    "Send message based on HTML."
                ]
            },
            "credentials": "/integrations/builtin/credentials/mandrill.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "marketstack": {
            "description": "Use the marketstack node to automate work in marketstack, and integrate marketstack with other applications.",
            "operations": {
                "End-of-Day Data": [
                    "Get All"
                ],
                "Exchange": [
                    "Get"
                ],
                "Ticker": [
                    "Get"
                ]
            },
            "credentials": "/integrations/builtin/credentials/marketstack.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Matrix": {
            "description": "Use the Matrix node to automate work in Matrix, and integrate Matrix with other applications.",
            "operations": {
                "Account": [
                    "Get current user's account information"
                ],
                "Event": [
                    "Get single event by ID"
                ],
                "Media": [
                    "Send media to a chat room"
                ],
                "Message": [
                    "Send a message to a room",
                    "Gets all messages from a room"
                ],
                "Room": [
                    "New chat room with defined settings",
                    "Invite a user to a room",
                    "Join a new room",
                    "Kick a user from a room",
                    "Leave a room"
                ],
                "Room Member": [
                    "Get all members"
                ]
            },
            "credentials": "/integrations/builtin/credentials/matrix.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mattermost": {
            "description": "Use the Mattermost node to automate work in Mattermost, and integrate Mattermost with other applications.",
            "operations": {
                "Channel": [
                    "Add a user to a channel",
                    "Create a new channel",
                    "Soft delete a channel",
                    "Get a page of members for a channel",
                    "Restores a soft deleted channel",
                    "Search for a channel",
                    "Get statistics for a channel"
                ],
                "Message": [
                    "Soft delete a post, by marking the post as deleted in the database",
                    "Post a message into a channel",
                    "Post an ephemeral message into a channel"
                ],
                "Reaction": [
                    "Add a reaction to a post.",
                    "Remove a reaction from a post",
                    "Get all the reactions to one or more posts"
                ],
                "User": [
                    "Create a new user",
                    "Deactivates the user and revokes all its sessions by archiving its user object.",
                    "Retrieve all users",
                    "Get a user by email",
                    "Get a user by ID",
                    "Invite user to team"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mattermost.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Mautic": {
            "description": "Use the Mautic node to automate work in Mautic, and integrate Mautic with other applications.",
            "operations": {
                "Campaign Contact": [
                    "Add contact to a campaign",
                    "Remove contact from a campaign"
                ],
                "Company": [
                    "Create a new company",
                    "Delete a company",
                    "Get data of a company",
                    "Get data of all companies",
                    "Update a company"
                ],
                "Company Contact": [
                    "Add contact to a company",
                    "Remove a contact from a company"
                ],
                "Contact": [
                    "Create a new contact",
                    "Delete a contact",
                    "Edit contact's points",
                    "Add/remove contacts from/to the don't contact list",
                    "Get data of a contact",
                    "Get data of all contacts",
                    "Send email to contact",
                    "Update a contact"
                ],
                "Contact Segment": [
                    "Add contact to a segment",
                    "Remove contact from a segment"
                ],
                "Segment Email": [
                    "Send"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mautic.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Medium": {
            "description": "Use the Medium node to automate work in Medium, and integrate Medium with other applications.",
            "operations": {
                "Post": [
                    "Create a post"
                ],
                "Publication": [
                    "Get all publications"
                ]
            },
            "credentials": "/integrations/builtin/credentials/medium.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MessageBird": {
            "description": "Use the MessageBird node to automate work in MessageBird, and integrate MessageBird with other applications.",
            "operations": {
                "SMS": [
                    "Send text messages (SMS)"
                ],
                "Balance": [
                    "Get the balance"
                ]
            },
            "credentials": "/integrations/builtin/credentials/messagebird.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Metabase": {
            "description": "Use the Metabase node to automate work in Metabase, and integrate Metabase with other applications.",
            "operations": {
                "Alert": [
                    "Get",
                    "Get All"
                ],
                "Database": [
                    "Add",
                    "Get All",
                    "Get Fields"
                ],
                "Metric": [
                    "Get",
                    "Get All"
                ],
                "Question": [
                    "Get",
                    "Get All",
                    "Result Data"
                ]
            },
            "credentials": "/integrations/builtin/credentials/metabase.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MicrosoftDynamicsCRM": {
            "description": "Use the Microsoft Dynamics CRM node to automate work in Microsoft Dynamics CRM, and integrate Microsoft Dynamics CRM with other applications.",
            "operations": {
                "Account": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoft.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MicrosoftEntraIDAzureActiveDirectory": {
            "description": "Use the Microsoft Entra ID node to automate work in Microsoft Entra ID and integrate Microsoft Entra ID with other applications.",
            "operations": {
                "Group": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "User": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update",
                    "Add to Group",
                    "Remove from Group"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoftentra.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MicrosoftExcel365": {
            "description": "Use the Microsoft Excel node to automate work in Microsoft Excel, and integrate Microsoft Excel with other applications.",
            "operations": {
                "Table": [
                    "Adds rows to the end of the table",
                    "Retrieve a list of table columns",
                    "Retrieve a list of table rows",
                    "Looks for a specific column value and then returns the matching row"
                ],
                "Workbook": [
                    "Adds a new worksheet to the workbook.",
                    "Get data of all workbooks"
                ],
                "Worksheet": [
                    "Get all worksheets",
                    "Get worksheet content"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoft.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "MicrosoftGraphSecurity": {
            "description": "Use the Microsoft Graph Security node to automate work in Microsoft Graph Security, and integrate Microsoft Graph Security with other applications.",
            "operations": {
                "Secure Score": [
                    "Get",
                    "Get All"
                ],
                "Secure Score Control Profile": [
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoft.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MicrosoftOneDrive": {
            "description": "Use the Microsoft OneDrive node to automate work in Microsoft OneDrive, and integrate Microsoft OneDrive with other applications.",
            "operations": {
                "File": [
                    "Copy a file",
                    "Delete a file",
                    "Download a file",
                    "Get a file",
                    "Rename a file",
                    "Search a file",
                    "Share a file",
                    "Upload a file up to 4MB in size"
                ],
                "Folder": [
                    "Create a folder",
                    "Delete a folder",
                    "Get Children (get items inside a folder)",
                    "Rename a folder",
                    "Search a folder",
                    "Share a folder"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoft.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "MicrosoftOutlook": {
            "description": "Use the Microsoft Outlook node to automate work in Microsoft Outlook, and integrate Microsoft Outlook with other applications.",
            "operations": {
                "Calendar": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Contact": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Draft": [
                    "Create",
                    "Delete",
                    "Get",
                    "Send",
                    "Update"
                ],
                "Event": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Folder": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Folder Message": [
                    "Get Many"
                ],
                "Message": [
                    "Delete",
                    "Get",
                    "Get Many",
                    "Move",
                    "Reply",
                    "Send",
                    "Update"
                ],
                "Message Attachment": [
                    "Add",
                    "Download",
                    "Get",
                    "Get Many"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoft.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "MicrosoftSQL": {
            "description": "Use the Microsoft SQL node to automate work in Microsoft SQL, and integrate Microsoft SQL with other applications.",
            "operations": [
                "Execute an SQL query",
                "Insert rows in database",
                "Update rows in database",
                "Delete rows in database"
            ],
            "credentials": "/integrations/builtin/credentials/microsoftsql.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "MicrosoftTeams": {
            "description": "Use the Microsoft Teams node to automate work in Microsoft Teams, and integrate Microsoft Teams with other applications.",
            "operations": {
                "Channel": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Channel Message": [
                    "Create",
                    "Get Many"
                ],
                "Chat Message": [
                    "Create",
                    "Get",
                    "Get Many"
                ],
                "Task": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoft.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "MicrosoftToDo": {
            "description": "Use the Microsoft To Do node to automate work in Microsoft To Do, and integrate Microsoft To Do with other applications.",
            "operations": {
                "Linked Resource": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "List": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Task": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/microsoft.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mindee": {
            "description": "Use the Mindee node to automate work in Mindee, and integrate Mindee with other applications.",
            "operations": {
                "Invoice": [
                    "Predict"
                ],
                "Receipt": [
                    "Predict"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mindee.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MISP": {
            "description": "Use the MISP node to automate work in MISP, and integrate MISP with other applications.",
            "operations": {
                "Attribute": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Search",
                    "Update"
                ],
                "Event": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Publish",
                    "Search",
                    "Unpublish",
                    "Update"
                ],
                "Event Tag": [
                    "Add",
                    "Remove"
                ],
                "Feed": [
                    "Create",
                    "Disable",
                    "Enable",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Galaxy": [
                    "Delete",
                    "Get",
                    "Get All"
                ],
                "Noticelist": [
                    "Get",
                    "Get All"
                ],
                "Object": [
                    "Search"
                ],
                "Organisation": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Tag": [
                    "Create",
                    "Delete",
                    "Get All",
                    "Update"
                ],
                "User": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Warninglist": [
                    "Get",
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/misp.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Mocean": {
            "description": "Use the Mocean node to automate work in Mocean, and integrate Mocean with other applications.",
            "operations": {
                "SMS": [
                    "Send SMS/Voice message"
                ],
                "Voice": [
                    "Send SMS/Voice message"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mocean.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "monday.com": {
            "description": "Use the monday.com node to automate work in monday.com, and integrate monday.com with other applications.",
            "operations": {
                "Board": [
                    "Archive a board",
                    "Create a new board",
                    "Get a board",
                    "Get all boards"
                ],
                "Board Column": [
                    "Create a new column",
                    "Get all columns"
                ],
                "Board Group": [
                    "Delete a group in a board",
                    "Create a group in a board",
                    "Get list of groups in a board"
                ],
                "Board Item": [
                    "Add an update to an item.",
                    "Change a column value for a board item",
                    "Change multiple column values for a board item",
                    "Create an item in a board's group",
                    "Delete an item",
                    "Get an item",
                    "Get all items",
                    "Get items by column value",
                    "Move item to group"
                ]
            },
            "credentials": "/integrations/builtin/credentials/mondaycom.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "MongoDB": {
            "description": "Use the MongoDB node to automate work in MongoDB, and integrate MongoDB with other applications.",
            "operations": [
                "Aggregate documents",
                "Delete documents",
                "Find documents",
                "Find and replace documents",
                "Find and update documents",
                "Insert documents",
                    "Update documents"
            ],
            "credentials": "/integrations/builtin/credentials/mongodb.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "MonicaCRM": {
            "description": "Use the Monica CRM node to automate work in Monica CRM, and integrate Monica CRM with other applications.",
            "operations": {
                "Activity": [
                    "Create an activity",
                    "Delete an activity",
                    "Retrieve an activity",
                    "Retrieve all activities",
                    "Update an activity"
                ],
                "Call": [
                    "Create a call",
                    "Delete a call",
                    "Retrieve a call",
                    "Retrieve all calls",
                    "Update a call"
                ],
                "Contact": [
                    "Create a contact",
                    "Delete a contact",
                    "Retrieve a contact",
                    "Retrieve all contacts",
                    "Update a contact"
                ],
                "Contact Field": [
                    "Create a contact field",
                    "Delete a contact field",
                    "Retrieve a contact field",
                    "Update a contact field"
                ],
                "Contact Tag": [
                    "Add",
                    "Remove"
                ],
                "Conversation": [
                    "Create a conversation",
                    "Delete a conversation",
                    "Retrieve a conversation",
                    "Update a conversation"
                ],
                "Conversation Message": [
                    "Add a message to a conversation",
                    "Update a message in a conversation"
                ],
                "Journal Entry": [
                    "Create a journal entry",
                    "Delete a journal entry",
                    "Retrieve a journal entry",
                    "Retrieve all journal entries",
                    "Update a journal entry"
                ],
                "Note": [
                    "Create a note",
                    "Delete a note",
                    "Retrieve a note",
                    "Retrieve all notes",
                    "Update a note"
                ],
                "Reminder": [
                    "Create a reminder",
                    "Delete a reminder",
                    "Retrieve a reminder",
                    "Retrieve all reminders",
                    "Update a reminder"
                ],
                "Tag": [
                    "Create a tag",
                    "Delete a tag",
                    "Retrieve a tag",
                    "Retrieve all tags",
                    "Update a tag"
                ],
                "Task": [
                    "Create a task",
                    "Delete a task",
                    "Retrieve a task",
                    "Retrieve all tasks",
                    "Update a task"
                ]
            },
            "credentials": "/integrations/builtin/credentials/monicacrm.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "MQTT": {
            "description": "Use the MQTT node to automate work in MQTT, and integrate MQTT with other applications.",
            "operations": [
                "Send a message"
            ],
            "credentials": "/integrations/builtin/credentials/mqtt.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "MSG91": {
            "description": "Use the MSG91 node to automate work in MSG91, and integrate MSG91 with other applications.",
            "operations": {
                "SMS": [
                    "Send SMS"
                ]
            },
            "credentials": "/integrations/builtin/credentials/msg91.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "CustomerDatastoren8nTraining": {
            "description": "Use this node only for the n8n new user onboarding tutorial. It provides dummy data for testing purposes and has no further functionality.",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "CustomerMessengern8nTraining": {
            "description": "Use this node only for the n8n new user onboarding tutorial. It provides no further functionality.",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "NASA": {
            "description": "Use the NASA node to automate work in NASA, and integrate NASA with other applications.",
            "operations": {
                "Astronomy Picture of the Day": [
                    "Get the Astronomy Picture of the Day"
                ],
                "Asteroid Neo-Feed": [
                    "Retrieve a list of asteroids based on their closest approach date to Earth"
                ],
                "Asteroid Neo-Lookup": [
                    "Look up an asteroid based on its NASA SPK-ID"
                ],
                "Asteroid Neo-Browse": [
                    "Browse the overall asteroid dataset"
                ],
                "DONKI Coronal Mass Ejection": [
                    "Retrieve DONKI coronal mass ejection data"
                ],
                "DONKI Interplanetary Shock": [
                    "Retrieve DONKI interplanetary shock data"
                ],
                "DONKI Solar Flare": [
                    "Retrieve DONKI solar flare data"
                ],
                "DONKI Solar Energetic Particle": [
                    "Retrieve DONKI solar energetic particle data"
                ],
                "DONKI Magnetopause Crossing": [
                    "Retrieve data on DONKI magnetopause crossings"
                ],
                "DONKI Radiation Belt Enhancement": [
                    "Retrieve DONKI radiation belt enhancement data"
                ],
                "DONKI High Speed Stream": [
                    "Retrieve DONKI high speed stream data"
                ],
                "DONKI WSA+EnlilSimulation": [
                    "Retrieve DONKI WSA+EnlilSimulation data"
                ],
                "DONKI Notifications": [
                    "Retrieve DONKI notifications data"
                ],
                "Earth Imagery": [
                    "Retrieve Earth imagery"
                ],
                "Earth Assets": [
                    "Retrieve Earth assets"
                ]
            },
            "credentials": "/integrations/builtin/credentials/nasa.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Netlify": {
            "description": "Use the Netlify node to automate work in Netlify, and integrate Netlify with other applications.",
            "operations": {
                "Deploy": [
                    "Cancel a deployment",
                    "Create a new deployment",
                    "Get a deployment",
                    "Get all deployments"
                ],
                "Site": [
                    "Delete a site",
                    "Get a site",
                    "Returns all sites"
                ]
            },
            "credentials": "/integrations/builtin/credentials/netlify.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "NetscalerADC": {
            "description": "Use the Netscaler ADC node to automate work in Netscaler ADC, and integrate Netscaler ADC with other applications.",
            "operations": {
                "Certificate": [
                    "Create",
                    "Install"
                ],
                "File": [
                    "Delete",
                    "Download",
                    "Upload"
                ]
            },
            "credentials": "/integrations/builtin/credentials/netscaleradc.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Nextcloud": {
            "description": "Use the Nextcloud node to automate work in Nextcloud, and integrate Nextcloud with other applications.",
            "operations": {
                "File": [
                    "Copy a file",
                    "Delete a file",
                    "Download a file",
                    "Move a file",
                    "Share a file",
                    "Upload a file"
                ],
                "Folder": [
                    "Copy a folder",
                    "Create a folder",
                    "Delete a folder",
                    "Return the contents of a given folder",
                    "Move a folder",
                    "Share a folder"
                ],
                "User": [
                    "Invite a user to a Nextcloud organization",
                    "Delete a user.",
                    "Retrieve information about a single user.",
                    "Retrieve a list of users.",
                    "Edit attributes related to a user."
                ]
            },
            "credentials": "/integrations/builtin/credentials/nextcloud.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "NocoDB": {
            "description": "Use the NocoDB node to automate work in NocoDB, and integrate NocoDB with other applications.",
            "operations": {
                "Row": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update a row"
                ]
            },
            "credentials": "/integrations/builtin/credentials/nocodb.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "npm": {
            "description": "Use the npm node to automate work in npm, and integrate npm with other applications.",
            "operations": {
                "Package": [
                    "Get Package Metadata",
                    "Get Package Versions",
                    "Search for Packages"
                ],
                "Distribution Tag": [
                    "Get All Tags",
                    "Update a Tag"
                ]
            },
            "credentials": "/integrations/builtin/credentials/npm.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Odoo": {
            "description": "Use the Odoo node to automate work in Odoo, and integrate Odoo with other applications.",
            "operations": {
                "Contact": [
                    "Create a new contact",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update a contact"
                ],
                "Custom Resource": [
                    "Create a new item",
                    "Delete an item",
                    "Get an item",
                    "Get all items",
                    "Update an item"
                ],
                "Note": [
                    "Create a new note",
                    "Delete a note",
                    "Get a note",
                    "Get all notes",
                    "Update a note"
                ],
                "Opportunity": [
                    "Create a new opportunity",
                    "Delete an opportunity",
                    "Get an opportunity",
                    "Get all opportunities",
                    "Update an opportunity"
                ]
            },
            "credentials": "/integrations/builtin/credentials/odoo.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Okta": {
            "description": "Use the Okta node to automate work in Okta and integrate Okta with other applications.",
            "operations": {
                "User": [
                    "Create a new user",
                    "Delete an existing user",
                    "Get details of a user",
                    "Get many users",
                    "Update an existing user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/okta.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "OneSimpleAPI": {
            "description": "Use the One Simple API node to automate work in One Simple API, and integrate One Simple API with other applications.",
            "operations": {
                "Information": [
                    "Convert a value between currencies",
                    "Retrieve image metadata from a URL"
                ],
                "Social Profile": [
                    "Get details about an Instagram profile",
                    "Get details about a Spotify Artist"
                ],
                "Utility": [
                    "Expand a shortened url",
                    "Generate a QR Code",
                    "Validate an email address"
                ],
                "Website": [
                    "Generate a PDF from a webpage",
                    "Get SEO information from website",
                    "Create a screenshot from a webpage"
                ]
            },
            "credentials": "/integrations/builtin/credentials/onesimpleapi.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Onfleet": {
            "description": "Use the Onfleet node to automate work in Onfleet, and integrate Onfleet with other applications.",
            "operations": {
                "Admin": [
                    "Create a new Onfleet admin",
                    "Delete an Onfleet admin",
                    "Get all Onfleet admins",
                    "Update an Onfleet admin"
                ],
                "Container": [
                    "Add task at index (or append)",
                    "Get container information",
                    "Fully replace a container's tasks"
                ],
                "Destination": [
                    "Create a new destination",
                    "Get a specific destination"
                ],
                "Hub": [
                    "Create a new Onfleet hub",
                    "Get all Onfleet hubs",
                    "Update an Onfleet hub"
                ],
                "Organization": [
                    "Retrieve your own organization's details",
                    "Retrieve the details of an organization with which you are connected"
                ],
                "Recipient": [
                    "Create a new Onfleet recipient",
                    "Get a specific Onfleet recipient",
                    "Update an Onfleet recipient"
                ],
                "Task": [
                    "Create a new Onfleet task",
                    "Clone an Onfleet task",
                    "Force-complete a started Onfleet task",
                    "Delete an Onfleet task",
                    "Get all Onfleet tasks",
                    "Get a specific Onfleet task",
                    "Update an Onfleet task"
                ],
                "Team": [
                    "Automatically dispatch tasks assigned to a team to on-duty drivers",
                    "Create a new Onfleet team",
                    "Delete an Onfleet team",
                    "Get a specific Onfleet team",
                    "Get all Onfleet teams",
                    "Get estimated times for upcoming tasks for a team, returns a selected driver",
                    "Update an Onfleet team"
                ],
                "Worker": [
                    "Create a new Onfleet worker",
                    "Delete an Onfleet worker",
                    "Get a specific Onfleet worker",
                    "Get all Onfleet workers",
                    "Get a specific Onfleet worker schedule",
                    "Update an Onfleet worker"
                ]
            },
            "credentials": "/integrations/builtin/credentials/onfleet.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "OpenThesaurus": {
            "description": "Use the OpenThesaurus node to automate work in OpenThesaurus, and integrate OpenThesaurus with other applications.",
            "operations": [
                "Get synonyms for a German word in German"
            ],
            "credentials": "OpenThesaurus node doesn't require authentication.",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "OpenWeatherMap": {
            "description": "Use the OpenWeatherMap node to automate work in OpenWeatherMap, and integrate OpenWeatherMap with other applications.",
            "operations": [
                "Returns the current weather data",
                "Returns the weather data for the next 5 days"
            ],
            "credentials": "/integrations/builtin/credentials/openweathermap.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Oura": {
            "description": "Use the Oura node to automate work in Oura, and integrate Oura with other applications.",
            "operations": {
                "Profile": [
                    "Get the user's personal information."
                ],
                "Summary": [
                    "Get the user's activity summary.",
                    "Get the user's readiness summary.",
                    "Get the user's sleep summary"
                ]
            },
            "credentials": "/integrations/builtin/credentials/oura.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Paddle": {
            "description": "Use the Paddle node to automate work in Paddle, and integrate Paddle with other applications.",
            "operations": {
                "Coupon": [
                    "Create a coupon.",
                    "Get all coupons.",
                    "Update a coupon."
                ],
                "Payment": [
                    "Get all payment.",
                    "Reschedule payment."
                ],
                "Plan": [
                    "Get a plan.",
                    "Get all plans."
                ],
                "Product": [
                    "Get all products."
                ],
                "User": [
                    "Get all users"
                ]
            },
            "credentials": "/integrations/builtin/credentials/paddle.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "PagerDuty": {
            "description": "Use the PagerDuty node to automate work in PagerDuty, and integrate PagerDuty with other applications.",
            "operations": {
                "Incident": [
                    "Create an incident",
                    "Get an incident",
                    "Get all incidents",
                    "Update an incident"
                ],
                "Incident Note": [
                    "Create an incident note",
                    "Get all incident's notes"
                ],
                "Log Entry": [
                    "Get a log entry",
                    "Get all log entries"
                ],
                "User": [
                    "Get a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/pagerduty.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "PayPal": {
            "description": "Use the PayPal node to automate work in PayPal, and integrate PayPal with other applications.",
            "operations": {
                "Payout": [
                    "Create a batch payout",
                    "Show batch payout details"
                ],
                "Payout Item": [
                    "Cancels an unclaimed payout item",
                    "Show payout item details"
                ]
            },
            "credentials": "/integrations/builtin/credentials/paypal.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Peekalink": {
            "description": "Use the Peekalink node to automate work in Peekalink, and integrate Peekalink with other applications.",
            "operations": [
                "Check whether preview for a given link is available",
                "Return the preview for a link"
            ],
            "credentials": "/integrations/builtin/credentials/peekalink.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "PhantomBuster": {
            "description": "Use the PhantomBuster node to automate work in PhantomBuster, and integrate PhantomBuster with other applications.",
            "operations": {
                "Agent": [
                    "Delete an agent by ID.",
                    "Get an agent by ID.",
                    "Get all agents of the current user's organization.",
                    "Get the output of the most recent container of an agent.",
                    "Add an agent to the launch queue."
                ]
            },
            "credentials": "/integrations/builtin/credentials/phantombuster.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "PhilipsHue": {
            "description": "Use the Philips Hue node to automate work in Philips Hue, and integrate Philips Hue with other applications.",
            "operations": {
                "Light": [
                    "Delete a light",
                    "Retrieve a light",
                    "Retrieve all lights",
                    "Update a light"
                ]
            },
            "credentials": "/integrations/builtin/credentials/philipshue.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Pipedrive": {
            "description": "Use the Pipedrive node to automate work in Pipedrive, and integrate Pipedrive with other applications.",
            "operations": {
                "Activity": [
                    "Create an activity",
                    "Delete an activity",
                    "Get data of an activity",
                    "Get data of all activities",
                    "Update an activity"
                ],
                "Deal": [
                    "Create a deal",
                    "Delete a deal",
                    "Duplicate a deal",
                    "Get data of a deal",
                    "Get data of all deals",
                    "Search a deal",
                    "Update a deal"
                ],
                "Deal Activity": [
                    "Get all activities of a deal"
                ],
                "Deal Product": [
                    "Add a product to a deal",
                    "Get all products in a deal",
                    "Remove a product from a deal",
                    "Update a product in a deal"
                ],
                "File": [
                    "Create a file",
                    "Delete a file",
                    "Download a file",
                    "Get data of a file"
                ],
                "Lead": [
                    "Create a lead",
                    "Delete a lead",
                    "Get data of a lead",
                    "Get data of all leads",
                    "Update a lead"
                ],
                "Note": [
                    "Create a note",
                    "Delete a note",
                    "Get data of a note",
                    "Get data of all notes",
                    "Update a note"
                ],
                "Organization": [
                    "Create an organization",
                    "Delete an organization",
                    "Get data of an organization",
                    "Get data of all organizations",
                    "Update an organization",
                    "Search organizations"
                ],
                "Person": [
                    "Create a person",
                    "Delete a person",
                    "Get data of a person",
                    "Get data of all persons",
                    "Search all persons",
                    "Update a person"
                ],
                "Product": [
                    "Get data of all products"
                ]
            },
            "credentials": "/integrations/builtin/credentials/pipedrive.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Plivo": {
            "description": "Use the Plivo node to automate work in Plivo, and integrate Plivo with other applications.",
            "operations": {
                "Call": [
                    "Make a voice call"
                ],
                "MMS": [
                    "Send an MMS message (US/Canada only)"
                ],
                "SMS": [
                    "Send an SMS message."
                ]
            },
            "credentials": "/integrations/builtin/credentials/plivo.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "PostBin": {
            "description": "PostBin is a service that helps you test API clients and webhooks. Use the PostBin node to automate work in PostBin, and integrate PostBin with other applications.",
            "operations": {
                "Bin": [
                    "Create",
                    "Get",
                    "Delete"
                ],
                "Request": [
                    "Get",
                    "Remove First",
                    "Send"
                ]
            },
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "PostHog": {
            "description": "Use the PostHog node to automate work in PostHog, and integrate PostHog with other applications.",
            "operations": {
                "Alias": [
                    "Create an alias"
                ],
                "Event": [
                    "Create an event"
                ],
                "Identity": [
                    "Create"
                ],
                "Track": [
                    "Track a page",
                    "Track a screen"
                ]
            },
            "credentials": "/integrations/builtin/credentials/posthog.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "ProfitWell": {
            "description": "Use the ProfitWell node to automate work in ProfitWell, and integrate ProfitWell with other applications.",
            "operations": {
                "Company": [
                    "Get your company's ProfitWell account settings"
                ],
                "Metric": [
                    "Retrieve financial metric broken down by day for either the current month or the last"
                ]
            },
            "credentials": "/integrations/builtin/credentials/profitwell.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Pushbullet": {
            "description": "Use the Pushbullet node to automate work in Pushbullet, and integrate Pushbullet with other applications.",
            "operations": {
                "Push": [
                    "Create a push",
                    "Delete a push",
                    "Get all pushes",
                    "Update a push"
                ]
            },
            "credentials": "/integrations/builtin/credentials/pushbullet.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Pushcut": {
            "description": "Use the Pushcut node to automate work in Pushcut, and integrate Pushcut with other applications.",
            "operations": {
                "Notification": [
                    "Send a notification"
                ]
            },
            "credentials": "/integrations/builtin/credentials/pushcut.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Pushover": {
            "description": "Use the Pushover node to automate work in Pushover, and integrate Pushover with other applications.",
            "operations": {
                "Message": [
                    "Push"
                ]
            },
            "credentials": "/integrations/builtin/credentials/pushover.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "QuestDB": {
            "description": "Use the QuestDB node to automate work in QuestDB, and integrate QuestDB with other applications.",
            "operations": [
                "Executes a SQL query.",
                "Insert rows in database."
            ],
            "credentials": "/integrations/builtin/credentials/questdb.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "QuickBase": {
            "description": "Use the Quick Base node to automate work in Quick Base, and integrate Quick Base with other applications.",
            "operations": {
                "Field": [
                    "Get all fields"
                ],
                "File": [
                    "Delete a file",
                    "Download a file"
                ],
                "Record": [
                    "Create a record",
                    "Delete a record",
                    "Get all records",
                    "Update a record",
                    "Upsert a record"
                ],
                "Report": [
                    "Get a report",
                    "Run a report"
                ]
            },
            "credentials": "/integrations/builtin/credentials/quickbase.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "QuickBooksOnline": {
            "description": "Use the QuickBooks node to automate work in QuickBooks, and integrate QuickBooks with other applications.",
            "operations": {
                "Bill": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Customer": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Employee": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Estimate": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Send",
                    "Update"
                ],
                "Invoice": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Send",
                    "Update",
                    "Void"
                ],
                "Item": [
                    "Get",
                    "Get All"
                ],
                "Payment": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Send",
                    "Update",
                    "Void"
                ],
                "Purchase": [
                    "Get",
                    "Get All"
                ],
                "Transaction": [
                    "Get Report"
                ],
                "Vendor": [
                    "Create",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/quickbooks.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "QuickChart": {
            "description": "Use the QuickChart node to automate work in QuickChart, and integrate QuickChart with other applications.",
            "operations": {
                "Chart Type": [
                    "Bar Chart",
                    "Doughnut Chart",
                    "Line Chart",
                    "Pie Chart",
                    "Polar Chart"
                ]
            },
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "RabbitMQ": {
            "description": "Use the RabbitMQ node to automate work in RabbitMQ, and integrate RabbitMQ with other applications.",
            "operations": {
                "Delete From Queue": [],
                "Send a Message to RabbitMQ": []
            },
            "credentials": "/integrations/builtin/credentials/rabbitmq.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Raindrop": {
            "description": "Use the Raindrop node to automate work in Raindrop, and integrate Raindrop with other applications.",
            "operations": {
                "Bookmark": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Collection": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Tag": [
                    "Delete",
                    "Get All"
                ],
                "User": [
                    "Get"
                ]
            },
            "credentials": "/integrations/builtin/credentials/raindrop.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Reddit": {
            "description": "Use the Reddit node to automate work in Reddit, and integrate Reddit with other applications.",
            "operations": {
                "Post": [
                    "Submit a post to a subreddit",
                    "Delete a post from a subreddit",
                    "Get a post from a subreddit",
                    "Get all posts from a subreddit",
                    "Search posts in a subreddit or in all of Reddit."
                ],
                "Post Comment": [
                    "Create a top-level comment in a post",
                    "Retrieve all comments in a post",
                    "Remove a comment from a post",
                    "Write a reply to a comment in a post"
                ],
                "Profile": [
                    "Get"
                ],
                "Subreddit": [
                    "Retrieve background information about a subreddit.",
                    "Retrieve information about subreddits from all of Reddit."
                ],
                "User": [
                    "Get"
                ]
            },
            "credentials": "/integrations/builtin/credentials/reddit.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Redis": {
            "description": "Use the Redis node to automate work in Redis, and integrate Redis with other applications.",
            "operations": [
                "Delete a key from Redis.",
                "Get the value of a key from Redis.",
                "Returns generic information about the Redis instance.",
                "Atomically increments a key by 1. Creates the key if it doesn't exist.",
                "Returns all the keys matching a pattern.",
                "Set the value of a key in Redis.",
                "Publish message to Redis channel."
            ],
            "credentials": "/integrations/builtin/credentials/redis.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Rocket.Chat": {
            "description": "Use the Rocket.Chat node to automate work in Rocket.Chat, and integrate Rocket.Chat with other applications.",
            "operations": {
                "Chat": [
                    "Post a message to a channel or a direct message"
                ]
            },
            "credentials": "/integrations/builtin/credentials/rocketchat.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Rundeck": {
            "description": "Use the Rundeck node to automate work in Rundeck, and integrate Rundeck with other applications.",
            "operations": {
                "Job": [
                    "Execute a job",
                    "Get metadata of a job"
                ]
            },
            "credentials": "/integrations/builtin/credentials/rundeck.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "S3": {
            "description": "Use the S3 node to automate work in non-AWS S3 storage and integrate S3 with other applications.",
            "operations": {
                "Bucket": [
                    "Create a bucket",
                    "Delete a bucket",
                    "Get all buckets",
                    "Search within a bucket"
                ],
                "File": [
                    "Copy a file",
                    "Delete a file",
                    "Download a file",
                    "Get all files",
                    "Upload a file"
                ],
                "Folder": [
                    "Create a folder",
                    "Delete a folder",
                    "Get all folders"
                ]
            },
            "credentials": "/integrations/builtin/credentials/s3.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Salesforce": {
            "description": "Use the Salesforce node to automate work in Salesforce, and integrate Salesforce with other applications.",
            "operations": {
                "Account": [
                    "Add note to an account",
                    "Create an account",
                    "Create a new account, or update the current one if it already exists (upsert)",
                    "Get an account",
                    "Get all accounts",
                    "Returns an overview of account's metadata.",
                    "Delete an account",
                    "Update an account"
                ],
                "Attachment": [
                    "Create a attachment",
                    "Delete a attachment",
                    "Get a attachment",
                    "Get all attachments",
                    "Returns an overview of attachment's metadata.",
                    "Update a attachment"
                ],
                "Case": [
                    "Add a comment to a case",
                    "Create a case",
                    "Get a case",
                    "Get all cases",
                    "Returns an overview of case's metadata",
                    "Delete a case",
                    "Update a case"
                ],
                "Contact": [
                    "Add lead to a campaign",
                    "Add note to a contact",
                    "Create a contact",
                    "Create a new contact, or update the current one if it already exists (upsert)",
                    "Delete a contact",
                    "Get a contact",
                    "Returns an overview of contact's metadata",
                    "Get all contacts",
                    "Update a contact"
                ],
                "Custom Object": [
                    "Create a custom object record",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Get a custom object record",
                    "Get all custom object records",
                    "Delete a custom object record",
                    "Update a custom object record"
                ],
                "Document": [
                    "Upload a document"
                ],
                "Flow": [
                    "Get all flows",
                    "Invoke a flow"
                ],
                "Lead": [
                    "Add lead to a campaign",
                    "Add note to a lead",
                    "Create a lead",
                    "Create a new lead, or update the current one if it already exists (upsert)",
                    "Delete a lead",
                    "Get a lead",
                    "Get all leads",
                    "Returns an overview of Lead's metadata",
                    "Update a lead"
                ],
                "Opportunity": [
                    "Add note to an opportunity",
                    "Create an opportunity",
                    "Create a new opportunity, or update the current one if it already exists (upsert)",
                    "Delete an opportunity",
                    "Get an opportunity",
                    "Get all opportunities",
                    "Returns an overview of opportunity's metadata",
                    "Update an opportunity"
                ],
                "Search": [
                    "Execute a SOQL query that returns all the results in a single response"
                ],
                "Task": [
                    "Create a task",
                    "Delete a task",
                    "Get a task",
                    "Get all tasks",
                    "Returns an overview of task's metadata",
                    "Update a task"
                ],
                "User": [
                    "Get a user",
                    "Get all users"
                ]
            },
            "credentials": "/integrations/builtin/credentials/salesforce.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Salesmate": {
            "description": "Use the Salesmate node to automate work in Salesmate, and integrate Salesmate with other applications.",
            "operations": {
                "Activity": [
                    "Create an activity",
                    "Delete an activity",
                    "Get an activity",
                    "Get all companies",
                    "Update an activity"
                ],
                "Company": [
                    "Create a company",
                    "Delete a company",
                    "Get a company",
                    "Get all companies",
                    "Update a company"
                ],
                "Deal": [
                    "Create a deal",
                    "Delete a deal",
                    "Get a deal",
                    "Get all deals",
                    "Update a deal"
                ]
            },
            "credentials": "/integrations/builtin/credentials/salesmate.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "SeaTable": {
            "description": "Use the SeaTable node to automate work in SeaTable, and integrate SeaTable with other applications.",
            "operations": {
                "Row": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update a row"
                ]
            },
            "credentials": "/integrations/builtin/credentials/seatable.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "SecurityScorecard": {
            "description": "Use the SecurityScorecard node to automate work in SecurityScorecard, and integrate SecurityScorecard with other applications.",
            "operations": {
                "Company": [
                    "Get company factor scores and issue counts",
                    "Get company's historical factor scores",
                    "Get company's historical scores",
                    "Get company information and summary of their scorecard",
                    "Get company's score improvement plan"
                ],
                "Industry": [
                    "Get Factor Scores",
                    "Get Historical Factor Scores",
                    "Get Score"
                ],
                "Invite": [
                    "Create an invite for a company/user"
                ],
                "Portfolio": [
                    "Create a portfolio",
                    "Delete a portfolio",
                    "Get all portfolios",
                    "Update a portfolio"
                ],
                "Portfolio Company": [
                    "Add a company to portfolio",
                    "Get all companies in a portfolio",
                    "Remove a company from portfolio"
                ],
                "Report": [
                    "Download a generated report",
                    "Generate a report",
                    "Get list of recently generated report"
                ]
            },
            "credentials": "/integrations/builtin/credentials/securityscorecard.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Segment": {
            "description": "Use the Segment node to automate work in Segment, and integrate Segment with other applications.",
            "operations": {
                "Group": [
                    "Add a user to a group"
                ],
                "Identify": [
                    "Create an identity"
                ],
                "Track": [
                    "Record the actions your users perform. Every action triggers an event, which can also have associated properties.",
                    "Record page views on your website, along with optional extra information about the page being viewed."
                ]
            },
            "credentials": "/integrations/builtin/credentials/segment.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "SendGrid": {
            "description": "Use the SendGrid node to automate work in SendGrid, and integrate SendGrid with other applications.",
            "operations": {
                "Contact": [
                    "Create/update a contact",
                    "Delete a contact",
                    "Get a contact by ID",
                    "Get all contacts"
                ],
                "List": [
                    "Create a list",
                    "Delete a list",
                    "Get a list",
                    "Get all lists",
                    "Update a list"
                ],
                "Mail": [
                    "Send an email."
                ]
            },
            "credentials": "/integrations/builtin/credentials/sendgrid.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Sendy": {
            "description": "Use the Sendy node to automate work in Sendy, and integrate Sendy with other applications.",
            "operations": {
                "Campaign": [
                    "Create a campaign"
                ],
                "Subscriber": [
                    "Add a subscriber to a list",
                    "Count subscribers",
                    "Delete a subscriber from a list",
                    "Unsubscribe user from a list",
                    "Get the status of subscriber"
                ]
            },
            "credentials": "/integrations/builtin/credentials/sendy.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Sentry.io": {
            "description": "Use the Sentry.io node to automate work in Sentry.io, and integrate Sentry.io with other applications.",
            "operations": {
                "Event": [
                    "Get event by ID",
                    "Get all events"
                ],
                "Issue": [
                    "Delete an issue",
                    "Get issue by ID",
                    "Get all issues",
                    "Update an issue"
                ],
                "Organization": [
                    "Create an organization",
                    "Get organization by slug",
                    "Get all organizations",
                    "Update an organization"
                ],
                "Project": [
                    "Create a new project",
                    "Delete a project",
                    "Get project by ID",
                    "Get all projects",
                    "Update a project"
                ],
                "Release": [
                    "Create a release",
                    "Delete a release",
                    "Get release by version identifier",
                    "Get all releases",
                    "Update a release"
                ],
                "Team": [
                    "Create a new team",
                    "Delete a team",
                    "Get team by slug",
                    "Get all teams",
                    "Update a team"
                ]
            },
            "credentials": "/integrations/builtin/credentials/sentryio.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "ServiceNow": {
            "description": "Use the ServiceNow node to automate work in ServiceNow, and integrate ServiceNow with other applications.",
            "operations": {
                "Business Service": [
                    "Get All"
                ],
                "Configuration Items": [
                    "Get All"
                ],
                "Department": [
                    "Get All"
                ],
                "Dictionary": [
                    "Get All"
                ],
                "Incident": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "Table Record": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "User": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ],
                "User Group": [
                    "Get All"
                ],
                "User Role": [
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/servicenow.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Shopify": {
            "description": "Use the Shopify node to automate work in Shopify, and integrate Shopify with other applications.",
            "operations": {
                "Order": [
                    "Create a order",
                    "Delete a order",
                    "Get a order",
                    "Get all orders",
                    "Update an order"
                ],
                "Product": [
                    "Create a product",
                    "Delete a product",
                    "Get a product",
                    "Get all products",
                    "Update a product"
                ]
            },
            "credentials": "/integrations/builtin/credentials/shopify.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "SIGNL4": {
            "description": "Use the SIGNL4 node to automate work in SIGNL4, and integrate SIGNL4 with other applications.",
            "operations": {
                "Alert": [
                    "Send an alert",
                    "Resolve an alert"
                ]
            },
            "credentials": "/integrations/builtin/credentials/signl4.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Slack": {
            "description": "Use the Slack node to automate work in Slack, and integrate Slack with other applications.",
            "operations": {
                "Channel": [
                    "Archive a channel.",
                    "Close a direct message or multi-person direct message.",
                    "Create a public or private channel-based conversation.",
                    "Get information about a channel.",
                    "Get Many: Get a list of channels in Slack.",
                    "History: Get a channel's history of messages and events.",
                    "Invite a user to a channel.",
                    "Join an existing channel.",
                    "Kick: Remove a user from a channel.",
                    "Leave a channel.",
                    "Member: List the members of a channel.",
                    "Open or resume a direct message or multi-person direct message.",
                    "Rename a channel.",
                    "Replies: Get a thread of messages posted to a channel.",
                    "Sets purpose of a channel.",
                    "Sets topic of a channel.",
                    "Unarchive a channel."
                ],
                "File": [
                    "Get a file.",
                    "Get Many: Get and filter team files.",
                    "Upload: Create or upload an existing file."
                ],
                "Message": [
                    "Delete a message",
                    "Get permalink: Get a message's permalink.",
                    "Search for messages",
                    "Send a message",
                    "Send and Wait for Approval: Send a message and wait for approval from the recipient before continuing.",
                    "Update a message"
                ],
                "Reaction": [
                    "Add a reaction to a message.",
                    "Get a message's reactions.",
                    "Remove a reaction from a message."
                ],
                "Star": [
                    "Add a star to an item.",
                    "Delete a star from an item.",
                    "Get Many: Get a list of an authenticated user's stars."
                ],
                "User": [
                    "Get information about a user.",
                    "Get Many: Get a list of users.",
                    "Get User's Profile.",
                    "Get User's Status.",
                    "Update User's Profile."
                ],
                "User Group": [
                    "Create a user group.",
                    "Disable a user group.",
                    "Enable a user group.",
                    "Get Many: Get a list of user groups.",
                    "Update a user group."
                ]
            },
            "credentials": "/integrations/builtin/credentials/slack.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "sms77": {
            "description": "Use the seven node to automate work in seven, and integrate seven with other applications.",
            "operations": {
                "SMS": [
                    "Send SMS"
                ],
                "Voice Call": [
                    "Converts text to voice and calls a given number"
                ]
            },
            "credentials": "/integrations/builtin/credentials/sms77.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Snowflake": {
            "description": "Use the Snowflake node to automate work in Snowflake, and integrate Snowflake with other applications.",
            "operations": [
                "Execute an SQL query.",
                "Insert rows in database.",
                "Update rows in database."
            ],
            "credentials": "/integrations/builtin/credentials/snowflake.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Splunk": {
            "description": "Use the Splunk node to automate work in Splunk, and integrate Splunk with other applications.",
            "operations": {
                "Fired Alert": [
                    "Get a fired alerts report"
                ],
                "Search Configuration": [
                    "Delete a search configuration",
                    "Get a search configuration",
                    "Get many search configurations"
                ],
                "Search Job": [
                    "Create a search job",
                    "Delete a search job",
                    "Get a search job",
                    "Get many search jobs"
                ],
                "Search Result": [
                    "Get many search results"
                ],
                "User": [
                    "Create a user",
                    "Delete a user",
                    "Get a user",
                    "Get many users",
                    "Update a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/splunk.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Spontit": {
            "description": "Use the Spontit node to automate work in Spontit, and integrate Spontit with other applications.",
            "operations": {
                "Push": [
                    "Create a push notification"
                ]
            },
            "credentials": "/integrations/builtin/credentials/spontit.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Spotify": {
            "description": "Use the Spotify node to automate work in Spotify, and integrate Spotify with other applications.",
            "operations": {
                "Album": [
                    "Get an album by URI or ID.",
                    "Get a list of new album releases.",
                    "Get an album's tracks by URI or ID.",
                    "Search albums by keyword."
                ],
                "Artist": [
                    "Get an artist by URI or ID.",
                    "Get an artist's albums by URI or ID.",
                    "Get an artist's related artists by URI or ID.",
                    "Get an artist's top tracks by URI or ID.",
                    "Search artists by keyword."
                ],
                "Library": [
                    "Get the user's liked tracks."
                ],
                "My Data": [
                    "Get your followed artists."
                ],
                "Player": [
                    "Add a song to your queue.",
                    "Get your currently playing track.",
                    "Skip to your next track.",
                    "Pause your music.",
                    "Skip to your previous song.",
                    "Get your recently played tracks.",
                    "Resume playback on the current active device.",
                    "Set volume on the current active device.",
                    "Start playing a playlist, artist, or album."
                ],
                "Playlist": [
                    "Add tracks from a playlist by track and playlist URI or ID.",
                    "Create a new playlist.",
                    "Get a playlist by URI or ID.",
                    "Get a playlist's tracks by URI or ID.",
                    "Get a user's playlists.",
                    "Remove tracks from a playlist by track and playlist URI or ID.",
                    "Search playlists by keyword."
                ],
                "Track": [
                    "Get a track by its URI or ID.",
                    "Get audio features for a track by URI or ID.",
                    "Search tracks by keyword"
                ]
            },
            "credentials": "/integrations/builtin/credentials/spotify.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Stackby": {
            "description": "Use the Stackby node to automate work in Stackby, and integrate Stackby with other applications.",
            "operations": [
                "Append",
                "Delete",
                "List",
                "Read"
            ],
            "credentials": "/integrations/builtin/credentials/stackby.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Storyblok": {
            "description": "Use the Storyblok node to automate work in Storyblok, and integrate Storyblok with other applications.",
            "operations": {
                "Content API": {
                    "Story": [
                        "Get a story",
                        "Get all stories"
                    ]
                },
                "Management API": {
                    "Story": [
                        "Delete a story",
                        "Get a story",
                        "Get all stories",
                        "Publish a story",
                        "Unpublish a story"
                    ]
                }
            },
            "credentials": "/integrations/builtin/credentials/storyblok.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Strapi": {
            "description": "Use the Strapi node to automate work in Strapi, and integrate Strapi with other applications.",
            "operations": {
                "Entry": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/strapi.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Strava": {
            "description": "Use the Strava node to automate work in Strava, and integrate Strava with other applications.",
            "operations": {
                "Activity": [
                    "Create a new activity",
                    "Get an activity",
                    "Get all activities",
                    "Get all activity comments",
                    "Get all activity kudos",
                    "Get all activity laps",
                    "Get all activity zones",
                    "Update an activity"
                ]
            },
            "credentials": "/integrations/builtin/credentials/strava.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Stripe": {
            "description": "Use the Stripe node to automate work in Stripe, and integrate Stripe with other applications.",
            "operations": {
                "Balance": [
                    "Get a balance"
                ],
                "Charge": [
                    "Create a charge",
                    "Get a charge",
                    "Get all charges",
                    "Update a charge"
                ],
                "Coupon": [
                    "Create a coupon",
                    "Get all coupons"
                ],
                "Customer": [
                    "Create a customer",
                    "Delete a customer",
                    "Get a customer",
                    "Get all customers",
                    "Update a customer"
                ],
                "Customer Card": [
                    "Add a customer card",
                    "Get a customer card",
                    "Remove a customer card"
                ],
                "Source": [
                    "Create a source",
                    "Delete a source",
                    "Get a source"
                ],
                "Token": [
                    "Create a token"
                ]
            },
            "credentials": "/integrations/builtin/credentials/stripe.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "SyncroMSP": {
            "description": "Use the SyncroMSP node to automate work in SyncroMSP, and integrate SyncroMSP with other applications.",
            "operations": {
                "Contact": [
                    "Create new contact",
                    "Delete contact",
                    "Retrieve contact",
                    "Retrieve all contacts",
                    "Update contact"
                ],
                "Customer": [
                    "Create new customer",
                    "Delete customer",
                    "Retrieve customer",
                    "Retrieve all customers",
                    "Update customer"
                ],
                "RMM": [
                    "Create new RMM Alert",
                    "Delete RMM Alert",
                    "Retrieve RMM Alert",
                    "Retrieve all RMM Alerts",
                    "Mute RMM Alert"
                ],
                "Ticket": [
                    "Create new ticket",
                    "Delete ticket",
                    "Retrieve ticket",
                    "Retrieve all tickets",
                    "Update ticket"
                ]
            },
            "credentials": "/integrations/builtin/credentials/syncromsp.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Taiga": {
            "description": "Use the Taiga node to automate work in Taiga, and integrate Taiga with other applications.",
            "operations": {
                "Issue": [
                    "Create an issue",
                    "Delete an issue",
                    "Get an issue",
                    "Get all issues",
                    "Update an issue"
                ]
            },
            "credentials": "/integrations/builtin/credentials/taiga.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Tapfiliate": {
            "description": "Use the Tapfiliate node to automate work in Tapfiliate, and integrate Tapfiliate with other applications.",
            "operations": {
                "Affiliate": [
                    "Create an affiliate",
                    "Delete an affiliate",
                    "Get an affiliate by ID",
                    "Get all affiliates"
                ],
                "Affiliate Metadata": [
                    "Add metadata to affiliate",
                    "Remove metadata from affiliate",
                    "Update affiliate's metadata"
                ],
                "Program Affiliate": [
                    "Add affiliate to program",
                    "Approve an affiliate for a program",
                    "Disapprove an affiliate",
                    "Get an affiliate in a program",
                    "Get all affiliates in program"
                ]
            },
            "credentials": "/integrations/builtin/credentials/tapfiliate.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "TheHive": {
            "description": "Use the TheHive node to automate work in TheHive, and integrate TheHive with other applications.",
            "operations": {
                "Alert": [],
                "Case": [],
                "Log": [],
                "Observable": [],
                "Task": []
            },
            "credentials": "/integrations/builtin/credentials/thehive.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "TheHive5": {
            "description": "Use the TheHive 5 node to automate work in TheHive, and integrate TheHive with other applications.",
            "operations": {
                "Alert": [
                    "Create",
                    "Delete",
                    "Execute Responder",
                    "Get",
                    "Merge Into Case",
                    "Promote to Case",
                    "Search",
                    "Update",
                    "Update Status"
                ],
                "Case": [
                    "Add Attachment",
                    "Create",
                    "Delete Attachment",
                    "Delete Case",
                    "Execute Responder",
                    "Get",
                    "Get Attachment",
                    "Get Timeline",
                    "Search",
                    "Update"
                ],
                "Comment": [
                    "Create",
                    "Delete",
                    "Search",
                    "Update"
                ],
                "Observable": [
                    "Create",
                    "Delete",
                    "Execute Analyzer",
                    "Execute Responder",
                    "Get",
                    "Search",
                    "Update"
                ],
                "Page": [
                    "Create",
                    "Delete",
                    "Search",
                    "Update"
                ],
                "Query": [
                    "Execute Query"
                ],
                "Task": [
                    "Create",
                    "Delete",
                    "Execute Responder",
                    "Get",
                    "Search",
                    "Update"
                ],
                "Task Log": [
                    "Add Attachment",
                    "Create",
                    "Delete",
                    "Delete Attachment",
                    "Execute Responder",
                    "Get",
                    "Search"
                ]
            },
            "credentials": "/integrations/builtin/credentials/thehive5.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "TimescaleDB": {
            "description": "Use the TimescaleDB node to automate work in TimescaleDB, and integrate TimescaleDB with other applications.",
            "operations": [
                "Execute an SQL query",
                "Insert rows in database",
                "Update rows in database"
            ],
            "credentials": "/integrations/builtin/credentials/timescaledb.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Todoist": {
            "description": "Use the Todoist node to automate work in Todoist, and integrate Todoist with other applications.",
            "operations": {
                "Task": [
                    "Create a new task",
                    "Close a task",
                    "Delete a task",
                    "Get a task",
                    "Get all tasks",
                    "Reopen a task",
                    "Update a task"
                ]
            },
            "credentials": "/integrations/builtin/credentials/todoist.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "TravisCI": {
            "description": "Use the Travis CI node to automate work in Travis CI, and integrate Travis CI with other applications.",
            "operations": {
                "Build": [
                    "Cancel a build",
                    "Get a build",
                    "Get all builds",
                    "Restart a build",
                    "Trigger a build"
                ]
            },
            "credentials": "/integrations/builtin/credentials/travisci.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Trello": {
            "description": "Use the Trello node to automate work in Trello, and integrate Trello with other applications.",
            "operations": {
                "Attachment": [
                    "Create a new attachment for a card",
                    "Delete an attachment",
                    "Get the data of an attachment",
                    "Returns all attachments for the card"
                ],
                "Board": [
                    "Create a new board",
                    "Delete a board",
                    "Get the data of a board",
                    "Update a board"
                ],
                "Board Member": [
                    "Add",
                    "Get All",
                    "Invite",
                    "Remove"
                ],
                "Card": [
                    "Create a new card",
                    "Delete a card",
                    "Get the data of a card",
                    "Update a card"
                ],
                "Card Comment": [
                    "Create a comment on a card",
                    "Delete a comment from a card",
                    "Update a comment on a card"
                ],
                "Checklist": [
                    "Create a checklist item",
                    "Create a new checklist",
                    "Delete a checklist",
                    "Delete a checklist item",
                    "Get the data of a checklist",
                    "Returns all checklists for the card",
                    "Get a specific checklist on a card",
                    "Get the completed checklist items on a card",
                    "Update an item in a checklist on a card"
                ],
                "Label": [
                    "Add a label to a card.",
                    "Create a new label",
                    "Delete a label",
                    "Get the data of a label",
                    "Returns all labels for the board",
                    "Remove a label from a card.",
                    "Update a label."
                ],
                "List": [
                    "Archive/Unarchive a list",
                    "Create a new list",
                    "Get the data of a list",
                    "Get all the lists",
                    "Get all the cards in a list",
                    "Update a list"
                ]
            },
            "credentials": "/integrations/builtin/credentials/trello.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Twake": {
            "description": "Use the Twake node to automate work in Twake, and integrate Twake with other applications.",
            "operations": {
                "Message": [
                    "Send a message"
                ]
            },
            "credentials": "/integrations/builtin/credentials/twake.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Twilio": {
            "description": "Use the Twilio node to automate work in Twilio, and integrate Twilio with other applications.",
            "operations": {
                "SMS": [
                    "Send SMS/MMS/WhatsApp message"
                ],
                "Call": [
                    "Make a phone call using text-to-speech to say a message"
                ]
            },
            "credentials": "/integrations/builtin/credentials/twilio.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Twist": {
            "description": "Use the Twist node to automate work in Twist, and integrate Twist with other applications.",
            "operations": {
                "Channel": [
                    "Archive a channel",
                    "Initiates a public or private channel-based conversation",
                    "Delete a channel",
                    "Get information about a channel",
                    "Get all channels",
                    "Unarchive a channel",
                    "Update a channel"
                ],
                "Comment": [
                    "Create a new comment to a thread",
                    "Delete a comment",
                    "Get information about a comment",
                    "Get all comments",
                    "Update a comment"
                ],
                "Message Conversation": [
                    "Create a message in a conversation",
                    "Delete a message in a conversation",
                    "Get a message in a conversation",
                    "Get all messages in a conversation",
                    "Update a message in a conversation"
                ],
                "Thread": [
                    "Create a new thread in a channel",
                    "Delete a thread",
                    "Get information about a thread",
                    "Get all threads",
                    "Update a thread"
                ]
            },
            "credentials": "/integrations/builtin/credentials/twist.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "XFormerlyTwitter": {
            "description": "Use the X node to automate work in X and integrate X with other applications.",
            "operations": {
                "Direct Message": [
                    "Create a direct message"
                ],
                "Tweet": [
                    "Create or reply a tweet",
                    "Delete a tweet",
                    "Search tweets",
                    "Like a tweet",
                    "Retweet a tweet"
                ]
            },
            "credentials": "/integrations/builtin/credentials/twitter.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "UnleashedSoftware": {
            "description": "Use the Unleashed Software node to automate work in Unleashed Software, and integrate Unleashed Software with other applications.",
            "operations": {
                "Sales Order": [
                    "Get all sales orders"
                ],
                "Stock On Hand": [
                    "Get a stock on hand",
                    "Get all stocks on hand"
                ]
            },
            "credentials": "/integrations/builtin/credentials/unleashedsoftware.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "UpLead": {
            "description": "Use the UpLead node to automate work in UpLead, and integrate UpLead with other applications.",
            "operations": {
                "Company": [
                    "Enrich"
                ],
                "Person": [
                    "Enrich"
                ]
            },
            "credentials": "/integrations/builtin/credentials/uplead.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "uProc": {
            "description": "Use the uProc node to automate work in uProc, and integrate uProc with other applications.",
            "operations": {
                "Audio": [],
                "Communication": [],
                "Company": [],
                "Finance": [],
                "Geographical": [],
                "Image": [],
                "Internet": [],
                "Personal": [],
                "Product": [],
                "Security": [],
                "Text": []
            },
            "credentials": "/integrations/builtin/credentials/uproc.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "UptimeRobot": {
            "description": "Use the UptimeRobot node to automate work in UptimeRobot, and integrate UptimeRobot with other applications.",
            "operations": {
                "Account": [
                    "Get account details"
                ],
                "Alert Contact": [
                    "Create an alert contact",
                    "Delete an alert contact",
                    "Get an alert contact",
                    "Get all alert contacts",
                    "Update an alert contact"
                ],
                "Maintenance Window": [
                    "Create a maintenance window",
                    "Delete a maintenance window",
                    "Get a maintenance window",
                    "Get all a maintenance windows",
                    "Update a maintenance window"
                ],
                "Monitor": [
                    "Create a monitor",
                    "Delete a monitor",
                    "Get a monitor",
                    "Get all monitors",
                    "Reset a monitor",
                    "Update a monitor"
                ],
                "Public Status Page": [
                    "Create a public status page",
                    "Delete a public status page",
                    "Get a public status page",
                    "Get all a public status pages"
                ]
            },
            "credentials": "/integrations/builtin/credentials/uptimerobot.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "urlscan.io": {
            "description": "Use the urlscan.io node to automate work in urlscan.io, and integrate urlscan.io with other applications.",
            "operations": {
                "Scan": [
                    "Get",
                    "Get All",
                    "Perform"
                ]
            },
            "credentials": "/integrations/builtin/credentials/urlscanio.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "VenafiTLSProtectCloud": {
            "description": "Use the Venafi TLS Protect Cloud node to automate work in Venafi TLS Protect Cloud, and integrate Venafi TLS Protect Cloud with other applications.",
            "operations": {
                "Certificate": [
                    "Delete",
                    "Download",
                    "Get",
                    "Get Many",
                    "Renew"
                ],
                "Certificate Request": [
                    "Create",
                    "Get",
                    "Get Many"
                ]
            },
            "credentials": "/integrations/builtin/credentials/venafitlsprotectcloud.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "VenafiTLSProtectDatacenter": {
            "description": "Use the Venafi TLS Protect Datacenter node to automate work in Venafi TLS Protect Datacenter, and integrate Venafi TLS Protect Datacenter with other applications.",
            "operations": {
                "Certificate": [
                    "Create",
                    "Delete",
                    "Download",
                    "Get",
                    "Get Many",
                    "Renew"
                ],
                "Policy": [
                    "Get"
                ]
            },
            "credentials": "/integrations/builtin/credentials/venafitlsprotectdatacenter.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Vero": {
            "description": "Use the Vero node to automate work in Vero and integrate Vero with other applications.",
            "operations": {
                "User": [
                    "Create or update a user profile",
                    "Change a users identifier",
                    "Unsubscribe a user.",
                    "Resubscribe a user.",
                    "Delete a user.",
                    "Adds a tag to a users profile.",
                    "Removes a tag from a users profile."
                ],
                "Event": [
                    "Track an event for a specific customer"
                ]
            },
            "credentials": "/integrations/builtin/credentials/vero.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Vonage": {
            "description": "Use the Vonage node to automate work in Vonage, and integrate Vonage with other applications.",
            "operations": {
                "SMS": [
                    "Send"
                ]
            },
            "credentials": "/integrations/builtin/credentials/vonage.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Webflow": {
            "description": "Use the Webflow node to automate work in Webflow, and integrate Webflow with other applications.",
            "operations": {
                "Item": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get All",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/webflow.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Wekan": {
            "description": "Use the Wekan node to automate work in Wekan, and integrate Wekan with other applications.",
            "operations": {
                "Board": [
                    "Create a new board",
                    "Delete a board",
                    "Get the data of a board",
                    "Get all user boards"
                ],
                "Card": [
                    "Create a new card",
                    "Delete a card",
                    "Get a card",
                    "Get all cards",
                    "Update a card"
                ],
                "Card Comment": [
                    "Create a comment on a card",
                    "Delete a comment from a card",
                    "Get a card comment",
                    "Get all card comments"
                ],
                "Checklist": [
                    "Create a new checklist",
                    "Delete a checklist",
                    "Get the data of a checklist",
                    "Returns all checklists for the card"
                ],
                "Checklist Item": [
                    "Delete a checklist item",
                    "Get a checklist item",
                    "Update a checklist item"
                ],
                "List": [
                    "Create a new list",
                    "Delete a list",
                    "Get the data of a list",
                    "Get all board lists"
                ]
            },
            "credentials": "/integrations/builtin/credentials/wekan.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Wise": {
            "description": "Use the Wise node to automate work in Wise, and integrate Wise with other applications.",
            "operations": {
                "Account": [
                    "Retrieve balances for all account currencies of this user.",
                    "Retrieve currencies in the borderless account of this user.",
                    "Retrieve the statement for the borderless account of this user."
                ],
                "Exchange Rate": [
                    "Get"
                ],
                "Profile": [
                    "Get",
                    "Get All"
                ],
                "Recipient": [
                    "Get All"
                ],
                "Quote": [
                    "Create",
                    "Get"
                ],
                "Transfer": [
                    "Create",
                    "Delete",
                    "Execute",
                    "Get",
                    "Get All"
                ]
            },
            "credentials": "/integrations/builtin/credentials/wise.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "WooCommerce": {
            "description": "Use the WooCommerce node to automate work in WooCommerce, and integrate WooCommerce with other applications.",
            "operations": {
                "Customer": [
                    "Create a customer",
                    "Delete a customer",
                    "Retrieve a customer",
                    "Retrieve all customers",
                    "Update a customer"
                ],
                "Order": [
                    "Create a order",
                    "Delete a order",
                    "Get a order",
                    "Get all orders",
                    "Update an order"
                ],
                "Product": [
                    "Create a product",
                    "Delete a product",
                    "Get a product",
                    "Get all products",
                    "Update a product"
                ]
            },
            "credentials": "/integrations/builtin/credentials/woocommerce.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "WordPress": {
            "description": "Use the WordPress node to automate work in WordPress, and integrate WordPress with other applications.",
            "operations": {
                "Post": [
                    "Create a post",
                    "Get a post",
                    "Get all posts",
                    "Update a post"
                ],
                "Pages": [
                    "Create a page",
                    "Get a page",
                    "Get all pages",
                    "Update a page"
                ],
                "User": [
                    "Create a user",
                    "Get a user",
                    "Get all users",
                    "Update a user"
                ]
            },
            "credentials": "/integrations/builtin/credentials/wordpress.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Xero": {
            "description": "Use the Xero node to automate work in Xero, and integrate Xero with other applications.",
            "operations": {
                "Contact": [
                    "Create a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update a contact"
                ],
                "Invoice": [
                    "Create a invoice",
                    "Get a invoice",
                    "Get all invoices",
                    "Update a invoice"
                ]
            },
            "credentials": "/integrations/builtin/credentials/xero.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Yourls": {
            "description": "Use the Yourls node to automate work in Yourls, and integrate Yourls with other applications.",
            "operations": {
                "URL": [
                    "Expand a URL",
                    "Shorten a URL",
                    "Get stats about one short URL"
                ]
            },
            "credentials": "/integrations/builtin/credentials/yourls.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "YouTube": {
            "description": "Use the YouTube node to automate work in YouTube, and integrate YouTube with other applications.",
            "operations": {
                "Channel": [
                    "Retrieve a channel",
                    "Retrieve all channels",
                    "Update a channel",
                    "Upload a channel banner"
                ],
                "Playlist": [
                    "Create a playlist",
                    "Delete a playlist",
                    "Get a playlist",
                    "Retrieve all playlists",
                    "Update a playlist"
                ],
                "Playlist Item": [
                    "Add an item to a playlist",
                    "Delete a item from a playlist",
                    "Get a playlist's item",
                    "Retrieve all playlist items"
                ],
                "Video": [
                    "Delete a video",
                    "Get a video",
                    "Retrieve all videos",
                    "Rate a video",
                    "Update a video",
                    "Upload a video"
                ],
                "Video Category": [
                    "Retrieve all video categories"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "medium"
        },
        "Zammad": {
            "description": "Use the Zammad node to automate work in Zammad, and integrate Zammad with other applications.",
            "operations": {
                "Group": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get many",
                    "Update"
                ],
                "Organization": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get many",
                    "Update"
                ],
                "Ticket": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get many"
                ],
                "User": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get many",
                    "Get self",
                    "Update"
                ]
            },
            "credentials": "/integrations/builtin/credentials/zammad.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Zendesk": {
            "description": "Use the Zendesk node to automate work in Zendesk, and integrate Zendesk with other applications.",
            "operations": {
                "Ticket": [
                    "Create a ticket",
                    "Delete a ticket",
                    "Get a ticket",
                    "Get all tickets",
                    "Recover a suspended ticket",
                    "Update a ticket"
                ],
                "Ticket Field": [
                    "Get a ticket field",
                    "Get all system and custom ticket fields"
                ],
                "User": [
                    "Create a user",
                    "Delete a user",
                    "Get a user",
                    "Get all users",
                    "Get a user's organizations",
                    "Get data related to the user",
                    "Search users",
                    "Update a user"
                ],
                "Organization": [
                    "Create an organization",
                    "Delete an organization",
                    "Count organizations",
                    "Get an organization",
                    "Get all organizations",
                    "Get data related to the organization",
                    "Update a organization"
                ]
            },
            "credentials": "/integrations/builtin/credentials/zendesk.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "ZohoCRM": {
            "description": "Use the Zoho CRM node to automate work in Zoho CRM, and integrate Zoho CRM with other applications.",
            "operations": {
                "Account": [
                    "Create an account",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete an account",
                    "Get an account",
                    "Get all accounts",
                    "Update an account"
                ],
                "Contact": [
                    "Create a contact",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update a contact"
                ],
                "Deal": [
                    "Create a deal",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a contact",
                    "Get a contact",
                    "Get all contacts",
                    "Update a contact"
                ],
                "Invoice": [
                    "Create an invoice",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete an invoice",
                    "Get an invoice",
                    "Get all invoices",
                    "Update an invoice"
                ],
                "Lead": [
                    "Create a lead",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a lead",
                    "Get a lead",
                    "Get all leads",
                    "Get lead fields",
                    "Update a lead"
                ],
                "Product": [
                    "Create a product",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a product",
                    "Get a product",
                    "Get all products",
                    "Update a product"
                ],
                "Purchase Order": [
                    "Create a purchase order",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a purchase order",
                    "Get a purchase order",
                    "Get all purchase orders",
                    "Update a purchase order"
                ],
                "Quote": [
                    "Create a quote",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a quote",
                    "Get a quote",
                    "Get all quotes",
                    "Update a quote"
                ],
                "Sales Order": [
                    "Create a sales order",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a sales order",
                    "Get a sales order",
                    "Get all sales orders",
                    "Update a sales order"
                ],
                "Vendor": [
                    "Create a vendor",
                    "Create a new record, or update the current one if it already exists (upsert)",
                    "Delete a vendor",
                    "Get a vendor",
                    "Get all vendors",
                    "Update a vendor"
                ]
            },
            "credentials": "/integrations/builtin/credentials/zoho.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Zoom": {
            "description": "Use the Zoom node to automate work in Zoom, and integrate Zoom with other applications.",
            "operations": {
                "Meeting": [
                    "Create a meeting",
                    "Delete a meeting",
                    "Retrieve a meeting",
                    "Retrieve all meetings",
                    "Update a meeting"
                ]
            },
            "credentials": "/integrations/builtin/credentials/zoom.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Zulip": {
            "description": "Use the Zulip node to automate work in Zulip, and integrate Zulip with other applications.",
            "operations": {
                "Message": [
                    "Delete a message",
                    "Get a message",
                    "Send a private message",
                    "Send a message to stream",
                    "Update a message",
                    "Upload a file"
                ],
                "Stream": [
                    "Create a stream.",
                    "Delete a stream.",
                    "Get all streams.",
                    "Get subscribed streams.",
                    "Update a stream."
                ],
                "User": [
                    "Create a user.",
                    "Deactivate a user.",
                    "Get a user.",
                    "Get all users.",
                    "Update a user."
                ]
            },
            "credentials": "/integrations/builtin/credentials/zulip.md",
            "contentType": [
                "integration",
                "reference"
            ]
        },
        "Airtable": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Airtable node to automate work in Airtable, and integrate Airtable with other applications.",
            "operations": [
                "Append the data to a table",
                "Delete data from a table",
                "List data from a table",
                "Read data from a table",
                "Update data in a table"
            ],
            "credentials": "/integrations/builtin/credentials/airtable.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "Discord": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Discord node to automate work in Discord, and integrate Discord with other applications.",
            "operations": {
                "Channel": [
                    "Create",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Message": [
                    "Delete",
                    "Get",
                    "Get Many",
                    "React with Emoji",
                    "Send"
                ],
                "Member": [
                    "Get Many",
                    "Role Add",
                    "Role Remove"
                ]
            },
            "credentials": "/integrations/builtin/credentials/discord.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "Gmail": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "DraftOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "LabelOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "MessageOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "ThreadOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Gmail node to automate work in Gmail, and integrate Gmail with other applications.",
            "operations": {
                "Draft": [
                    "Create a draft",
                    "Delete a draft",
                    "Get a draft",
                    "Get Many drafts"
                ],
                "Label": [
                    "Create a label",
                    "Delete a label",
                    "Get a label",
                    "Get Many labels"
                ],
                "Message": [
                    "Add Label",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Mark as Read",
                    "Mark as Unread",
                    "Remove Label",
                    "Reply",
                    "Send"
                ],
                "Thread": [
                    "Add Label",
                    "Delete",
                    "Get",
                    "Get Many",
                    "Remove Label",
                    "Reply",
                    "Trash",
                    "Untrash"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "GoogleCalendar": {
            "subNodes": {
                "CalendarOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "EventOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Google Calendar node to automate work in Google Calendar, and integrate Google Calendar with other applications.",
            "operations": {
                "Calendar": [
                    "Availability: If a time-slot is available in a calendar"
                ],
                "Event": [
                    "Create: Add an event to calendar",
                    "Delete: Delete an event",
                    "Get: Retrieve an event",
                    "Get Many: Retrieve all events from a calendar",
                    "Update: Update an event"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "GoogleDrive": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "FileFolderOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "FileOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "FolderOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                },
                "SharedDriveOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Google Drive node to automate work in Google Drive, and integrate Google Drive with other applications.",
            "operations": {
                "File": [
                    "Copy a file",
                    "Create from text",
                    "Delete a file",
                    "Download a file",
                    "Move a file",
                    "Share a file",
                    "Update a file",
                    "Upload a file"
                ],
                "File/Folder": [
                    "Search files and folders"
                ],
                "Folder": [
                    "Create a folder",
                    "Delete a folder",
                    "Share a folder"
                ],
                "Shared Drive": [
                    "Create a shared drive",
                    "Delete a shared drive",
                    "Get a shared drive",
                    "Get Many shared drives",
                    "Update a shared drive"
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "GoogleSheets": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "DocumentOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "SheetOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                }
            },
            "description": "Use the Google Sheets node to automate work in Google Sheets, and integrate Google Sheets with other applications.",
            "operations": {
                "Document": [
                    "Create a spreadsheet.",
                    "Delete a spreadsheet."
                ],
                "Sheet Within Document": [
                    "Append or Update Row: Append a new row, or update the current one if it already exists.",
                    "Append Row: Create a new row.",
                    "Clear: Clear all data from a sheet.",
                    "Create: Create a new sheet.",
                    "Delete: Delete a sheet.",
                    "Delete Rows or Columns: Delete columns and rows from a sheet.",
                    "Get Row(s): Read all rows in a sheet.",
                    "Update Row: Update a row in a sheet."
                ]
            },
            "credentials": "/integrations/builtin/credentials/google/index.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "critical"
        },
        "MySQL": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the MySQL node to automate work in MySQL, and integrate MySQL with other applications.",
            "operations": [
                "Delete",
                "Execute SQL",
                "Insert",
                "Insert or Update",
                "Select",
                "Update"
            ],
            "credentials": "/integrations/builtin/credentials/mysql.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "Notion": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Notion node to automate work in Notion, and integrate Notion with other applications.",
            "operations": {
                "Block": [
                    "Append After",
                    "Get Child Blocks"
                ],
                "Database": [
                    "Get",
                    "Get Many",
                    "Search"
                ],
                "Database Page": [
                    "Create",
                    "Get",
                    "Get Many",
                    "Update"
                ],
                "Page": [
                    "Archive",
                    "Create",
                    "Search"
                ],
                "User": [
                    "Get",
                    "Get Many"
                ]
            },
            "credentials": "/integrations/builtin/credentials/notion.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "Postgres": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Postgres node to automate work in Postgres, and integrate Postgres with other applications.",
            "operations": [
                "Delete",
                "Execute SQL",
                "Insert",
                "Insert or Update",
                "Select",
                "Update"
            ],
            "credentials": "/integrations/builtin/credentials/postgres.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "critical"
        },
        "Supabase": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the Supabase node to automate work in Supabase, and integrate Supabase with other applications.",
            "operations": {
                "Row": [
                    "Create a new row",
                    "Delete a row",
                    "Get a row",
                    "Get all rows",
                    "Update a row"
                ]
            },
            "credentials": "/integrations/builtin/credentials/supabase.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "Telegram": {
            "subNodes": {
                "CallbackOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "ChatOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "FileOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "MessageOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                }
            },
            "description": "Use the Telegram node to automate work in Telegram, and integrate Telegram with other applications.",
            "operations": {
                "Chat operations": [
                    "Get up-to-date information about a chat.",
                    "Get Administrators: Get a list of all administrators in a chat.",
                    "Get Member: Get the details of a chat member.",
                    "Leave: Leave a chat.",
                    "Set Description of a chat.",
                    "Set Title of a chat."
                ],
                "Callback operations": [
                    "Answer Query: Send answers to callback queries sent from [inline keyboards](https://core.telegram.org/bots/features#inline-keyboards).",
                    "Answer Inline Query: Send answers to callback queries sent from inline queries."
                ],
                "File operations": [
                    "Get File from Telegram."
                ],
                "Message operations": [
                    "Delete Chat Message.",
                    "Edit Message Text: Edit the text of an existing message.",
                    "Pin Chat Message for the chat.",
                    "Send Animation: For use with GIFs or H.264/MPEG-4 AVC videos without sound up to 50 MB in size.",
                    "Send Audio: Send an audio file to the chat and display it in the music player.",
                    "Send Chat Action: Tell the user that something is happening on the bot's side. The status is set for 5 seconds or less.",
                    "Send Document: Send a document to the chat.",
                    "Send Location: Send a geolocation to the chat.",
                    "Send Media Group: Send a group of photos and/or videos.",
                    "Send Message: Send a message to the chat.",
                    "Send Photo: Send a photo to the chat.",
                    "Send Sticker: For use with static .WEBP, animated .TGS, or video .WEBM stickers.",
                    "Send Video: Send a video to the chat.",
                    "Unpin Chat Message from the chat."
                ]
            },
            "credentials": "/integrations/builtin/credentials/telegram.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "critical"
        },
        "WhatsAppBusinessCloud": {
            "subNodes": {
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "high"
                }
            },
            "description": "Use the WhatsApp Business Cloud node to automate work in WhatsApp Business, and integrate WhatsApp Business with other applications.",
            "operations": {
                "Message": [
                    "Send",
                    "Send Template"
                ],
                "Media": [
                    "Upload",
                    "Download",
                    "Delete"
                ]
            },
            "credentials": "/integrations/builtin/credentials/whatsapp.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "high"
        },
        "OpenAI": {
            "subNodes": {
                "AssistantOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "AudioOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "CommonIssues": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "FileOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "ImageOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                },
                "TextOperations": {
                    "contentType": [
                        "integration",
                        "reference"
                    ],
                    "priority": "critical"
                }
            },
            "description": "Use the OpenAI node to automate work in OpenAI and integrate OpenAI with other applications.",
            "operations": {
                "Assistant": [
                    "Create an Assistant",
                    "Delete an Assistant",
                    "List Assistants",
                    "Message an Assistant",
                    "Update an Assistant"
                ],
                "Text": [
                    "Message a Model",
                    "Classify Text for Violations"
                ],
                "Image": [
                    "Analyze Image",
                    "Generate an Image"
                ],
                "Audio": [
                    "Generate Audio",
                    "Transcribe a Recording",
                    "Translate a Recording"
                ],
                "File": [
                    "Delete a File",
                    "List Files",
                    "Upload a File"
                ]
            },
            "credentials": "/integrations/builtin/credentials/openai.md",
            "contentType": [
                "integration",
                "reference"
            ],
            "priority": "critical"
        }
    }
}



================================================
File: build-json-workflows.txt
================================================
n8n workflows are defined entirely in JSON. Each workflow is a JSON object that specifies the nodes (the building blocks of your automation) and the connections between them. By studying the examples you provided, you can see a consistent structure and key elements that you need to include when writing a workflow from scratch.

Below is an overview of the core concepts and steps involved:

---

### 1. Overall Workflow Structure

- **Root Object:**  
  Every workflow JSON contains several key properties:
  - **name:** The workflow’s title.
  - **nodes:** An array where each object represents a node.
  - **connections:** An object that defines how the nodes are linked together (i.e., which node’s output is fed into which node’s input).
  - **pinData, meta, active, settings, etc.:** Additional metadata and settings for the workflow.

---

### 2. Nodes

Each node is a self-contained object that represents an action or trigger. Key properties include:

- **id:** A unique identifier (typically a UUID) for the node.
- **name:** A human-friendly name (helps in identifying the node in the editor).
- **type & typeVersion:** These define the node’s functionality (e.g., manualTrigger, code, HTTP Request, etc.) and the version of that node.
- **parameters:** An object that contains the node-specific settings (for example, the URL and options for an HTTP Request, or the code to execute in a Code node).
- **position:** An array (usually two numbers) that tells n8n where to place the node in the visual editor.
- **credentials (optional):** If the node requires authentication (like for Google Drive or Slack), credentials are referenced here.

*Example snippet from a node:*

```json
{
  "id": "manual-1",
  "name": "Trigger",
  "type": "n8n-nodes-base.manualTrigger",
  "typeVersion": 1,
  "position": [100, 100],
  "parameters": {}
}
```

---

### 3. Connections

The **connections** property maps the outputs of nodes to the inputs of other nodes, creating the workflow’s execution order. Each key in this object corresponds to a node (usually by its name) and contains arrays indicating which node receives the output.

*Example:*

```json
"connections": {
  "Trigger": {
    "main": [
      [
        {
          "node": "Run Code",
          "type": "main",
          "index": 0
        }
      ]
    ]
  }
}
```

In this example, the output of the "Trigger" node (a manual trigger) is connected to the "Run Code" node.

---

### 4. Writing a Workflow from Scratch

When writing a workflow JSON manually, follow these steps:

1. **Define the Root Object:**  
   Begin with a JSON object that includes a name, an empty "nodes" array, and an empty "connections" object.

2. **Add Your Nodes:**  
   For each step in your automation:
   - Create an object with a unique **id**, **name**, **type**, **typeVersion**, **parameters**, and **position**.
   - Configure the **parameters** based on what the node is supposed to do (e.g., for a code node, add your JavaScript code).

3. **Set Up Connections:**  
   Define the "connections" object to map the flow of data between nodes. This determines the execution order.
   
4. **Include Credentials When Needed:**  
   For nodes that integrate with external services, add a **credentials** key that references the necessary authentication details.

5. **Test and Iterate:**  
   Import the JSON into n8n’s editor. Use the visual canvas to verify the layout and connections, then test the workflow.

---

### 5. A Minimal Example

Below is a very simple workflow JSON that demonstrates the key structure:

```json
{
  "name": "My First Workflow",
  "nodes": [
    {
      "id": "manual-1",
      "name": "Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [100, 100],
      "parameters": {}
    },
    {
      "id": "code-1",
      "name": "Run Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 100],
      "parameters": {
        "jsCode": "return [{ json: { message: 'Hello, n8n!' } }];"
      }
    }
  ],
  "connections": {
    "Trigger": {
      "main": [
        [
          {
            "node": "Run Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

In this workflow:
- A **manual trigger** node initiates the process.
- Its output is passed to a **code** node that returns a simple message.

---

### 6. Observations from the Examples

- **Complexity and Variety:**  
  The provided examples range from simple triggers to complex integrations involving AI nodes, HTTP requests, and even branching logic using switch nodes. They demonstrate how you can mix and match different node types to build sophisticated automations.

- **Dynamic Expressions:**  
  Many workflows use n8n’s expression syntax (e.g., `={{ $json.fieldName }}`) to dynamically pass data between nodes, which is key to making workflows flexible and data-driven.

- **Documentation within Workflows:**  
  Sticky Note nodes are often used to add documentation or instructions directly in the workflow. This is a useful practice for maintaining clarity, especially in complex workflows.

---

### Conclusion

By understanding the JSON structure of n8n workflows:
- You learn that each workflow is built from an array of nodes and a mapping of their connections.
- You see that each node must be configured with its type, parameters, and position.
- And you understand that the “connections” object controls the execution order.

Using this knowledge, you can write your own JSON workflows from scratch—whether it’s for a simple automation or a complex integration—and then import them into n8n for testing and further development.


================================================
File: cluster-nodes.json
================================================
{
    "cluster-nodes": {
      "index": {
        "title": "Cluster nodes",
        "description": "Understand cluster nodes in n8n, and browse the cluster nodes library.",
        "contentType": "overview"
      },
      "root-nodes": {
        "index": {
          "title": "Root nodes",
          "description": "Understand root nodes in n8n, and browse the root nodes library.",
          "contentType": "overview"
        },
        "n8n-nodes-langchain.chainllm": {
          "title": "Basic LLM Chain node documentation",
          "description": "Learn how to use the Basic LLM Chain node in n8n. Follow technical documentation to integrate Basic LLM Chain node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "critical",
          "nodeParameters": {
            "Prompt": {
              "type": "select",
              "description": "Choose how to set the prompt for the model. Choose between defining it below or connecting a Chat Trigger node.",
              "values": [
                "Define below",
                "Connected Chat Trigger Node"
              ],
              "subParameters": {
                "Define below": {
                  "Text": {
                    "type": "text",
                    "description": "The prompt text to send to the model. You can use expressions to reference data from previous nodes."
                  }
                },
                "Connected Chat Trigger Node": {
                  "description": "The node expects the prompt to be in the chatInput field from the previous node."
                }
              }
            },
            "Require Specific Output Format": {
              "type": "boolean",
              "description": "Turn on to require the model to respond with a specific output format (for example, JSON).",
              "subParameters": {
                "Output Parser": {
                  "type": "connection",
                  "description": "Connect an output parser sub-node to define the output format."
                }
              }
            },
            "Chat Messages": {
              "type": "section",
              "description": "Use **Chat Messages** when you're using a chat model to set a message.",
              "subParameters": {
                "AI": {
                  "type": "group",
                  "description": "Enter a sample expected response in the **Message** field. The model will try to respond in the same way in its messages.",
                  "fields": {
                    "Message": {
                      "type": "text",
                      "description": "Sample expected response."
                    }
                  }
                },
                "System": {
                  "type": "group",
                  "description": "Enter a system **Message** to include with the user input to help guide the model in what it should do.",
                  "fields": {
                    "Message": {
                      "type": "text",
                      "description": "System message to guide the model."
                    }
                  }
                },
                "User": {
                  "type": "group",
                  "description": "Enter a sample user input. Using this with the AI option can help improve the output of the agent. Using both together provides a sample of an input and expected response (the **AI Message**) for the model to follow.",
                  "fields": {
                    "Input Type": {
                      "type": "select",
                      "values": [
                        "Text",
                        "Image (Binary)",
                        "Image (URL)"
                      ]
                    },
                    "Message (Text)": {
                      "type": "text",
                      "description": "Sample user input as text."
                    },
                    "Image Data Field Name": {
                      "type": "text",
                      "description": "Binary input field name containing image data."
                    },
                    "Image URL": {
                      "type": "text",
                      "description": "URL of the image."
                    },
                    "Image Details": {
                      "type": "select",
                      "values": [
                        "Auto",
                        "Low",
                        "High"
                      ],
                      "description": "Control how the model processes the image and generates its textual understanding."
                    }
                  }
                }
              }
            }
          },
          "commonIssues": [
            {
              "title": "No prompt specified error",
              "description": "This error displays when the **Prompt** is empty or invalid.",
              "scenarios": [
                "When you've set the **Prompt** to **Define below** and haven't entered anything in the **Text** field.",
                "When you've set the **Prompt** to **Connected Chat Trigger Node** and the incoming data has no field called chatInput."
              ],
              "resolutions": [
                "Enter a valid prompt in the **Text** field.",
                "Add an [Edit Fields (Set)](/integrations/builtin/core-nodes/n8n-nodes-base.set.md) node to edit an incoming field name to chatInput."
              ]
            }
          ]
        },
        "n8n-nodes-langchain.chainsummarization": {
          "title": "Summarization Chain node documentation",
          "description": "Learn how to use the Summarize Chain node in n8n. Follow technical documentation to integrate Summarize Chain node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeParameters": {
            "Data to Summarize": {
              "type": "select",
              "values": [
                "Use Node Input (JSON)",
                "Use Node Input (Binary)",
                "Use Document Loader"
              ],
              "subParameters": {
                "Use Node Input (JSON)": {
                  "Chunking Strategy": {
                    "type": "select",
                    "values": [
                      "Simple (Define Below)",
                      "Advanced"
                    ],
                    "subParameters": {
                      "Simple (Define Below)": {
                        "Characters Per Chunk": {
                          "type": "number",
                          "description": "Set Characters Per Chunk."
                        },
                        "Chunk Overlap (Characters)": {
                          "type": "number",
                          "description": "Set Chunk Overlap (Characters)."
                        }
                      },
                      "Advanced": {
                        "Splitter": {
                          "type": "connection",
                          "description": "Connect a splitter sub-node for advanced configuration."
                        }
                      }
                    }
                  }
                },
                "Use Node Input (Binary)": {
                  "Chunking Strategy": {
                    "type": "select",
                    "values": [
                      "Simple (Define Below)",
                      "Advanced"
                    ],
                    "subParameters": {
                      "Simple (Define Below)": {
                        "Characters Per Chunk": {
                          "type": "number",
                          "description": "Set Characters Per Chunk."
                        },
                        "Chunk Overlap (Characters)": {
                          "type": "number",
                          "description": "Set Chunk Overlap (Characters)."
                        }
                      },
                      "Advanced": {
                        "Splitter": {
                          "type": "connection",
                          "description": "Connect a splitter sub-node for advanced configuration."
                        }
                      }
                    }
                  }
                },
                "Use Document Loader": {
                  "Document Loader": {
                    "type": "connection",
                    "description": "Connect a document loader sub-node."
                  }
                }
              }
            }
          },
          "nodeOptions": {
            "Summarization Method and Prompts": {
              "type": "group",
              "fields": {
                "Summarization Method": {
                  "type": "select",
                  "values": [
                    "Map Reduce",
                    "Refine",
                    "Stuff"
                  ]
                },
                "Individual Summary Prompts": {
                  "type": "text",
                  "description": "Customize the individual summary prompts. Include the '{text}' placeholder."
                },
                "Final Prompt to Combine": {
                  "type": "text",
                  "description": "Customize the final prompt to combine summaries. Include the '{text}' placeholder."
                }
              }
            }
          }
        },
        "n8n-nodes-langchain.code": {
          "title": "LangChain Code node documentation",
          "description": "Learn how to use the LangChain Code node in n8n. Follow technical documentation to integrate LangChain Code node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Add Code": {
              "type": "select",
              "values": [
                "Execute",
                "Supply Data"
              ],
              "description": "Choose either **Execute** or **Supply Data** mode. You can only use one mode.",
              "subParameters": {
                "Execute": {
                  "description": "Use the LangChain Code node like n8n's own Code node. This takes input data from the workflow, processes it, and returns it as the node output. This mode requires a main input and output. You must create these connections in **Inputs** and **Outputs**."
                },
                "Supply Data": {
                  "description": "Use the LangChain Code node as a sub-node, sending data to a root node. This uses an output other than main."
                }
              }
            },
            "Inputs": {
              "type": "multiOptions",
              "description": "Choose the input types.",
              "values": [
                "Main",
                "..."
              ]
            },
            "Outputs": {
              "type": "multiOptions",
              "description": "Choose the output types.",
              "values": [
                "Main",
                "..."
              ]
            }
          }
        },
        "n8n-nodes-langchain.information-extractor": {
          "title": "Information Extractor node documentation",
          "description": "Learn how to use the Information Extractor node in n8n. Follow technical documentation to integrate Information Extractor node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Text": {
              "type": "text",
              "description": "Defines the input text to extract information from. This is usually an expression that references a field from the input items."
            },
            "Schema Type": {
              "type": "select",
              "values": [
                "From Attribute Description",
                "Generate From JSON Example",
                "Define Below"
              ],
              "description": "Choose how you want to describe the desired output data format.",
              "subParameters": {
                "From Attribute Description": {
                  "description": "Define the schema by specifying the list of attributes and their descriptions."
                },
                "Generate From JSON Example": {
                  "description": "Input an example JSON object to automatically generate the schema."
                },
                "Define Below": {
                  "description": "Manually input the JSON schema."
                }
              }
            }
          },
          "nodeOptions": {
            "System Prompt Template": {
              "type": "text",
              "description": "Use this option to change the system prompt that's used for the information extraction. n8n automatically appends format specification instructions to the prompt."
            }
          }
        },
        "n8n-nodes-langchain.sentimentanalysis": {
          "title": "Sentiment Analysis node documentation",
          "description": "Learn how to use the Sentiment Analysis node in n8n. Follow technical documentation to integrate Sentiment Analysis node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Text to Analyze": {
              "type": "text",
              "description": "Defines the input text for sentiment analysis. This is an expression that references a field from the input items."
            }
          },
          "nodeOptions": {
            "Sentiment Categories": {
              "type": "text",
              "description": "Define the categories that you want to classify your input as. By default, these are Positive, Neutral, Negative."
            },
            "Include Detailed Results": {
              "type": "boolean",
              "description": "When turned on, this option includes sentiment strength and confidence scores in the output."
            },
            "System Prompt Template": {
              "type": "text",
              "description": "Use this option to change the system prompt that's used for the sentiment analysis. It uses the {categories} placeholder for the categories."
            },
            "Enable Auto-Fixing": {
              "type": "boolean",
              "description": "When enabled, the node automatically fixes model outputs to ensure they match the expected format."
            }
          }
        },
        "n8n-nodes-langchain.text-classifier": {
          "title": "Text Classifier node documentation",
          "description": "Learn how to use the Text Classifier node in n8n. Follow technical documentation to integrate Text Classifier node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Input Prompt": {
              "type": "text",
              "description": "Defines the input to classify. This is usually an expression that references a field from the input items."
            },
            "Categories": {
              "type": "collection",
              "description": "Add the categories that you want to classify your input as.",
              "fields": {
                "Name": {
                  "type": "text",
                  "description": "Category name"
                },
                "Description": {
                  "type": "text",
                  "description": "Category description"
                }
              }
            }
          },
          "nodeOptions": {
            "Allow Multiple Classes To Be True": {
              "type": "boolean",
              "description": "Configure the classifier to always output a single class per item (turned off), or allow the model to select multiple classes (turned on)."
            },
            "When No Clear Match": {
              "type": "select",
              "values": [
                "Discard Item",
                "Output on Extra, 'Other' Branch"
              ],
              "description": "Define what happens if the model can't find a good match for an item."
            },
            "System Prompt Template": {
              "type": "text",
              "description": "Use this option to change the system prompt that's used for the classification. It uses the {categories} placeholder for the categories."
            },
            "Enable Auto-Fixing": {
              "type": "boolean",
              "description": "When enabled, the node automatically fixes model outputs to ensure they match the expected format."
            }
          }
        },
        "n8n-nodes-langchain.vectorstoreinmemory": {
          "title": "Simple Vector Store node documentation",
          "description": "Learn how to use the Simple Vector Store node in n8n. Follow technical documentation to integrate Simple Vector Store node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many",
                "Insert Documents",
                "Retrieve Documents (As Vector Store for Chain/Tool)",
                "Retrieve Documents (As Tool for AI Agent)"
              ],
              "description": "Select the operation mode for the vector store.",
              "subParameters": {
                "Get Many": {
                  "Memory Key": {
                    "type": "text",
                    "description": "Enter the key to use to store the vector memory in the workflow data."
                  },
                  "Prompt": {
                    "type": "text",
                    "description": "Enter the search query."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                },
                "Insert Documents": {
                  "Memory Key": {
                    "type": "text",
                    "description": "Enter the key to use to store the vector memory in the workflow data."
                  },
                  "Clear Store": {
                    "type": "boolean",
                    "description": "Use this parameter to control whether to wipe the vector store before inserting data (turned on)."
                  }
                },
                "Retrieve Documents (As Vector Store for Chain/Tool)": {
                  "Memory Key": {
                    "type": "text",
                    "description": "Enter the key to use to store the vector memory in the workflow data."
                  }
                },
                "Retrieve Documents (As Tool for AI Agent)": {
                  "Name": {
                    "type": "text",
                    "description": "The name of the vector store."
                  },
                  "Description": {
                    "type": "text",
                    "description": "Explain to the LLM what this tool does."
                  },
                  "Memory Key": {
                    "type": "text",
                    "description": "Enter the key to use to store the vector memory in the workflow data."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                }
              }
            }
          }
        },
        "n8n-nodes-langchain.vectorstoremongodbatlas": {
          "title": "MongoDB Atlas Vector Store node documentation",
          "description": "Learn how to use the MongoDB Atlas Vector Store node in n8n. Follow technical documentation to integrate MongoDB Atlas Vector Store node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many",
                "Insert Documents",
                "Retrieve Documents (As Vector Store for Chain/Tool)",
                "Retrieve Documents (As Tool for AI Agent)"
              ],
              "description": "Select the operation mode for the vector store.",
              "subParameters": {
                "Get Many": {
                  "Mongo Collection": {
                    "type": "text",
                    "description": "Enter the name of the MongoDB collection to use."
                  },
                  "Vector Index Name": {
                    "type": "text",
                    "description": "Enter the name of the Vector Search index in your MongoDB Atlas collection."
                  },
                  "Embedding Field": {
                    "type": "text",
                    "description": "Enter the field name in your documents that contains the vector embeddings."
                  },
                  "Metadata Field": {
                    "type": "text",
                    "description": "Enter the field name in your documents that contains the text metadata."
                  }
                },
                "Insert Documents": {
                  "Mongo Collection": {
                    "type": "text",
                    "description": "Enter the name of the MongoDB collection to use."
                  },
                  "Vector Index Name": {
                    "type": "text",
                    "description": "Enter the name of the Vector Search index in your MongoDB Atlas collection."
                  },
                  "Embedding Field": {
                    "type": "text",
                    "description": "Enter the field name in your documents that contains the vector embeddings."
                  },
                  "Metadata Field": {
                    "type": "text",
                    "description": "Enter the field name in your documents that contains the text metadata."
                  }
                },
                "Retrieve Documents (As Vector Store for Chain/Tool)": {
                  "Mongo Collection": {
                    "type": "text",
                    "description": "Enter the name of the MongoDB collection to use."
                  },
                  "Vector Index Name": {
                    "type": "text",
                    "description": "Enter the name of the Vector Search index in your MongoDB Atlas collection."
                  },
                  "Embedding Field": {
                    "type": "text",
                    "description": "Enter the field name in your documents that contains the vector embeddings."
                  },
                  "Metadata Field": {
                    "type": "text",
                    "description": "Enter the field name in your documents that contains the text metadata."
                  }
                },
                "Retrieve Documents (As Tool for AI Agent)": {
                  "Name": {
                    "type": "text",
                    "description": "The name of the vector store."
                  },
                  "Description": {
                    "type": "text",
                    "description": "Explain to the LLM what this tool does."
                  },
                  "Mongo Collection": {
                    "type": "text",
                    "description": "Enter the name of the MongoDB collection to use."
                  },
                  "Vector Index Name": {
                    "type": "text",
                    "description": "Enter the name of the Vector Search index in your MongoDB Atlas collection."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                }
              }
            }
          },
          "nodeOptions": {
            "Options": {
              "type": "group",
              "fields": {
                "Metadata Filter": {
                  "type": "json",
                  "description": "Filters results based on metadata."
                }
              }
            }
          }
        },
        "n8n-nodes-langchain.vectorstorepgvector": {
          "title": "PGVector Vector Store node documentation",
          "description": "Learn how to use the PGVector Vector Store node in n8n. Follow technical documentation to integrate PGVector Vector Store node into your workflows.",
          "priority": "medium",
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many",
                "Insert Documents",
                "Retrieve Documents (As Vector Store for Chain/Tool)",
                "Retrieve Documents (As Tool for AI Agent)"
              ],
              "description": "Select the operation mode for the vector store.",
              "subParameters": {
                "Get Many": {
                  "Table name": {
                    "type": "text",
                    "description": "Enter the name of the table you want to query."
                  },
                  "Prompt": {
                    "type": "text",
                    "description": "Enter your search query."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter a number to set how many results to retrieve from the vector store."
                  }
                },
                "Insert Documents": {
                  "Table name": {
                    "type": "text",
                    "description": "Enter the name of the table you want to query."
                  }
                },
                "Retrieve Documents (As Vector Store for Chain/Tool)": {
                  "Table name": {
                    "type": "text",
                    "description": "Enter the name of the table you want to query."
                  }
                },
                "Retrieve Documents (As Tool for AI Agent)": {
                  "Name": {
                    "type": "text",
                    "description": "The name of the vector store."
                  },
                  "Description": {
                    "type": "text",
                    "description": "Explain to the LLM what this tool does."
                  },
                  "Table Name": {
                    "type": "text",
                    "description": "Enter the PGVector table to use."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                }
              }
            }
          },
          "nodeOptions": {
            "Collection": {
              "type": "group",
              "description": "A way to separate datasets in PGVector.",
              "fields": {
                "Use Collection": {
                  "type": "boolean",
                  "description": "Select whether to use a collection (turned on) or not (turned off)."
                },
                "Collection Name": {
                  "type": "text",
                  "description": "Enter the name of the collection you want to use."
                },
                "Collection Table Name": {
                  "type": "text",
                  "description": "Enter the name of the table to store collection information in."
                }
              }
            },
            "Column Names": {
              "type": "group",
              "description": "The following options specify the names of the columns to store the vectors and corresponding information in:",
              "fields": {
                "ID Column Name": {
                  "type": "text",
                  "description": "ID Column Name"
                },
                "Vector Column Name": {
                  "type": "text",
                  "description": "Vector Column Name"
                },
                "Content Column Name": {
                  "type": "text",
                  "description": "Content Column Name"
                },
                "Metadata Column Name": {
                  "type": "text",
                  "description": "Metadata Column Name"
                }
              }
            },
            "Metadata Filter": {
              "type": "json",
              "description": "Filters results based on metadata. For example: {\"foo\": \"bar\"}."
            }
          }
        },
        "n8n-nodes-langchain.vectorstorepinecone": {
          "title": "Pinecone Vector Store node documentation",
          "description": "Learn how to use the Pinecone Vector Store node in n8n. Follow technical documentation to integrate Pinecone Vector Store node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many",
                "Insert Documents",
                "Retrieve Documents (As Vector Store for Chain/Tool)",
                "Retrieve Documents (As Tool for AI Agent)",
                "Update Documents"
              ],
              "description": "Select the operation mode for the vector store.",
              "subParameters": {
                "Get Many": {
                  "Pinecone Index": {
                    "type": "select | text",
                    "description": "Select or enter the Pinecone Index to use."
                  },
                  "Prompt": {
                    "type": "text",
                    "description": "Enter your search query."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                },
                "Insert Documents": {
                  "Pinecone Index": {
                    "type": "select | text",
                    "description": "Select or enter the Pinecone Index to use."
                  }
                },
                "Retrieve Documents (As Vector Store for Chain/Tool)": {
                  "Pinecone Index": {
                    "type": "select | text",
                    "description": "Select or enter the Pinecone Index to use."
                  }
                },
                "Retrieve Documents (As Tool for AI Agent)": {
                  "Name": {
                    "type": "text",
                    "description": "The name of the vector store."
                  },
                  "Description": {
                    "type": "text",
                    "description": "Explain to the LLM what this tool does."
                  },
                  "Pinecone Index": {
                    "type": "select | text",
                    "description": "Select or enter the Pinecone Index to use."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                },
                "Update Documents": {
                   "Pinecone Index": {
                    "type": "select | text",
                    "description": "Select or enter the Pinecone Index to use."
                  }
                }
              }
            }
          },
          "nodeOptions": {
            "Pinecone Namespace": {
              "type": "text",
              "description": "Another segregation option for how to store your data within the index."
            },
            "Metadata Filter": {
              "type": "json",
              "description": "Filters results based on metadata. For example: {\"foo\": \"bar\"}."
            },
            "Clear Namespace": {
              "type": "boolean",
              "description": "Available in **Insert Documents** mode. Deletes all data from the namespace before inserting the new data."
            }
          }
        },
        "n8n-nodes-langchain.vectorstoreqdrant": {
          "title": "Qdrant Vector Store node documentation",
          "description": "Learn how to use the Qdrant Vector Store node in n8n. Follow technical documentation to integrate Qdrant Vector Store node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many",
                "Insert Documents",
                "Retrieve Documents (As Vector Store for Chain/Tool)",
                "Retrieve Documents (As Tool for AI Agent)"
              ],
              "description": "Select the operation mode for the vector store.",
              "subParameters": {
                "Get Many": {
                  "Qdrant collection name": {
                    "type": "text",
                    "description": "Enter the name of the Qdrant collection to use."
                  },
                  "Prompt": {
                    "type": "text",
                    "description": "Enter the search query."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                },
                "Insert Documents": {
                  "Qdrant collection name": {
                    "type": "text",
                    "description": "Enter the name of the Qdrant collection to use."
                  }
                },
                "Retrieve Documents (As Vector Store for Chain/Tool)": {
                  "Qdrant Collection": {
                    "type": "text",
                    "description": "Enter the name of the Qdrant collection to use."
                  }
                },
                "Retrieve Documents (As Tool for AI Agent)": {
                  "Name": {
                    "type": "text",
                    "description": "The name of the vector store."
                  },
                  "Description": {
                    "type": "text",
                    "description": "Explain to the LLM what this tool does."
                  },
                  "Qdrant Collection": {
                    "type": "text",
                    "description": "Enter the name of the Qdrant collection to use."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                }
              }
            }
          },
          "nodeOptions": {
            "Metadata Filter": {
              "type": "json",
              "description": "Filters results based on metadata. For example: {\"foo\": \"bar\"}."
            },
            "Collection Config": {
              "type": "json",
              "description": "Enter JSON options for creating a Qdrant collection creation configuration."
            }
          }
        },
        "n8n-nodes-langchain.vectorstoresupabase": {
          "title": "Supabase Vector Store node documentation",
          "description": "Learn how to use the Supabase Vector Store node in n8n. Follow technical documentation to integrate Supabase Vector Store node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many",
                "Insert Documents",
                "Retrieve Documents (As Vector Store for Chain/Tool)",
                "Retrieve Documents (As Tool for AI Agent)",
                "Update Documents"
              ],
              "description": "Select the operation mode for the vector store.",
              "subParameters": {
                "Get Many": {
                  "Table Name": {
                    "type": "text",
                    "description": "Enter the Supabase table to use."
                  },
                  "Prompt": {
                    "type": "text",
                    "description": "Enter the search query."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                },
                "Insert Documents": {
                  "Table Name": {
                    "type": "text",
                    "description": "Enter the Supabase table to use."
                  }
                },
                "Retrieve Documents (As Vector Store for Chain/Tool)": {
                  "Table Name": {
                    "type": "text",
                    "description": "Enter the Supabase table to use."
                  }
                },
                "Retrieve Documents (As Tool for AI Agent)": {
                  "Name": {
                    "type": "text",
                    "description": "The name of the vector store."
                  },
                  "Description": {
                    "type": "text",
                    "description": "Explain to the LLM what this tool does."
                  },
                  "Table Name": {
                    "type": "text",
                    "description": "Enter the Supabase table to use."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                },
                "Update Documents": {
                  "Table Name": {
                    "type": "text",
                    "description": "Enter the Supabase table to use."
                  },
                  "ID": {
                    "type": "text",
                    "description": "The ID of an embedding entry."
                  }
                }
              }
            }
          },
          "nodeOptions": {
            "Query Name": {
              "type": "text",
              "description": "The name of the matching function you set up in Supabase."
            },
            "Metadata Filter": {
              "type": "json",
              "description": "Filters results based on metadata. For example: {\"foo\": \"bar\"}."
            }
          }
        },
        "n8n-nodes-langchain.vectorstorezep": {
          "title": "Zep Vector Store node documentation",
          "description": "Learn how to use the Zep Vector Store node in n8n. Follow technical documentation to integrate Zep Vector Store node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many",
                "Insert Documents",
                "Retrieve Documents (As Vector Store for Chain/Tool)",
                "Retrieve Documents (As Tool for AI Agent)"
              ],
              "description": "Select the operation mode for the vector store.",
              "subParameters": {
                "Insert Documents": {
                  "Collection Name": {
                    "type": "text",
                    "description": "Enter the collection name to store the data in."
                  }
                },
                "Get Many": {
                  "Collection Name": {
                    "type": "text",
                    "description": "Enter the collection name to retrieve the data from."
                  },
                  "Prompt": {
                    "type": "text",
                    "description": "Enter the search query."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                },
                "Retrieve Documents (As Vector Store for Chain/Tool)": {
                  "Collection Name": {
                    "type": "text",
                    "description": "Enter the collection name to retrieve the data from."
                  }
                },
                "Retrieve Documents (As Tool for AI Agent)": {
                  "Name": {
                    "type": "text",
                    "description": "The name of the vector store."
                  },
                  "Description": {
                    "type": "text",
                    "description": "Explain to the LLM what this tool does."
                  },
                  "Collection Name": {
                    "type": "text",
                    "description": "Enter the collection name to retrieve the data from."
                  },
                  "Limit": {
                    "type": "number",
                    "description": "Enter how many results to retrieve from the vector store."
                  }
                }
              }
            }
          },
          "nodeOptions": {
            "Embedding Dimensions": {
              "type": "number",
              "description": "Must be the same when embedding the data and when querying it."
            },
            "Is Auto Embedded": {
              "type": "boolean",
              "description": "Available in the **Insert Documents** Operation Mode, enabled by default."
            },
            "Metadata Filter": {
              "type": "json",
              "description": "Filters results based on metadata. For example: {\"foo\": \"bar\"}."
            }
          }
        },
        "n8n-nodes-langchain.agent": {
          "common-issues": {
            "title": "AI Agent node common issues",
            "description": "Documentation for common issues and questions in the AI Agent node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical",
            "commonIssues": [
              {
                "title": "Internal error: 400 Invalid value for 'content'",
                "description": "This error can occur if the **Prompt** input contains a null value.",
                "scenarios": [
                  "When you've set the **Prompt** to **Define below** and have an expression in your **Text** that isn't generating a value.",
                  "When you've set the **Prompt** to **Connected Chat Trigger Node** and the incoming data has null values."
                ],
                "resolutions": [
                  "Make sure your expressions reference valid fields and that they resolve to valid input rather than null.",
                  "Remove any null values from the chatInput field of the input node."
                ]
              },
              {
                "title": "Error in sub-node Simple Memory",
                "description": "This error displays when n8n runs into an issue with the [Simple Memory](/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorybufferwindow/index.md) sub-node.",
                "resolutions": [
                  "Try removing the Simple Memory node from your workflow and re-adding it."
                ]
              },
              {
                "title": "A Chat Model sub-node must be connected error",
                "description": "This error displays when n8n tries to execute the node without having a Chat Model connected.",
                "resolutions": [
                  "Click the + Chat Model button at the bottom of your screen when the node is open, or click the Chat Model + connector when the node is closed."
                ]
              },
              {
                "title": "No prompt specified error",
                "description": "This error occurs when the agent expects to get the prompt from the previous node automatically.",
                "resolutions": [
                  "Find the **Prompt** parameter of the AI Agent node and change it from **Connected Chat Trigger Node** to **Define below**."
                ]
              }
            ]
          },
          "conversational-agent": {
            "title": "Conversational AI Agent node documentation",
            "description": "Learn how to use the Conversational Agent of the AI Agent node in n8n. Follow technical documentation to integrate the Conversational Agent into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical",
            "nodeParameters": {
              "Prompt": {
                "type": "select",
                "description": "Choose how to set the prompt for the model. Choose between defining it below or connecting a Chat Trigger node.",
                "values": [
                  "Define below",
                  "Connected Chat Trigger Node"
                ],
                "subParameters": {
                  "Define below": {
                    "Text": {
                      "type": "text",
                      "description": "The prompt text to send to the model. You can use expressions to reference data from previous nodes."
                    }
                  },
                  "Connected Chat Trigger Node": {
                    "description": "The node expects the prompt to be in the chatInput field from the previous node."
                  }
                }
              },
              "Require Specific Output Format": {
                "type": "boolean",
                "description": "Turn on to require the model to respond with a specific output format (for example, JSON).",
                "subParameters": {
                  "Output Parser": {
                    "type": "connection",
                    "description": "Connect an output parser sub-node to define the output format."
                  }
                }
              }
            },
            "nodeOptions": {
              "Human Message": {
                "type": "text",
                "description": "Tell the agent about the tools it can use and add context to the user's input. You must include these expressions and variable: {tools}, {format_instructions}, {{input}}."
              },
              "System Message": {
                "type": "text",
                "description": "Define the system message to send to the model. System messages help set the behavior of the model."
              },
              "Max Iterations": {
                "type": "number",
                "description": "Set the maximum number of iterations the agent will perform before stopping."
              },
              "Return Intermediate Steps": {
                "type": "boolean",
                "description": "Turn on to return intermediate steps in the node output."
              }
            }
          },
          "index": {
            "title": "AI Agent node documentation",
            "description": "Learn how to use the AI Agent node in n8n. Follow technical documentation to integrate AI Agent node into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical"
          },
          "openai-functions-agent": {
            "title": "OpenAI Functions Agent node documentation",
            "description": "Learn how to use the OpenAI Functions Agent of the AI Agent node in n8n. Follow technical documentation to integrate the OpenAI Functions Agent into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical",
            "nodeParameters": {
              "Prompt": {
                "type": "select",
                "description": "Choose how to set the prompt for the model. Choose between defining it below or connecting a Chat Trigger node.",
                "values": [
                  "Define below",
                  "Connected Chat Trigger Node"
                ],
                "subParameters": {
                  "Define below": {
                    "Text": {
                      "type": "text",
                      "description": "The prompt text to send to the model. You can use expressions to reference data from previous nodes."
                    }
                  },
                  "Connected Chat Trigger Node": {
                    "description": "The node expects the prompt to be in the chatInput field from the previous node."
                  }
                }
              },
              "Require Specific Output Format": {
                "type": "boolean",
                "description": "Turn on to require the model to respond with a specific output format (for example, JSON).",
                "subParameters": {
                  "Output Parser": {
                    "type": "connection",
                    "description": "Connect an output parser sub-node to define the output format."
                  }
                }
              }
            },
            "nodeOptions": {
              "System Message": {
                "type": "text",
                "description": "Define the system message to send to the model. System messages help set the behavior of the model."
              },
              "Max Iterations": {
                "type": "number",
                "description": "Set the maximum number of iterations the agent will perform before stopping."
              },
              "Return Intermediate Steps": {
                "type": "boolean",
                "description": "Turn on to return intermediate steps in the node output."
              }
            }
          },
          "plan-execute-agent": {
            "title": "Plan and Execute AI Agent node documentation",
            "description": "Learn how to use the Plan and Execute Agent of the AI Agent node in n8n. Follow technical documentation to integrate the Plan and Execute Agent into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical",
            "nodeParameters": {
              "Prompt": {
                "type": "select",
                "description": "Choose how to set the prompt for the model. Choose between defining it below or connecting a Chat Trigger node.",
                "values": [
                  "Define below",
                  "Connected Chat Trigger Node"
                ],
                "subParameters": {
                  "Define below": {
                    "Text": {
                      "type": "text",
                      "description": "The prompt text to send to the model. You can use expressions to reference data from previous nodes."
                    }
                  },
                  "Connected Chat Trigger Node": {
                    "description": "The node expects the prompt to be in the chatInput field from the previous node."
                  }
                }
              },
              "Require Specific Output Format": {
                "type": "boolean",
                "description": "Turn on to require the model to respond with a specific output format (for example, JSON).",
                "subParameters": {
                  "Output Parser": {
                    "type": "connection",
                    "description": "Connect an output parser sub-node to define the output format."
                  }
                }
              }
            },
            "nodeOptions": {
              "Human Message Template": {
                "type": "text",
                "description": "Enter a message that n8n will send to the agent during each step execution. Available LangChain expressions: {previous_steps}, {current_step}, {agent_scratchpad}."
              }
            }
          },
          "react-agent": {
            "title": "ReAct AI Agent node documentation",
            "description": "Learn how to use the ReAct Agent of the AI Agent node in n8n. Follow technical documentation to integrate the ReAct Agent into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical",
            "nodeParameters": {
              "Prompt": {
                "type": "select",
                "description": "Choose how to set the prompt for the model. Choose between defining it below or connecting a Chat Trigger node.",
                "values": [
                  "Define below",
                  "Connected Chat Trigger Node"
                ],
                "subParameters": {
                  "Define below": {
                    "Text": {
                      "type": "text",
                      "description": "The prompt text to send to the model. You can use expressions to reference data from previous nodes."
                    }
                  },
                  "Connected Chat Trigger Node": {
                    "description": "The node expects the prompt to be in the chatInput field from the previous node."
                  }
                }
              },
              "Require Specific Output Format": {
                "type": "boolean",
                "description": "Turn on to require the model to respond with a specific output format (for example, JSON).",
                "subParameters": {
                  "Output Parser": {
                    "type": "connection",
                    "description": "Connect an output parser sub-node to define the output format."
                  }
                }
              }
            },
            "nodeOptions": {
              "Human Message Template": {
                "type": "text",
                "description": "Use this option to extend the user prompt. Available LangChain expressions: {input}, {agent_scratchpad}."
              },
              "Prefix Message": {
                "type": "text",
                "description": "Enter text to prefix the tools list at the start of the conversation."
              },
              "Suffix Message for Chat Model": {
                "type": "text",
                "description": "Add text to append after the tools list at the start of the conversation when the agent uses a chat model."
              },
              "Suffix Message for Regular Model": {
                "type": "text",
                "description": "Add text to append after the tools list at the start of the conversation when the agent uses a regular/instruct model."
              },
              "Return Intermediate Steps": {
                "type": "boolean",
                "description": "Turn on to return intermediate steps in the node output."
              }
            }
          },
          "sql-agent": {
            "title": "SQL AI Agent node documentation",
            "description": "Learn how to use the SQL Agent of the AI Agent node in n8n. Follow technical documentation to integrate the SQL Agent into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical",
            "nodeParameters": {
              "Data Source": {
                "type": "select",
                "values": [
                  "MySQL",
                  "SQLite",
                  "Postgres"
                ],
                "subParameters": {
                  "MySQL": {
                    "Credential for MySQL": {
                      "type": "credential",
                      "credentialType": "mysql"
                    }
                  },
                  "SQLite": {
                    "Input Binary Field": {
                      "type": "text",
                      "description": "Input Binary Field name of your SQLite file coming from the Read/Write File From Disk node."
                    }
                  },
                  "Postgres": {
                    "Credential for Postgres": {
                      "type": "credential",
                      "credentialType": "postgres"
                    }
                  }
                }
              },
              "Prompt": {
                "type": "select",
                "description": "Choose how to set the prompt for the model. Choose between defining it below or connecting a Chat Trigger node.",
                "values": [
                  "Define below",
                  "Connected Chat Trigger Node"
                ],
                "subParameters": {
                  "Define below": {
                    "Text": {
                      "type": "text",
                      "description": "The prompt text to send to the model. You can use expressions to reference data from previous nodes."
                    }
                  },
                  "Connected Chat Trigger Node": {
                    "description": "The node expects the prompt to be in the chatInput field from the previous node."
                  }
                }
              }
            },
            "nodeOptions": {
              "Ignored Tables": {
                "type": "text",
                "description": "Enter a comma-separated list of tables you'd like it to ignore."
              },
              "Include Sample Rows": {
                "type": "number",
                "description": "Enter the number of sample rows to include in the prompt to the agent. Default is 3."
              },
              "Included Tables": {
                "type": "text",
                "description": "Enter a comma-separated list of tables to include."
              },
              "Prefix Prompt": {
                "type": "text",
                "description": "Enter a message you'd like to send to the agent before the **Prompt** text."
              },
              "Suffix Prompt": {
                "type": "text",
                "description": "Enter a message you'd like to send to the agent after the **Prompt** text. Available LangChain expressions: {chatHistory}, {input}, {agent_scratchpad}."
              },
              "Limit": {
                "type": "number",
                "description": "Enter the maximum number of results to return. Default is 10."
              }
            }
          },
          "tools-agent": {
            "title": "Tools AI Agent node documentation",
            "description": "Learn how to use the Tools Agent of the AI Agent node in n8n. Follow technical documentation to integrate the Tools Agent into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "critical",
            "nodeParameters": {
              "Prompt": {
                "type": "select",
                "description": "Choose how to set the prompt for the model. Choose between defining it below or connecting a Chat Trigger node.",
                "values": [
                  "Define below",
                  "Connected Chat Trigger Node"
                ],
                "subParameters": {
                  "Define below": {
                    "Text": {
                      "type": "text",
                      "description": "The prompt text to send to the model. You can use expressions to reference data from previous nodes."
                    }
                  },
                  "Connected Chat Trigger Node": {
                    "description": "The node expects the prompt to be in the chatInput field from the previous node."
                  }
                }
              },
              "Require Specific Output Format": {
                "type": "boolean",
                "description": "Turn on to require the model to respond with a specific output format (for example, JSON).",
                "subParameters": {
                  "Output Parser": {
                    "type": "connection",
                    "description": "Connect an output parser sub-node to define the output format."
                  }
                }
              }
            },
            "nodeOptions": {
              "System Message": {
                "type": "text",
                "description": "Define the system message to send to the model. System messages help set the behavior of the model."
              },
              "Max Iterations": {
                "type": "number",
                "description": "Set the maximum number of iterations the agent will perform before stopping."
              },
              "Return Intermediate Steps": {
                "type": "boolean",
                "description": "Turn on to return intermediate steps in the node output."
              },
              "Automatically Passthrough Binary Images": {
                "type": "boolean",
                "description": "Automatically pass through binary images from input to output if the agent doesn't use them."
              }
            }
          }
        },
        "n8n-nodes-langchain.chainretrievalqa": {
          "common-issues": {
            "title": "Question and Answer Chain node common issues",
            "description": "Documentation for common issues and questions in the Question and Answer Chain node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "commonIssues": [
              {
                "title": "No prompt specified error",
                "description": "This error displays when the **Prompt** is empty or invalid.",
                "scenarios": [
                  "When you've set the **Prompt** to **Define below** and have an expression in your **Text** that isn't generating a value.",
                  "When you've set the **Prompt** to **Connected Chat Trigger Node** and the incoming data has null values."
                ],
                "resolutions": [
                  "Enter a valid prompt in the **Text** field.",
                  "Make sure any expressions reference valid fields and that they resolve to valid input rather than null.",
                  "Make sure your input contains a chatInput field.",
                  "Add an [Edit Fields (Set)](/integrations/builtin/core-nodes/n8n-nodes-base.set.md) node to edit an incoming field name to chatInput.",
                  "Remove any null values from the chatInput field of the input node."
                ]
              },
              {
                "title": "A Retriever sub-node must be connected error",
                "description": "This error displays when n8n tries to execute the node without having a Retriever connected.",
                "resolutions": [
                  "Click the + Retriever button at the bottom of your screen when the node is open, or click the Retriever + connector when the node isn't open."
                ]
              },
              {
                "title": "Can't produce longer responses",
                "description": "If you need to generate longer responses than the Question and Answer Chain node produces by default.",
                "resolutions": [
                  "Connect a more verbose model.",
                  "Increase the maximum number of tokens.",
                  "Build larger responses in stages."
                ]
              }
            ]
          },
          "index": {
            "title": "Question and Answer Chain node documentation",
            "description": "Learn how to use the Question and Answer Chain node in n8n. Follow technical documentation to integrate Question and Answer Chain node into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "nodeParameters": {
              "Query": {
                "type": "text",
                "description": "The question you want to ask."
              }
            }
          }
        }
      },
      "sub-nodes": {
        "index": {
          "title": "Sub-nodes",
          "description": "Understand sub-nodes in n8n, and browse the sub-nodes library.",
          "contentType": "overview"
        },
        "n8n-nodes-langchain.documentdefaultdataloader": {
          "title": "Default Data Loader node documentation",
          "description": "Learn how to use the Default Data Loader node in n8n. Follow technical documentation to integrate Default Data Loader node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Type of Data": {
              "type": "select",
              "values": [
                "Binary",
                "JSON"
              ]
            },
            "Data Format": {
              "type": "select",
              "values": [
                "Automatically Detect by MIME Type",
                "Text",
                "PDF",
                "HTML",
                "CSV",
                "Markdown"
              ],
              "description": "Displays when you set **Type of Data** to **Binary**. Select the file MIME type for your binary data."
            },
            "Mode": {
              "type": "select",
              "values": [
                "Load All Input Data",
                "Load Specific Data"
              ],
              "description": "Displays when you set **Type of Data** to **JSON**. Choose from:",
              "subParameters": {
                "Load All Input Data": {
                  "description": "Use all the node's input data."
                },
                "Load Specific Data": {
                  "description": "Use [expressions](/code/expressions.md) to define the data you want to load."
                }
              }
            }
          },
          "nodeOptions": {
            "Metadata": {
              "type": "json",
              "description": "Set the metadata that should accompany the document in the vector store."
            }
          }
        },
        "n8n-nodes-langchain.documentgithubloader": {
          "title": "GitHub Document Loader node documentation",
          "description": "Learn how to use the GitHub Document Loader node in n8n. Follow technical documentation to integrate GitHub Document Loader node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Repository Link": {
              "type": "text",
              "description": "Enter the URL of your GitHub repository."
            },
            "Branch": {
              "type": "text",
              "description": "Enter the branch name to use."
            }
          },
          "nodeOptions": {
            "Recursive": {
              "type": "boolean",
              "description": "Select whether to include sub-folders and files (turned on) or not (turned off)."
            },
            "Ignore Paths": {
              "type": "text",
              "description": "Enter directories to ignore."
            }
          }
        },
        "n8n-nodes-langchain.embeddingsawsbedrock": {
          "title": "Embeddings AWS Bedrock node documentation",
          "description": "Learn how to use the Embeddings AWS Bedrock node in n8n. Follow technical documentation to integrate Embeddings AWS Bedrock node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the embedding.",
              "values": [
                "amazon.titan-embed-text-v1"
              ]
            }
          }
        },
        "n8n-nodes-langchain.embeddingsazureopenai": {
          "title": "Embeddings Azure OpenAI node documentation",
          "description": "Learn how to use the Embeddings Azure OpenAI node in n8n. Follow technical documentation to integrate Embeddings Azure OpenAI node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeOptions": {
            "Model (Deployment) Name": {
              "type": "select",
              "description": "Select the model (deployment) to use for generating embeddings."
            },
            "Batch Size": {
              "type": "number",
              "description": "Enter the maximum number of documents to send in each request."
            },
            "Strip New Lines": {
              "type": "boolean",
              "description": "Select whether to remove new line characters from input text (turned on) or not (turned off)."
            },
            "Timeout": {
              "type": "number",
              "description": "Enter the maximum amount of time a request can take in seconds. Set to -1 for no timeout."
            }
          }
        },
        "n8n-nodes-langchain.embeddingscohere": {
          "title": "Embeddings Cohere node documentation",
          "description": "Learn how to use the Embeddings Cohere node in n8n. Follow technical documentation to integrate Embeddings Cohere node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the embedding.",
              "values": [
                "Embed-English-v2.0(4096 Dimensions)",
                "Embed-English-Light-v2.0(1024 Dimensions)",
                "Embed-Multilingual-v2.0(768 Dimensions)"
              ]
            }
          }
        },
        "n8n-nodes-langchain.embeddingsgooglegemini": {
          "title": "Embeddings Google Gemini node documentation",
          "description": "Learn how to use the Embeddings Google Gemini node in n8n. Follow technical documentation to integrate Embeddings Google Gemini node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the embedding.",
              "values": [
                "embedding-001"
              ]
            }
          }
        },
        "n8n-nodes-langchain.embeddingsgooglepalm": {
          "title": "Embeddings Google PaLM node documentation",
          "description": "Learn how to use the Embeddings Google PaLM node in n8n. Follow technical documentation to integrate Embeddings Google PaLM node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the embedding.",
              "values": []
            }
          }
        },
        "n8n-nodes-langchain.embeddingshuggingfaceinference": {
          "title": "Embeddings HuggingFace Inference node documentation",
          "description": "Learn how to use the Embeddings HuggingFace Inference node in n8n. Follow technical documentation to integrate Embeddings HuggingFace Inference node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the embedding.",
              "values": []
            }
          },
          "nodeOptions": {
            "Custom Inference Endpoint": {
              "type": "text",
              "description": "Enter the URL of your deployed model, hosted by HuggingFace."
            }
          }
        },
        "n8n-nodes-langchain.embeddingsmistralcloud": {
          "title": "Embeddings Mistral Cloud node documentation",
          "description": "Learn how to use the Embeddings Mistral Cloud node in n8n. Follow technical documentation to integrate Embeddings Mistral Cloud node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the embedding.",
              "values": [
                "mistral-embed"
              ]
            }
          },
          "nodeOptions": {
            "Batch Size": {
              "type": "number",
              "description": "Enter the maximum number of documents to send in each request."
            },
            "Strip New Lines": {
              "type": "boolean",
              "description": "Select whether to remove new line characters from input text (turned on) or not (turned off)."
            }
          }
        },
        "n8n-nodes-langchain.embeddingsollama": {
          "title": "Embeddings Ollama node documentation",
          "description": "Learn how to use the Embeddings Ollama node in n8n. Follow technical documentation to integrate Embeddings Ollama node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the embedding.",
              "values": [
                "all-minilm",
                "nomic-embed-text"
              ]
            }
          }
        },
        "n8n-nodes-langchain.embeddingsopenai": {
          "title": "Embeddings OpenAI node documentation",
          "description": "Learn how to use the Embeddings OpenAI node in n8n. Follow technical documentation to integrate Embeddings OpenAI node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeOptions": {
            "Model": {
              "type": "select",
              "description": "Select the model to use for generating embeddings."
            },
            "Base URL": {
              "type": "text",
              "description": "Enter the URL to send the request to. Use this if you are using a self-hosted OpenAI-like model."
            },
            "Batch Size": {
              "type": "number",
              "description": "Enter the maximum number of documents to send in each request."
            },
            "Strip New Lines": {
              "type": "boolean",
              "description": "Select whether to remove new line characters from input text (turned on) or not (turned off)."
            },
            "Timeout": {
              "type": "number",
              "description": "Enter the maximum amount of time a request can take in seconds. Set to -1 for no timeout."
            }
          }
        },
        "n8n-nodes-langchain.lmchatanthropic": {
          "title": "Anthropic Chat Model node documentation",
          "description": "Learn how to use the Anthropic Chat Model node in n8n. Follow technical documentation to integrate Anthropic Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model that generates the completion.",
              "values": [
                "Claude",
                "Claude Instant"
              ]
            }
          },
          "nodeOptions": {
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Top K": {
              "type": "number",
              "description": "Enter the number of token choices the model uses to generate the next token."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            }
          }
        },
        "n8n-nodes-langchain.lmchatawsbedrock": {
          "title": "AWS Bedrock Chat Model node documentation",
          "description": "Learn how to use the AWS Bedrock Chat Model node in n8n. Follow technical documentation to integrate AWS Bedrock Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model that generates the completion.",
              "values": [
                "anthropic.claude-v2",
                "anthropic.claude-instant-v1"
              ]
            }
          },
          "nodeOptions": {
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            }
          }
        },
        "n8n-nodes-langchain.lmchatazureopenai": {
          "title": "Azure OpenAI Chat Model node documentation",
          "description": "Learn how to use the Azure OpenAI Chat Model node in n8n. Follow technical documentation to integrate Azure OpenAI Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the completion.",
              "values": []
            }
          },
          "nodeOptions": {
            "Frequency Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model repeating itself."
            },
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Response Format": {
              "type": "select",
              "values": [
                "Text",
                "JSON"
              ],
              "description": "Choose **Text** or **JSON**. **JSON** ensures the model returns valid JSON."
            },
            "Presence Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model talking about new topics."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Timeout": {
              "type": "number",
              "description": "Enter the maximum request time in milliseconds."
            },
            "Max Retries": {
              "type": "number",
              "description": "Enter the maximum number of times to retry a request."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            }
          }
        },
        "n8n-nodes-langchain.lmchatdeepseek": {
          "title": "DeepSeek Chat Model node documentation",
          "description": "Learn how to use the DeepSeek Chat Model node in n8n. Follow technical documentation to integrate DeepSeek Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the completion.",
              "values": []
            }
          },
          "nodeOptions": {
            "Base URL": {
              "type": "text",
              "description": "Enter a URL here to override the default URL for the API."
            },
            "Frequency Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model repeating itself."
            },
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Response Format": {
              "type": "select",
              "values": [
                "Text",
                "JSON"
              ],
              "description": "Choose **Text** or **JSON**. **JSON** ensures the model returns valid JSON."
            },
            "Presence Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model talking about new topics."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Timeout": {
              "type": "number",
              "description": "Enter the maximum request time in milliseconds."
            },
            "Max Retries": {
              "type": "number",
              "description": "Enter the maximum number of times to retry a request."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            }
          }
        },
        "n8n-nodes-langchain.lmchatgooglegemini": {
          "title": "Google Gemini Chat Model node documentation",
          "description": "Learn how to use the Google Gemini Chat Model node in n8n. Follow technical documentation to integrate Google Gemini Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the completion.",
              "values": []
            }
          },
          "nodeOptions": {
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Top K": {
              "type": "number",
              "description": "Enter the number of token choices the model uses to generate the next token."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            },
            "Safety Settings": {
              "type": "json",
              "description": "Gemini supports adjustable safety settings."
            }
          }
        },
        "n8n-nodes-langchain.lmchatgooglevertex": {
          "title": "Google Vertex Chat Model node documentation",
          "description": "Learn how to use the Google Vertex Chat Model node in n8n. Follow technical documentation to integrate Google Vertex Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Project ID": {
              "type": "select | text",
              "description": "Select the project ID from your Google Cloud account to use."
            },
            "Model Name": {
              "type": "select",
              "description": "Select the name of the model to use to generate the completion.",
              "values": []
            }
          },
          "nodeOptions": {
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Top K": {
              "type": "number",
              "description": "Enter the number of token choices the model uses to generate the next token."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            },
            "Safety Settings": {
              "type": "json",
              "description": "Gemini supports adjustable safety settings."
            }
          }
        },
        "n8n-nodes-langchain.lmchatgroq": {
          "title": "Groq Chat Model node documentation",
          "description": "Learn how to use the Groq Chat Model node in n8n. Follow technical documentation to integrate Groq Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model which will generate the completion.",
              "values": []
            }
          },
          "nodeOptions": {
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            }
          }
        },
        "n8n-nodes-langchain.lmchatmistralcloud": {
          "title": "Mistral Cloud Chat Model node documentation",
          "description": "Learn how to use the Mistral Cloud Chat Model node in n8n. Follow technical documentation to integrate Mistral Cloud Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the completion.",
              "values": [
                "mistral-tiny",
                "mistral-small",
                "mistral-medium"
              ]
            }
          },
          "nodeOptions": {
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Timeout": {
              "type": "number",
              "description": "Enter the maximum request time in milliseconds."
            },
            "Max Retries": {
              "type": "number",
              "description": "Enter the maximum number of times to retry a request."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            },
            "Enable Safe Mode": {
              "type": "boolean",
              "description": "Enable safe mode by injecting a safety prompt at the beginning of the completion."
            },
            "Random Seed": {
              "type": "number",
              "description": "Enter a seed to use for random sampling. If set, different calls will generate deterministic results."
            }
          }
        },
        "n8n-nodes-langchain.lmchatopenrouter": {
          "title": "OpenRouter Chat Model node documentation",
          "description": "Learn how to use the OpenRouter Chat Model node in n8n. Follow technical documentation to integrate OpenRouter Chat Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the completion.",
              "values": []
            }
          },
          "nodeOptions": {
            "Base URL": {
              "type": "text",
              "description": "Enter a URL here to override the default URL for the API."
            },
            "Frequency Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model repeating itself."
            },
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Response Format": {
              "type": "select",
              "values": [
                "Text",
                "JSON"
              ],
              "description": "Choose **Text** or **JSON**. **JSON** ensures the model returns valid JSON."
            },
            "Presence Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model talking about new topics."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Timeout": {
              "type": "number",
              "description": "Enter the maximum request time in milliseconds."
            },
            "Max Retries": {
              "type": "number",
              "description": "Enter the maximum number of times to retry a request."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            }
          }
        },
        "n8n-nodes-langchain.lmcohere": {
          "title": "Cohere Model node documentation",
          "description": "Learn how to use the Cohere Model node in n8n. Follow technical documentation to integrate Cohere Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeOptions": {
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            }
          }
        },
        "n8n-nodes-langchain.lmopenhuggingfaceinference": {
          "title": "Hugging Face Inference Model node documentation",
          "description": "Learn how to use the Hugging Face Inference Model node in n8n. Follow technical documentation to integrate Hugging Face Inference Model node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Model": {
              "type": "select",
              "description": "Select the model to use to generate the completion.",
              "values": []
            }
          },
          "nodeOptions": {
            "Custom Inference Endpoint": {
              "type": "text",
              "description": "Enter a custom inference endpoint URL."
            },
            "Frequency Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model repeating itself."
            },
            "Maximum Number of Tokens": {
              "type": "number",
              "description": "Enter the maximum number of tokens used, which sets the completion length."
            },
            "Presence Penalty": {
              "type": "number",
              "description": "Use this option to control the chances of the model talking about new topics."
            },
            "Sampling Temperature": {
              "type": "number",
              "description": "Use this option to control the randomness of the sampling process."
            },
            "Top K": {
              "type": "number",
              "description": "Enter the number of token choices the model uses to generate the next token."
            },
            "Top P": {
              "type": "number",
              "description": "Use this option to set the probability the completion should use."
            }
          }
        },
        "n8n-nodes-langchain.memorymanager": {
          "title": "Chat Memory Manager node documentation",
          "description": "Learn how to use the Chat Memory Manager node in n8n. Follow technical documentation to integrate Chat Memory Manager node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Operation Mode": {
              "type": "select",
              "values": [
                "Get Many Messages",
                "Insert Messages",
                "Delete Messages"
              ]
            },
            "Insert Mode": {
              "type": "select",
              "values": [
                "Insert Messages",
                "Override All Messages"
              ],
              "description": "Available in **Insert Messages** mode."
            },
            "Delete Mode": {
              "type": "select",
              "values": [
                "Last N",
                "All Messages"
              ],
              "description": "available in **Delete Messages** mode."
            },
            "Chat Messages": {
              "type": "collection",
              "description": "available in **Insert Messages** mode.",
              "fields": {
                "Type Name or ID": {
                  "type": "select",
                  "values": [
                    "AI",
                    "System",
                    "User"
                  ]
                },
                "Message": {
                  "type": "text",
                  "description": "Enter the message contents."
                },
                "Hide Message in Chat": {
                  "type": "boolean",
                  "description": "Select whether n8n should display the message to the user in the chat UI (turned off) or not (turned on)."
                }
              }
            },
            "Messages Count": {
              "type": "number",
              "description": "Available in **Delete Messages** mode when you select **Last N**. Enter the number of latest messages to delete."
            },
            "Simplify Output": {
              "type": "boolean",
              "description": "Available in **Get Many Messages** mode. Turn on to simplify the output to include only the sender (AI, user, or system) and the text."
            }
          }
        },
        "n8n-nodes-langchain.memorymotorhead": {
          "title": "Motorhead node documentation",
          "description": "Learn how to use the Motorhead node in n8n. Follow technical documentation to integrate Motorhead node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Session ID": {
              "type": "text",
              "description": "Enter the ID to use to store the memory in the workflow data."
            }
          }
        },
        "n8n-nodes-langchain.memorypostgreschat": {
          "title": "Postgres Chat Memory node documentation",
          "description": "Learn how to use the Postgres Chat Memory node in n8n. Follow technical documentation to integrate Postgres Chat Memory node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Session Key": {
              "type": "text",
              "description": "Enter the key to use to store the memory in the workflow data."
            },
            "Table Name": {
              "type": "text",
              "description": "Enter the name of the table to store the chat history in."
            },
            "Context Window Length": {
              "type": "number",
              "description": "Enter the number of previous interactions to consider for context."
            }
          }
        },
        "n8n-nodes-langchain.memoryredischat": {
          "title": "Redis Chat Memory node documentation",
          "description": "Learn how to use the Redis Chat Memory node in n8n. Follow technical documentation to integrate Redis Chat Memory node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Session Key": {
              "type": "text",
              "description": "Enter the key to use to store the memory in the workflow data."
            },
            "Session Time To Live": {
              "type": "number",
              "description": "Use this parameter to make the session expire after a given number of seconds."
            },
            "Context Window Length": {
              "type": "number",
              "description": "Enter the number of previous interactions to consider for context."
            }
          }
        },
        "n8n-nodes-langchain.memoryxata": {
          "title": "Xata node documentation",
          "description": "Learn how to use the Xata node in n8n. Follow technical documentation to integrate Xata node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Session ID": {
              "type": "text",
              "description": "Enter the ID to use to store the memory in the workflow data."
            },
            "Context Window Length": {
              "type": "number",
              "description": "Enter the number of previous interactions to consider for context."
            }
          }
        },
        "n8n-nodes-langchain.memoryzep": {
          "title": "Zep node documentation",
          "description": "Learn how to use the Zep node in n8n. Follow technical documentation to integrate Zep node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Session ID": {
              "type": "text",
              "description": "Enter the ID to use to store the memory in the workflow data."
            }
          }
        },
        "n8n-nodes-langchain.outputparserautofixing": {
          "title": "Auto-fixing Output Parser node documentation",
          "description": "Learn how to use the Auto-fixing Output Parser node in n8n. Follow technical documentation to integrate Auto-fixing Output Parser node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium"
        },
        "n8n-nodes-langchain.outputparseritemlist": {
          "title": "Item List Output Parser node documentation",
          "description": "Learn how to use the Item List Output Parser node in n8n. Follow technical documentation to integrate Item List Output Parser node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeOptions": {
            "Number of Items": {
              "type": "number",
              "description": "Enter the maximum items to return. Set to -1 for unlimited items."
            },
            "Separator": {
              "type": "select",
              "description": "Select the separator used to split the results into separate items.",
              "values": [
                "New Line",
                "Comma"
              ]
            }
          }
        },
        "n8n-nodes-langchain.retrievercontextualcompression": {
          "title": "Contextual Compression Retriever node documentation",
          "description": "Learn how to use the Contextual Compression Retriever node in n8n. Follow technical documentation to integrate Contextual Compression Retriever node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium"
        },
        "n8n-nodes-langchain.retrievermultiquery": {
          "title": "MultiQuery Retriever node documentation",
          "description": "Learn how to use the MultiQuery Retriever node in n8n. Follow technical documentation to integrate MultiQuery Retriever node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeOptions": {
            "Query Count": {
              "type": "number",
              "description": "Enter how many different versions of the query to generate."
            }
          }
        },
        "n8n-nodes-langchain.retrievervectorstore": {
          "title": "Vector Store Retriever node documentation",
          "description": "Learn how to use the Vector Store Retriever node in n8n. Follow technical documentation to integrate Vector Store Retriever node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Limit": {
              "type": "number",
              "description": "Enter the maximum number of results to return."
            }
          }
        },
        "n8n-nodes-langchain.retrieverworkflow": {
          "title": "Workflow Retriever node documentation",
          "description": "Learn how to use the Workflow Retriever node in n8n. Follow technical documentation to integrate Workflow Retriever node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Source": {
              "type": "select",
              "values": [
                "Database",
                "Parameter"
              ],
              "subParameters": {
                "Database": {
                  "Workflow ID": {
                    "type": "text",
                    "description": "Enter a workflow ID."
                  }
                },
                "Parameter": {
                  "Workflow JSON": {
                    "type": "json",
                    "description": "Copy in a complete [workflow JSON](/workflows/export-import.md)."
                  }
                }
              }
            },
            "Workflow values": {
              "type": "json",
              "description": "Values you want to pass to the workflow you're calling. Use this to pass data into the workflow."
            }
          }
        },
        "n8n-nodes-langchain.textsplittercharactertextsplitter": {
          "title": "Character Text Splitter node documentation",
          "description": "Learn how to use the Character Text Splitter node in n8n. Follow technical documentation to integrate Character Text Splitter node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Separator": {
              "type": "select",
              "description": "Select the separator used to split the document into separate items.",
              "values": [
                "New Line",
                "Space",
                "Tab",
                "Custom"
              ],
              "subParameters": {
                "Custom": {
                  "Custom Separator": {
                    "type": "text",
                    "description": "Enter a custom separator."
                  }
                }
              }
            },
            "Chunk Size": {
              "type": "number",
              "description": "Enter the number of characters in each chunk."
            },
            "Chunk Overlap": {
              "type": "number",
              "description": "Enter how much overlap to have between chunks."
            }
          }
        },
        "n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter": {
          "title": "Recursive Character Text Splitter node documentation",
          "description": "Learn how to use the Recursive Character Text Splitter node in n8n. Follow technical documentation to integrate Recursive Character Text Splitter node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Chunk Size": {
              "type": "number",
              "description": "Enter the number of characters in each chunk."
            },
            "Chunk Overlap": {
              "type": "number",
              "description": "Enter how much overlap to have between chunks."
            }
          }
        },
        "n8n-nodes-langchain.textsplittertokensplitter": {
          "title": "Token Splitter node documentation",
          "description": "Learn how to use the Token Splitter node in n8n. Follow technical documentation to integrate Token Splitter node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium",
          "nodeParameters": {
            "Chunk Size": {
              "type": "number",
              "description": "Enter the number of characters in each chunk."
            },
            "Chunk Overlap": {
              "type": "number",
              "description": "Enter how much overlap to have between chunks."
            }
          }
        },
        "n8n-nodes-langchain.toolcalculator": {
          "title": "Calculator node documentation",
          "description": "Learn how to use the Calculator node in n8n. Follow technical documentation to integrate Calculator node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high"
        },
        "n8n-nodes-langchain.toolcode": {
          "title": "Custom Code Tool node documentation",
          "description": "Learn how to use the Custom Code Tool node in n8n. Follow technical documentation to integrate Custom Code Tool node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeParameters": {
            "Name": {
              "type": "text",
              "description": "Give your custom code a name. It can't contain whitespace."
            },
            "Description": {
              "type": "text",
              "description": "Give your custom code a description. This tells the agent when to use this tool."
            },
            "Language": {
              "type": "select",
              "values": [
                "JavaScript",
                "Python"
              ]
            },
            "JavaScript / Python box": {
              "type": "code",
              "description": "Write the code here."
            }
          }
        },
        "n8n-nodes-langchain.toolhttprequest": {
          "title": "HTTP Request Tool node documentation",
          "description": "Learn how to use the HTTP Request Tool node in n8n. Follow technical documentation to integrate HTTP Request Tool node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ]
        },
        "n8n-nodes-langchain.toolserpapi": {
          "title": "SerpApi (Google Search) node documentation",
          "description": "Learn how to use the SerpApi (Google Search) node in n8n. Follow technical documentation to integrate SerpApi (Google Search) node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeOptions": {
            "Country": {
              "type": "text",
              "description": "Enter the country code you'd like to use."
            },
            "Device": {
              "type": "select",
              "values": [
                "Desktop",
                "Mobile"
              ]
            },
            "Explicit Array": {
              "type": "boolean",
              "description": "Choose whether to force SerpApi to fetch the Google results even if a cached version is already present (turned on) or not (turned off)."
            },
            "Google Domain": {
              "type": "text",
              "description": "Enter the Google Domain to use."
            },
            "Language": {
              "type": "text",
              "description": "Enter the language code you'd like to use."
            }
          }
        },
        "n8n-nodes-langchain.toolvectorstore": {
          "title": "Vector Store Question Answer Tool node documentation",
          "description": "Learn how to use the Vector Store Question Answer Tool node in n8n. Follow technical documentation to integrate Vector Store Question Answer Tool node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "nodeParameters": {
            "Data Name": {
              "type": "text",
              "description": "Enter the name of the data in the vector store."
            },
            "Description of Data": {
              "type": "text",
              "description": "Enter a description of the data in the vector store."
            },
            "Limit": {
              "type": "number",
              "description": "The maximum number of results to return."
            }
          }
        },
        "n8n-nodes-langchain.toolwikipedia": {
          "title": "Wikipedia node documentation",
          "description": "Learn how to use the Wikipedia node in n8n. Follow technical documentation to integrate Wikipedia node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium"
        },
        "n8n-nodes-langchain.toolwolframalpha": {
          "title": "Wolfram|Alpha tool node documentation",
          "description": "Learn how to use the Wolfram|Alpha tool node in n8n. Follow technical documentation to integrate Wolfram|Alpha tool node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "medium"
        },
        "n8n-nodes-langchain.toolworkflow": {
          "title": "Custom n8n Workflow Tool node documentation",
          "description": "Learn how to use the Custom n8n Workflow Tool node in n8n. Follow technical documentation to integrate Custom n8n Workflow Tool node into your workflows.",
          "contentType": [
            "integration",
            "reference"
          ],
          "priority": "high",
          "nodeParameters": {
            "Name": {
              "type": "text",
              "description": "Enter a name for your custom code. It can't contain whitespace or special characters."
            },
            "Description": {
              "type": "text",
              "description": "Enter a custom code a description. This tells the agent when to use this tool."
            },
            "Source": {
              "type": "select",
              "values": [
                "Database",
                "Parameter"
              ],
              "subParameters": {
                "Database": {
                  "Workflow ID": {
                    "type": "text",
                    "description": "Enter a workflow ID."
                  }
                },
                "Parameter": {
                  "Workflow JSON": {
                    "type": "json",
                    "description": "Copy in a complete [workflow JSON](/workflows/export-import.md)."
                  }
                }
              }
            },
            "Workflow Values": {
              "type": "json",
              "description": "Values you want to pass to the workflow you're calling. Use this to pass data into the workflow."
            },
            "Specify input schema": {
              "type": "boolean",
              "description": "Enable this option to define the input schema for the workflow you're calling.",
              "subParameters": {
                "Schema Type": {
                  "type": "select",
                  "values": [
                    "From Attribute Description",
                    "Generate From JSON Example",
                    "Define Below"
                  ],
                  "description": "Define the input structure and validation.",
                  "subParameters": {
                    "From Attribute Description": {
                      "description": "This option allows you to define the schema by specifying the list of attributes and their descriptions."
                    },
                    "Generate From JSON Example": {
                      "description": "Input an example JSON object to automatically generate the schema. The node uses the object property types and names. It ignores the actual values."
                    },
                    "Define Below": {
                      "description": "Manually input the JSON schema. Read the JSON Schema [guides and examples](https://json-schema.org/learn/miscellaneous-examples){:target=_blank .external-link} for help creating a valid JSON schema."
                    }
                  }
                }
              }
            }
          }
        },
        "n8n-nodes-langchain.lmchatollama": {
          "common-issues": {
            "title": "Ollama Chat Model node common issues",
            "description": "Documentation for common issues and questions in the Ollama Chat Model node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "commonIssues": [
              {
                "title": "Processing parameters",
                "description": "The Ollama Chat Model node is a [sub-node](/glossary.md#sub-node-n8n). Sub-nodes behave differently than other nodes when processing multiple items using expressions."
              },
              {
                "title": "Can't connect to a remote Ollama instance",
                "description": "The Ollama Chat Model node is only designed to connect to a locally hosted Ollama instance."
              },
              {
                "title": "Can't connect to a local Ollama instance when using Docker",
                "description": "The Ollama Chat Model node connects to a locally hosted Ollama instance using the base URL defined by [Ollama credentials](/integrations/builtin/credentials/ollama.md)."
              },
              {
                "title": "Error: connect ECONNREFUSED ::1:11434",
                "description": "This error occurs when your computer has IPv6 enabled, but Ollama is listening to an IPv4 address."
              }
            ]
          },
          "index": {
            "title": "Ollama Chat Model node documentation",
            "description": "Learn how to use the Ollama Chat Model node in n8n. Follow technical documentation to integrate Ollama Chat Model node into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "nodeParameters": {
              "Model": {
                "type": "select",
                "description": "Select the model that generates the completion.",
                "values": [
                  "Llama2",
                  "Llama2 13B",
                  "Llama2 70B",
                  "Llama2 Uncensored"
                ]
              }
            },
            "nodeOptions": {
              "Sampling Temperature": {
                "type": "number",
                "description": "Use this option to control the randomness of the sampling process."
              },
              "Top K": {
                "type": "number",
                "description": "Enter the number of token choices the model uses to generate the next token."
              },
              "Top P": {
                "type": "number",
                "description": "Use this option to set the probability the completion should use."
              }
            }
          }
        },
        "n8n-nodes-langchain.lmchatopenai": {
          "common-issues": {
            "title": "OpenAI Chat Model node common issues",
            "description": "Documentation for common issues and questions in the OpenAI Chat Model node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "commonIssues": [
              {
                "title": "Processing parameters",
                "description": "The OpenAI Chat Model node is a [sub-node](/glossary.md#sub-node-n8n). Sub-nodes behave differently than other nodes when processing multiple items using expressions."
              }
            ]
          },
          "index": {
            "title": "OpenAI Chat Model node documentation",
            "description": "Learn how to use the OpenAI Chat Model node in n8n. Follow technical documentation to integrate OpenAI Chat Model node into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "nodeParameters": {
              "Model": {
                "type": "select",
                "description": "Select the model to use to generate the completion.",
                "values": []
              }
            },
            "nodeOptions": {
              "Base URL": {
                "type": "text",
                "description": "Enter a URL here to override the default URL for the API."
              },
              "Frequency Penalty": {
                "type": "number",
                "description": "Use this option to control the chances of the model repeating itself."
              },
              "Maximum Number of Tokens": {
                "type": "number",
                "description": "Enter the maximum number of tokens used, which sets the completion length."
              },
              "Response Format": {
                "type": "select",
                "values": [
                  "Text",
                  "JSON"
                ],
                "description": "Choose **Text** or **JSON**. **JSON** ensures the model returns valid JSON."
              },
              "Presence Penalty": {
                "type": "number",
                "description": "Use this option to control the chances of the model talking about new topics."
              },
              "Sampling Temperature": {
                "type": "number",
                "description": "Use this option to control the randomness of the sampling process."
              },
              "Timeout": {
                "type": "number",
                "description": "Enter the maximum request time in milliseconds."
              },
              "Max Retries": {
                "type": "number",
                "description": "Enter the maximum number of times to retry a request."
              },
              "Top P": {
                "type": "number",
                "description": "Use this option to set the probability the completion should use."
              }
            }
          }
        },
        "n8n-nodes-langchain.lmollama": {
          "common-issues": {
            "title": "Ollama Model node common issues",
            "description": "Documentation for common issues and questions in the Ollama Model node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "commonIssues": [
              {
                "title": "Processing parameters",
                "description": "The Ollama Model node is a [sub-node](/glossary.md#sub-node-n8n). Sub-nodes behave differently than other nodes when processing multiple items using expressions."
              },
              {
                "title": "Can't connect to a remote Ollama instance",
                "description": "The Ollama Model node is only designed to connect to a locally hosted Ollama instance."
              },
              {
                "title": "Can't connect to a local Ollama instance when using Docker",
                "description": "The Ollama Model node connects to a locally hosted Ollama instance using the base URL defined by [Ollama credentials](/integrations/builtin/credentials/ollama.md)."
              },
              {
                "title": "Error: connect ECONNREFUSED ::1:11434",
                "description": "This error occurs when your computer has IPv6 enabled, but Ollama is listening to an IPv4 address."
              }
            ]
          },
          "index": {
            "title": "Ollama Model node documentation",
            "description": "Learn how to use the Ollama Model node in n8n. Follow technical documentation to integrate Ollama Model node into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "nodeParameters": {
              "Model": {
                "type": "select",
                "description": "Select the model that generates the completion.",
                "values": [
                  "Llama2",
                  "Llama2 13B",
                  "Llama2 70B",
                  "Llama2 Uncensored"
                ]
              }
            },
            "nodeOptions": {
              "Sampling Temperature": {
                "type": "number",
                "description": "Use this option to control the randomness of the sampling process."
              },
              "Top K": {
                "type": "number",
                "description": "Enter the number of token choices the model uses to generate the next token."
              },
              "Top P": {
                "type": "number",
                "description": "Use this option to set the probability the completion should use."
              }
            }
          }
        },
        "n8n-nodes-langchain.memorybufferwindow": {
          "common-issues": {
            "title": "Simple Memory node common issues",
            "description": "Documentation for common issues and questions in the Simple Memory node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "commonIssues": [
              {
                "title": "Single memory instance",
                "description": "If you add more than one Simple Memory node to your workflow, all nodes access the same memory instance by default."
              },
              {
                "title": "Managing the Session ID",
                "description": "In most cases, the sessionId is automatically retrieved from the **On Chat Message** trigger."
              }
            ]
          },
          "index": {
            "title": "Simple Memory node documentation",
            "description": "Learn how to use the Simple Memory node in n8n. Follow technical documentation to integrate Simple Memory node into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "nodeParameters": {
              "Session Key": {
                "type": "text",
                "description": "Enter the key to use to store the memory in the workflow data."
              },
              "Context Window Length": {
                "type": "number",
                "description": "Enter the number of previous interactions to consider for context."
              }
            }
          }
        },
        "n8n-nodes-langchain.outputparserstructured": {
          "common-issues": {
            "title": "Structured Output Parser node common issues",
            "description": "Documentation for common issues and questions in the Structured Output Parser node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "commonIssues": [
              {
                "title": "Processing parameters",
                "description": "The Structured Output Parser node is a [sub-node](/glossary.md#sub-node-n8n). Sub-nodes behave differently than other nodes when processing multiple items using expressions."
              },
              {
                "title": "Adding the structured output parser node to AI nodes",
                "description": "You can attach output parser nodes to select [AI root nodes](/integrations/builtin/cluster-nodes/root-nodes/index.md)."
              },
              {
                "title": "Using the structured output parser to format intermediary steps",
                "description": "The Structured Output Parser node structures the final output from AI agents. It's not intended to structure intermediary output to pass to other AI tools or stages."
              },
              {
                "title": "Structuring output from agents",
                "description": "Structured output parsing is often not reliable when working with [agents](/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/index.md)."
              }
            ]
          },
          "index": {
            "title": "Structured Output Parser node documentation",
            "description": "Learn how to use the Structured Output Parser node in n8n. Follow technical documentation to integrate Structured Output Parser node into your workflows.",
            "contentType": [
              "integration",
              "reference"
            ],
            "priority": "high",
            "nodeParameters": {
              "Schema Type": {
                "type": "select",
                "values": [
                  "From Attribute Description",
                  "Generate From JSON Example",
                  "Define Below"
                ],
                "description": "Define the output structure and validation.",
                "subParameters": {
                  "From Attribute Description": {
                    "description": "This option allows you to define the schema by specifying the list of attributes and their descriptions."
                  },
                  "Generate From JSON Example": {
                    "description": "Input an example JSON object to automatically generate the schema. The node uses the object property types and names. It ignores the actual values."
                  },
                  "Define Below": {
                    "description": "Manually input the JSON schema. Read the JSON Schema [guides and examples](https://json-schema.org/learn/miscellaneous-examples){:target=_blank .external-link} for help creating a valid JSON schema."
                  }
                }
              }
            }
          }
        }
      }
    }
  }


================================================
File: core-nodes.json
================================================
{
  "core-nodes": {
    "index": {
      "contentType": "overview",
      "title": "Core nodes library",
      "description": "This section provides information about n8n's core nodes."
    },
    "n8n-nodes-base.activationtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "Activation Trigger node",
      "description": "The Activation Trigger node gets triggered when an event gets fired by n8n or a workflow.",
      "deprecated": true,
      "warning": "n8n has deprecated the Activation Trigger node and replaced it with two new nodes: the [n8n Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.n8ntrigger.md) and the [Workflow Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.workflowtrigger.md). For more details, check out the entry in the [breaking changes](https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#01170) page.",
      "note": "If you want to use the Activation Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow.",
      "parameters": {
        "Events": {
          "type": "select",
          "options": [
            "Activation",
            "Start",
            "Update"
          ],
          "description": "Events to trigger on",
          "details": {
            "Activation": "Run when the workflow gets activated",
            "Start": "Run when n8n starts or restarts",
            "Update": "Run when the workflow gets saved while it's active"
          }
        }
      }
    },
    "n8n-nodes-base.aggregate": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Aggregate",
      "description": "Use the Aggregate node to take separate items, or portions of them, and group them together into individual items.",
      "parameters": {
        "Aggregate": {
          "type": "select",
          "options": [
            "Individual Fields",
            "All Item Data"
          ],
          "description": "Aggregation type"
        },
        "Individual Fields": {
          "parameters": {
            "Input Field Name": {
              "type": "string",
              "description": "Name of the field in the input data to aggregate"
            },
            "Rename Field": {
              "type": "boolean",
              "description": "Toggle to rename the field in the aggregated output",
              "parameters": {
                "Output Field Name": {
                  "type": "string",
                  "description": "Field name for the aggregated output data"
                }
              }
            }
          }
        },
        "All Item Data": {
          "parameters": {
            "Put Output in Field": {
              "type": "string",
              "description": "Name of the field to output the data in"
            },
            "Include": {
              "type": "select",
              "options": [
                "All fields",
                "Specified Fields",
                "All Fields Except"
              ],
              "description": "Fields to include in output",
              "details": {
                "Specified Fields": {
                  "parameters": {
                    "Fields To Include": {
                      "type": "string",
                      "description": "Comma-separated list of fields to include"
                    }
                  }
                },
                "All Fields Except": {
                  "parameters": {
                    "Fields To Exclude": {
                      "type": "string",
                      "description": "Comma-separated list of fields to exclude"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disallow referencing child fields using parent.child (Individual Fields Aggregate only)"
        },
        "Merge Lists": {
          "type": "boolean",
          "description": "Output a single flat list rather than a list of lists (Individual Fields Aggregate only)"
        },
        "Include Binaries": {
          "type": "boolean",
          "description": "Include binary data from the input in the new output"
        },
        "Keep Missing And Null Values": {
          "type": "boolean",
          "description": "Add a null entry in the output list for null/missing input values (Individual Fields Aggregate only)"
        }
      }
    },
    "n8n-nodes-base.aitransform": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "AI Transform",
      "description": "Use the AI Transform node to generate code snippets based on your prompt. The AI is context-aware, understanding the workflowÃ¢â‚¬â„¢s nodes and their data types.",
      "featureAvailability": "Available only on Cloud plans.",
      "parameters": {
        "Instructions": {
          "type": "string",
          "description": "Prompt for the AI (max 500 characters)"
        },
        "Transformation Code": {
          "type": "code",
          "description": "Generated code snippet (read-only)"
        }
      }
    },
    "n8n-nodes-base.comparedatasets": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Compare Datasets",
      "description": "The Compare Datasets node helps you compare data from two input streams.",
      "parameters": {
        "Input A Field": {
          "type": "string",
          "description": "Field from input stream A to compare"
        },
        "Input B Field": {
          "type": "string",
          "description": "Field from input stream B to compare"
        },
        "Add Fields to Match": {
          "type": "repeatable",
          "description": "Add more fields to compare",
          "template": {
            "Input A Field": {
              "type": "string",
              "description": "Field from input stream A to compare"
            },
            "Input B Field": {
              "type": "string",
              "description": "Field from input stream B to compare"
            }
          }
        },
        "When There Are Differences": {
          "type": "select",
          "options": [
            "Use Input A Version",
            "Use Input B Version",
            "Use a Mix of Versions",
            "Include Both Versions"
          ],
          "description": "How to handle differences between datasets",
          "details": {
            "Use a Mix of Versions": {
              "parameters": {
                "Prefer": {
                  "type": "select",
                  "options": [
                    "Input A Version",
                    "Input B Version"
                  ],
                  "description": "Main source of truth"
                },
                "For Everything Except": {
                  "type": "string",
                  "description": "Comma-separated list of input fields to pull from the other input source"
                }
              }
            }
          }
        },
        "Fuzzy Compare": {
          "type": "boolean",
          "description": "Tolerate small type differences when comparing fields"
        }
      },
      "options": {
        "Fields to Skip Comparing": {
          "type": "string",
          "description": "Comma-separated list of field names to ignore in comparison"
        },
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disallow referencing child fields using parent.child"
        },
        "Multiple Matches": {
          "type": "select",
          "options": [
            "Include All Matches",
            "Include First Match Only"
          ],
          "description": "How to handle duplicate data"
        }
      },
      "output": {
        "In A only Branch": "Data only in input A",
        "Same Branch": "Data same in both inputs",
        "Different Branch": "Data different between inputs",
        "In B only Branch": "Data only in input B"
      }
    },
    "n8n-nodes-base.compression": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Compression",
      "description": "Use the Compression node to compress and decompress files. Supports Zip and Gzip formats.",
      "parameters": {
        "Operation": {
          "type": "select",
          "options": [
            "Compress",
            "Decompress"
          ],
          "description": "Operation to perform"
        },
        "Compress": {
          "parameters": {
            "Input Binary Field(s)": {
              "type": "string",
              "description": "Comma-separated list of binary fields to compress"
            },
            "Output Format": {
              "type": "select",
              "options": [
                "Zip",
                "Gzip"
              ],
              "description": "Format of the compressed output"
            },
            "File Name": {
              "type": "string",
              "description": "Name of the zip file"
            },
            "Put Output File in Field": {
              "type": "string",
              "description": "Field in the output data to contain the file"
            }
          }
        },
        "Decompress": {
          "parameters": {
            "Put Output File in Field": {
              "type": "string",
              "description": "Comma-separated list of binary fields to decompress"
            },
            "Output Prefix": {
              "type": "string",
              "description": "Prefix to add to the output file name"
            }
          }
        }
      }
    },
    "n8n-nodes-base.converttofile": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Convert to File",
      "description": "Use the Convert to File node to take input data and output it as a file. This converts the input JSON data into a binary format.",
      "note": "To extract data from a file and convert it to JSON, use the [Extract from File](/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile.md) node.",
      "operations": [
        "Convert to CSV",
        "Convert to HTML",
        "Convert to ICS",
        "Convert to JSON",
        "Convert to ODS",
        "Convert to RTF",
        "Convert to Text File",
        "Convert to XLS",
        "Convert to XLSX",
        "Move Base64 String to File"
      ],
      "Convert to CSV": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          }
        }
      },
      "Convert to HTML": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          }
        }
      },
      "Convert to ICS": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          },
          "Event Title": {
            "type": "string",
            "description": "Title for the event"
          },
          "Start": {
            "type": "datetime",
            "description": "Date and time event will start"
          },
          "End": {
            "type": "datetime",
            "description": "Date and time event will end (uses start date if unset)"
          },
          "All Day": {
            "type": "boolean",
            "description": "Event is all day event"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Attendees": {
            "type": "repeatable",
            "description": "Add attendees to the event",
            "template": {
              "Name": {
                "type": "string",
                "description": "Attendee name"
              },
              "Email": {
                "type": "email",
                "description": "Attendee email"
              },
              "RSVP": {
                "type": "boolean",
                "description": "Attendee needs to confirm attendance"
              }
            }
          },
          "Busy Status": {
            "type": "select",
            "options": [
              "Busy",
              "Tentative"
            ],
            "description": "Busy status for Microsoft applications"
          },
          "Calendar Name": {
            "type": "string",
            "description": "Calendar name for Apple and Microsoft calendars"
          },
          "Description": {
            "type": "string",
            "description": "Event description"
          },
          "Geolocation": {
            "type": "group",
            "description": "Event's location geolocation",
            "parameters": {
              "Latitude": {
                "type": "number",
                "description": "Latitude"
              },
              "Longitude": {
                "type": "number",
                "description": "Longitude"
              }
            }
          },
          "Location": {
            "type": "string",
            "description": "Event's intended venue/location"
          },
          "Recurrence Rule": {
            "type": "string",
            "description": "Rule to define the repeat pattern of the event (RRULE)"
          },
          "Organizer": {
            "type": "group",
            "description": "Event organizer",
            "parameters": {
              "Name": {
                "type": "string",
                "description": "Organizer name"
              },
              "Email": {
                "type": "email",
                "description": "Organizer email"
              }
            }
          },
          "Sequence": {
            "type": "number",
            "description": "Revision sequence number for event updates"
          },
          "Status": {
            "type": "select",
            "options": [
              "Confirmed",
              "Cancelled",
              "Tentative"
            ],
            "description": "Status of the event"
          },
          "UID": {
            "type": "string",
            "description": "Universally unique ID (UID) for the event (auto-generated if empty)"
          },
          "URL": {
            "type": "string",
            "description": "URL associated with the event"
          },
          "Use Workflow Timezone": {
            "type": "boolean",
            "description": "Use workflow timezone instead of UTC"
          }
        }
      },
      "Convert to JSON": {
        "parameters": {
          "Mode": {
            "type": "select",
            "options": [
              "All Items to One File",
              "Each Item to Separate File"
            ],
            "description": "Output mode"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Format": {
            "type": "boolean",
            "description": "Format JSON for easier reading"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "utf8"
            ],
            "description": "Character set to use to encode the data",
            "default": "utf8"
          }
        }
      },
      "Convert to ODS": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Compression": {
            "type": "boolean",
            "description": "Compress and reduce file size"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          },
          "Sheet Name": {
            "type": "string",
            "description": "Sheet Name to create in the spreadsheet"
          }
        }
      },
      "Convert to RTF": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          }
        }
      },
      "Convert to Text File": {
        "parameters": {
          "Text Input Field": {
            "type": "string",
            "description": "Field containing string to convert to file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "utf8"
            ],
            "description": "Character set to use to encode the data",
            "default": "utf8"
          }
        }
      },
      "Convert to XLS": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          },
          "Sheet Name": {
            "type": "string",
            "description": "Sheet Name to create in the spreadsheet"
          }
        }
      },
      "Convert to XLSX": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Compression": {
            "type": "boolean",
            "description": "Compress and reduce file size"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          },
          "Sheet Name": {
            "type": "string",
            "description": "Sheet Name to create in the spreadsheet"
          }
        }
      },
      "Move Base64 String to File": {
        "parameters": {
          "Base64 Input Field": {
            "type": "string",
            "description": "Field containing Base64 string to convert to file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "MIME Type": {
            "type": "string",
            "description": "MIME type of the output file"
          }
        }
      }
    },
    "n8n-nodes-base.crypto": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Crypto",
      "description": "Use the Crypto node to encrypt data in workflows.",
      "actions": [
        "Generate",
        "Hash",
        "Hmac",
        "Sign"
      ],
      "Generate": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Property to write the random string to"
          },
          "Type": {
            "type": "select",
            "options": [
              "ASCII",
              "BASE64",
              "HEX",
              "UUID"
            ],
            "description": "Encoding type to use"
          }
        }
      },
      "Hash": {
        "parameters": {
          "Type": {
            "type": "select",
            "options": [
              "MD5",
              "SHA256",
              "SHA3-256",
              "SHA3-384",
              "SHA3-512",
              "SHA385",
              "SHA512"
            ],
            "description": "Hash type to use"
          },
          "Binary File": {
            "type": "boolean",
            "description": "Data to hash is from a binary file",
            "parameters": {
              "Binary Property Name": {
                "type": "string",
                "description": "Binary property containing data to hash"
              }
            },
            "alternativeParameters": {
              "Value": {
                "type": "string",
                "description": "Value to hash"
              }
            }
          },
          "Property Name": {
            "type": "string",
            "description": "Property to write the hash to"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "BASE64",
              "HEX"
            ],
            "description": "Encoding type to use"
          }
        }
      },
      "Hmac": {
        "parameters": {
          "Binary File": {
            "type": "boolean",
            "description": "Data to encrypt is from a binary file",
            "parameters": {
              "Binary Property Name": {
                "type": "string",
                "description": "Binary property containing data to encrypt"
              }
            },
            "alternativeParameters": {
              "Value": {
                "type": "string",
                "description": "Value to encrypt"
              }
            }
          },
          "Type": {
            "type": "select",
            "options": [
              "MD5",
              "SHA256",
              "SHA3-256",
              "SHA3-384",
              "SHA3-512",
              "SHA385",
              "SHA512"
            ],
            "description": "Encryption type to use"
          },
          "Property Name": {
            "type": "string",
            "description": "Property to write the hash to"
          },
          "Secret": {
            "type": "string",
            "description": "Secret or secret key used for decoding"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "BASE64",
              "HEX"
            ],
            "description": "Encoding type to use"
          }
        }
      },
      "Sign": {
        "parameters": {
          "Value": {
            "type": "string",
            "description": "Value to sign"
          },
          "Property Name": {
            "type": "string",
            "description": "Property to write the signed value to"
          },
          "Algorithm Name or ID": {
            "type": "string",
            "description": "Algorithm name or ID"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "BASE64",
              "HEX"
            ],
            "description": "Encoding type to use"
          },
          "Private Key": {
            "type": "string",
            "description": "Private key to use when signing"
          }
        }
      }
    },
    "n8n-nodes-base.datetime": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Date & Time",
      "description": "The Date & Time node manipulates date and time data and convert it to different formats.",
      "note": "You can work with data and time in the Code node, and in expressions in any node. n8n supports Luxon to help work with date and time in JavaScript. Refer to [Date and time with Luxon](/code/cookbook/luxon.md) for more information.",
      "operations": [
        "Add to a Date",
        "Extract Part of a Date",
        "Format a Date",
        "Get Current Date",
        "Get Time Between Dates",
        "Round a Date",
        "Subtract From a Date"
      ],
      "Add to a Date": {
        "parameters": {
          "Date to Add To": {
            "type": "datetime",
            "description": "Date to change"
          },
          "Time Unit to Add": {
            "type": "select",
            "options": [
              "years",
              "months",
              "weeks",
              "days",
              "hours",
              "minutes",
              "seconds"
            ],
            "description": "Time unit for the duration"
          },
          "Duration": {
            "type": "number",
            "description": "Number of time units to add"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the new date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      },
      "Extract Part of a Date": {
        "parameters": {
          "Date": {
            "type": "datetime",
            "description": "Date to extract part of"
          },
          "Part": {
            "type": "select",
            "options": [
              "Year",
              "Month",
              "Week",
              "Day",
              "Hour",
              "Minute",
              "Second"
            ],
            "description": "Part of the date to extract"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the extracted date part to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      },
      "Format a Date": {
        "parameters": {
          "Date": {
            "type": "datetime",
            "description": "Date to format"
          },
          "Format": {
            "type": "select",
            "options": [
              "Custom Format",
              "MM/DD/YYYY",
              "YYYY/MM/DD",
              "MMMM DD YYYY",
              "MM-DD-YYYY",
              "YYYY-MM-DD"
            ],
            "description": "Format to change the date to",
            "details": {
              "Custom Format": {
                "parameters": {
                  "Custom Format Expression": {
                    "type": "string",
                    "description": "Custom format using Luxon's special tokens"
                  }
                }
              }
            }
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the formatted date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          },
          "From Date Format": {
            "type": "string",
            "description": "Format of the input date (Luxon tokens)"
          },
          "Use Workflow Timezone": {
            "type": "boolean",
            "description": "Use workflow timezone instead of input's timezone"
          }
        }
      },
      "Get Current Date": {
        "parameters": {
          "Include Current Time": {
            "type": "boolean",
            "description": "Include current time or set time to midnight"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the current date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          },
          "Timezone": {
            "type": "timezone",
            "description": "Timezone to use (defaults to n8n instance's timezone)"
          }
        }
      },
      "Get Time Between Dates": {
        "parameters": {
          "Start Date": {
            "type": "datetime",
            "description": "Earlier date to compare"
          },
          "End Date": {
            "type": "datetime",
            "description": "Later date to compare"
          },
          "Units": {
            "type": "multiOptions",
            "options": [
              "Year",
              "Month",
              "Week",
              "Day",
              "Hour",
              "Minute",
              "Second",
              "Millisecond"
            ],
            "description": "Units to calculate time between"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the calculated time between to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          },
          "Output as ISO String": {
            "type": "boolean",
            "description": "Format output as a single ISO duration string"
          }
        }
      },
      "Round a Date": {
        "parameters": {
          "Date": {
            "type": "datetime",
            "description": "Date to round"
          },
          "Mode": {
            "type": "select",
            "options": [
              "Round Down",
              "Round Up"
            ],
            "description": "Rounding mode"
          },
          "To Nearest": {
            "type": "select",
            "options": [
              "Year",
              "Month",
              "Week",
              "Day",
              "Hour",
              "Minute",
              "Second"
            ],
            "description": "Unit to round to"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the rounded date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      },
      "Subtract From a Date": {
        "parameters": {
          "Date to Subtract From": {
            "type": "datetime",
            "description": "Date to subtract from"
          },
          "Time Unit to Subtract": {
            "type": "select",
            "options": [
              "years",
              "months",
              "weeks",
              "days",
              "hours",
              "minutes",
              "seconds"
            ],
            "description": "Time unit for the duration"
          },
          "Duration": {
            "type": "number",
            "description": "Amount of time units to subtract"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the rounded date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      }
    },
    "n8n-nodes-base.debughelper": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Debug Helper",
      "description": "Use the Debug Helper node to trigger different error types or generate random datasets to help test n8n workflows.",
      "operations": [
        "Do Nothing",
        "Throw Error",
        "Out Of Memory",
        "Generate Random Data"
      ],
      "Throw Error": {
        "parameters": {
          "Error Type": {
            "type": "select",
            "options": [
              "NodeApiError",
              "NodeOperationError",
              "Error"
            ],
            "description": "Type of error to throw"
          },
          "Error Message": {
            "type": "string",
            "description": "Error message to throw"
          }
        }
      },
      "Out Of Memory": {
        "parameters": {
          "Memory Size to Generate": {
            "type": "string",
            "description": "Approximate amount of memory to generate"
          }
        }
      },
      "Generate Random Data": {
        "parameters": {
          "Data Type": {
            "type": "select",
            "options": [
              "Address",
              "Coordinates",
              "Credit Card",
              "Email",
              "IPv4",
              "IPv6",
              "MAC",
              "Nanoids",
              "URL",
              "User Data",
              "UUID",
              "Version"
            ],
            "description": "Type of random data to generate",
            "details": {
              "Nanoids": {
                "parameters": {
                  "Nanoid Alphabet": {
                    "type": "string",
                    "description": "Alphabet the generator will use"
                  },
                  "Nanoid Length": {
                    "type": "number",
                    "description": "Length of each nanoid"
                  }
                }
              }
            }
          },
          "Seed": {
            "type": "string",
            "description": "Specific seed for data generation (leave empty for random)"
          },
          "Number of Items to Generate": {
            "type": "number",
            "description": "Number of random items to generate"
          },
          "Output as Single Array": {
            "type": "boolean",
            "description": "Generate data as a single array"
          }
        }
      }
    },
    "n8n-nodes-base.editimage": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Edit Image",
      "description": "Use the Edit Image node to manipulate and edit images.",
      "note": "1. If you aren't running n8n on Docker, you need to install [GraphicsMagick](http://www.graphicsmagick.org/README.html){:target=_blank .external-link}.\n2. You need to use a node such as the [Read/Write Files from Disk](/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile.md) node or the [HTTP Request](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) node to pass the image file as a data property to the Edit Image node.",
      "operations": [
        "Blur",
        "Border",
        "Composite",
        "Create",
        "Crop",
        "Draw",
        "Get Information",
        "Multi Step",
        "Resize",
        "Rotate",
        "Shear",
        "Text",
        "Transparent"
      ],
      "Blur": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Blur": {
            "type": "number",
            "description": "Blur strength (0-1000)"
          },
          "Sigma": {
            "type": "number",
            "description": "Stigma for the blur (0-1000)"
          }
        }
      },
      "Border": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Border Width": {
            "type": "number",
            "description": "Width of the border"
          },
          "Border Height": {
            "type": "number",
            "description": "Height of the border"
          },
          "Border Color": {
            "type": "color",
            "description": "Color for the border"
          }
        }
      },
      "Composite": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing base image data"
          },
          "Composite Image Property": {
            "type": "string",
            "description": "Binary property storing image to composite"
          },
          "Operator": {
            "type": "select",
            "options": [
              "Add",
              "Atop",
              "Bumpmap",
              "Copy",
              "Copy Black",
              "Copy Blue",
              "Copy Cyan",
              "Copy Green",
              "Copy Magenta",
              "Copy Opacity",
              "Copy Red",
              "Copy Yellow",
              "Difference",
              "Divide",
              "In",
              "Minus",
              "Multiply",
              "Out",
              "Over",
              "Plus",
              "Subtract",
              "Xor"
            ],
            "description": "Composite operator"
          },
          "Position X": {
            "type": "number",
            "description": "X axis position of composite image (horizontal)"
          },
          "Position Y": {
            "type": "number",
            "description": "Y axis position of composite image (vertical)"
          }
        }
      },
      "Create": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property to store created image data"
          },
          "Background Color": {
            "type": "color",
            "description": "Background color for the image"
          },
          "Image Width": {
            "type": "number",
            "description": "Width of the image"
          },
          "Image Height": {
            "type": "number",
            "description": "Height of the image"
          }
        }
      },
      "Crop": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Width": {
            "type": "number",
            "description": "Width to crop to"
          },
          "Height": {
            "type": "number",
            "description": "Height to crop to"
          },
          "Position X": {
            "type": "number",
            "description": "X axis position to start crop from (horizontal)"
          },
          "Position Y": {
            "type": "number",
            "description": "Y axis position to start crop from (vertical)"
          }
        }
      },
      "Draw": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Primitive": {
            "type": "select",
            "options": [
              "Circle",
              "Line",
              "Rectangle"
            ],
            "description": "Primitive shape to draw"
          },
          "Color": {
            "type": "color",
            "description": "Color for the primitive"
          },
          "Start Position X": {
            "type": "number",
            "description": "X axis start position (horizontal)"
          },
          "Start Position Y": {
            "type": "number",
            "description": "Y axis start position (vertical)"
          },
          "End Position X": {
            "type": "number",
            "description": "X axis end position (horizontal)"
          },
          "End Position Y": {
            "type": "number",
            "description": "Y axis end position (vertical)"
          },
          "Corner Radius": {
            "type": "number",
            "description": "Corner radius for rounded corners"
          }
        }
      },
      "Get Information": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          }
        }
      },
      "Multi Step": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Operations": {
            "type": "repeatable",
            "description": "Operations to perform in multi step",
            "template": {
              "operation": {
                "type": "nodeOperation",
                "nodeType": "n8n-nodes-base.editimage"
              }
            }
          }
        }
      },
      "Resize": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Width": {
            "type": "number",
            "description": "New width for the image"
          },
          "Height": {
            "type": "number",
            "description": "New height for the image"
          },
          "Option": {
            "type": "select",
            "options": [
              "Ignore Aspect Ratio",
              "Maximum Area",
              "Minimum Area",
              "Only if Larger",
              "Only if Smaller",
              "Percent"
            ],
            "description": "Resize option"
          }
        }
      },
      "Rotate": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Rotate": {
            "type": "number",
            "description": "Degrees to rotate (-360 to 360)"
          },
          "Background Color": {
            "type": "color",
            "description": "Background color for rotation"
          }
        }
      },
      "Shear": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Degrees X": {
            "type": "number",
            "description": "Degrees to shear from x axis"
          },
          "Degrees Y": {
            "type": "number",
            "description": "Degrees to shear from y axis"
          }
        }
      },
      "Text": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Text": {
            "type": "string",
            "description": "Text to write on the image"
          },
          "Font Size": {
            "type": "select",
            "options": [
              "8",
              "10",
              "12",
              "14",
              "16",
              "18",
              "20",
              "24",
              "32",
              "48",
              "64",
              "72",
              "96",
              "144",
              "288"
            ],
            "description": "Font size for the text"
          },
          "Font Color": {
            "type": "color",
            "description": "Font color"
          },
          "Position X": {
            "type": "number",
            "description": "X axis position to begin text at (horizontal)"
          },
          "Position Y": {
            "type": "number",
            "description": "Y axis position to begin text at (vertical)"
          },
          "Max Line Length": {
            "type": "number",
            "description": "Maximum characters in a line before line break"
          }
        }
      },
      "Transparent": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Color": {
            "type": "color",
            "description": "Color to make transparent"
          }
        }
      },
      "options": {
        "File Name": {
          "type": "string",
          "description": "Filename of the output file"
        },
        "Format": {
          "type": "select",
          "options": [
            "bmp",
            "gif",
            "jpeg",
            "png",
            "tiff",
            "WebP"
          ],
          "description": "Image format of the output file"
        },
        "Font Name or ID": {
          "type": "string",
          "description": "Text font"
        }
      }
    },
    "n8n-nodes-base.emailimap": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Email Trigger (IMAP) node",
      "description": "Use the IMAP Email node to receive emails using an IMAP email server. This node is a trigger node.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/imap/index.md).",
      "operations": [
        "Receive an email"
      ],
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "imap",
          "description": "IMAP credential to connect with"
        },
        "Mailbox Name": {
          "type": "string",
          "description": "Mailbox to receive emails from"
        },
        "Action": {
          "type": "select",
          "options": [
            "None",
            "Mark as Read"
          ],
          "description": "Action after receiving email"
        },
        "Download Attachments": {
          "type": "boolean",
          "description": "Download email attachments"
        },
        "Format": {
          "type": "select",
          "options": [
            "RAW",
            "Resolved",
            "Simple"
          ],
          "description": "Format to return the message in"
        }
      },
      "options": {
        "Custom Email Rules": {
          "type": "string",
          "description": "Custom email fetching rules (node-imap search criteria)"
        },
        "Force Reconnect Every Minutes": {
          "type": "number",
          "description": "Interval in minutes to force reconnection"
        }
      }
    },
    "n8n-nodes-base.errortrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Error Trigger node",
      "description": "You can use the Error Trigger node to create error workflows. When another linked workflow fails, this node gets details about the failed workflow and the errors, and runs the error workflow.",
      "usage": "If a workflow uses the Error Trigger node, you don't have to activate the workflow.\nIf a workflow contains the Error Trigger node, by default, the workflow uses itself as the error workflow.\nYou can't test error workflows when running workflows manually. The Error Trigger only runs when an automatic workflow errors.",
      "relatedResources": "You can use the [Stop And Error](/integrations/builtin/core-nodes/n8n-nodes-base.stopanderror.md) node to send custom messages to the Error Trigger.\nRead more about [Error workflows](/flow-logic/error-handling.md) in n8n workflows.",
      "errorData": "The Error Trigger node outputs the following data from the workflow that errored:\n\n*   `workflowId`: The ID of the workflow that errored.\n*   `workflowName`: The name of the workflow that errored.\n*   `executionId`: The ID of the execution that errored.\n*   `error`: The error message and stacktrace."
    },
    "n8n-nodes-base.executeworkflow": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Execute Sub-workflow",
      "description": "Use the Execute Sub-workflow node to run a different workflow on the host machine that runs n8n.",
      "parameters": {
        "Source": {
          "type": "select",
          "options": [
            "Database",
            "Local File",
            "Parameter",
            "URL"
          ],
          "description": "Source of the sub-workflow information",
          "details": {
            "Database": {
              "parameters": {
                "From list": {
                  "type": "selectWorkflow",
                  "description": "Select workflow from list"
                },
                "Workflow ID": {
                  "type": "string",
                  "description": "Enter Workflow ID"
                }
              }
            },
            "Local File": {
              "parameters": {
                "Workflow Path": {
                  "type": "string",
                  "description": "Path to the local JSON workflow file"
                }
              }
            },
            "Parameter": {
              "parameters": {
                "Workflow JSON": {
                  "type": "json",
                  "description": "JSON code of the workflow to execute"
                }
              }
            },
            "URL": {
              "parameters": {
                "Workflow URL": {
                  "type": "string",
                  "description": "URL to load the workflow from"
                }
              }
            }
          }
        },
        "Workflow Inputs": {
          "type": "workflowInputs",
          "description": "Input items of the sub-workflow (auto-populated from selected workflow)"
        },
        "Mode": {
          "type": "select",
          "options": [
            "Run once with all items",
            "Run once for each item"
          ],
          "description": "Execution mode for the node"
        }
      },
      "options": {
        "Wait for Sub-Workflow Completion": {
          "type": "boolean",
          "description": "Wait for sub-workflow to complete before continuing"
        }
      }
    },
    "n8n-nodes-base.executeworkflowtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Execute Sub-workflow Trigger node",
      "description": "Use this node to start a workflow in response to another workflow. It should be the first node in the workflow.",
      "usage": "This node runs in response to a call from the [Execute Workflow](/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow.md) node.",
      "templatesAndExamples": "<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'execute-workflow-trigger') ]]",
      "dataPassage": "<!-- --8<-- \"_snippets/flow-logic/subworkflow-data-flow.md\" -->"
    },
    "n8n-nodes-base.executiondata": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Execution Data",
      "description": "Use this node to save metadata for workflow executions. You can then search by this data in the **Executions** list.",
      "featureAvailability": "Available on Pro and Enterprise plans.",
      "operations": [
        "Save Execution Data for Search"
      ],
      "parameters": {
        "Data to Save": {
          "type": "repeatable",
          "description": "Add metadata key/value pairs to save",
          "template": {
            "Saved Field": {
              "type": "keyValuePair",
              "keys": {},
              "values": {}
            }
          }
        }
      },
      "limitations": {
        "key": "limited to 50 characters",
        "value": "limited to 512 characters"
      }
    },
    "n8n-nodes-base.extractfromfile": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Extract From File",
      "description": "A common pattern in n8n workflows is to receive a file, either from and [HTTP Request node][] (for files you are fetching from a website), a [Webhook Node][] (for files which are sent to your workflow from elsewhere), or from a local source. Data obtained in this way is often in a binary format, for example a spreadsheet or PDF.\n\nThe Extract From File node extracts data from a binary format file and converts it to JSON, which can then be easily manipulated by the rest of your workflow. For converting JSON back into a binary file type, please see the [Convert to File](/integrations/builtin/core-nodes/n8n-nodes-base.converttofile.md) node.",
      "operations": [
        "Extract From CSV",
        "Extract From HTML",
        "Extract From JSON",
        "Extract From ICS",
        "Extract From ODS",
        "Extract From PDF",
        "Extract From RTF",
        "Extract From Text File",
        "Extract From XLS",
        "Extract From XLSX",
        "Move File to Base64 String"
      ],
      "parameters": {
        "Input Binary Field": {
          "type": "string",
          "description": "Field from the node input data that contains the binary file",
          "default": "data"
        },
        "Destination Output Field": {
          "type": "string",
          "description": "Field in the node output that will contain the extracted data",
          "operations": [
            "Extract From JSON",
            "Extract From ICS",
            "Extract From Text File",
            "Move File to Base64 String"
          ]
        }
      }
    },
    "n8n-nodes-base.filter": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Filter",
      "description": "Filter items based on a condition. If the item meets the condition, the Filter node passes it on to the next node in the Filter node output. If the item doesn't meet the condition, the Filter node omits the item from its output.",
      "parameters": {
        "Conditions": {
          "type": "group",
          "description": "Filter comparison conditions",
          "repeatable": true,
          "template": {
            "DataType": {
              "type": "selectDataType",
              "description": "Data type and comparison operation type"
            }
          }
        },
        "Condition Combination": {
          "type": "select",
          "options": [
            "AND",
            "OR"
          ],
          "description": "Combine multiple conditions"
        }
      },
      "options": {
        "Ignore Case": {
          "type": "boolean",
          "description": "Ignore letter case in comparison"
        },
        "Less Strict Type Validation": {
          "type": "boolean",
          "description": "Attempt to convert value types based on operator"
        }
      }
    },
    "n8n-nodes-base.form": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "n8n Form node",
      "description": "Use the n8n Form node to create user-facing forms with multiple steps. You can add other nodes with custom logic between to process user input. You must start the workflow with the [n8n Form Trigger](/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger.md).",
      "settingUpNode": {
        "setDefaultsWithQueryParameters": {
          "note": "Query parameters are only available when using the form in production mode. n8n won't populate field values from query parameters in testing mode."
        },
        "displayingCustomHTML": {
          "note": "The HTML field doesn't support <script>, <style>, or <input> elements."
        },
        "definingFormUsingJSON": {
          "keys": [
            "fieldLabel",
            "fieldType",
            "placeholder",
            "requiredField"
          ],
          "fieldTypes": [
            "date",
            "dropdown",
            "email",
            "file",
            "number",
            "password",
            "text",
            "textarea"
          ]
        },
        "formEnding": {
          "options": [
            "Show Completion Screen",
            "Redirect to URL",
            "Show Text"
          ],
          "onN8nFormSubmission": {
            "Show Completion Screen": {
              "parameters": [
                "Completion Title",
                "Completion Message",
                "Completion Page Title"
              ]
            },
            "Redirect to URL": {
              "parameters": [
                "URL"
              ]
            },
            "Show Text": {
              "parameters": [
                "Text"
              ]
            }
          }
        },
        "formsWithBranches": {
          "workflowsWithMutuallyExclusiveBranches": "Form workflows containing mutually exclusive branches work as expected.",
          "workflowsThatMayExecuteMultipleBranches": "Form workflows that send data to multiple branches at the same time require more care."
        }
      },
      "options": {
        "Form Title": {
          "type": "string",
          "description": "Title for the form (webpage and main h1 title)"
        },
        "Form Description": {
          "type": "string",
          "description": "Description for the form (subtitle, HTML meta description)"
        },
        "Button Label": {
          "type": "string",
          "description": "Label for the form's submit button"
        }
      },
      "runningNode": {
        "buildAndTestWorkflows": {
          "testingModes": [
            "Test Step",
            "Test Workflow"
          ]
        },
        "productionWorkflows": "When your workflow is ready, switch to using the n8n Form Trigger's **Production URL** by opening the trigger node and selecting the **Production URL** in the **From URLS** selector. You can then activate your workflow, and n8n runs it automatically when a user submits the form.\n\nWhen working with a production URL, ensure that you have saved and activated the workflow. Data flowing through the Form trigger isn't visible in the editor UI with the production URL."
      }
    },
    "n8n-nodes-base.formtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "n8n Form Trigger node",
      "description": "Use the n8n Form trigger to start a workflow when a user submits a form, taking the input data from the form. The node generates the form web page for you to use.",
      "usage": "You can add more pages to continue the form with the [n8n Form](/integrations/builtin/core-nodes/n8n-nodes-base.form.md) node.",
      "buildAndTestWorkflows": "While building or testing a workflow, use the **Test URL**. Using a test URL ensures that you can view the incoming data in the editor UI, which is useful for debugging.\n\nThere are two ways to test:\n\n- Select **Test Step**. n8n opens the form. When you submit the form, n8n runs the node, but not the rest of the workflow.\n- Select **Test Workflow**. n8n opens the form. When you submit the form, n8n runs the workflow.",
      "productionWorkflows": "When your workflow is ready, switch to using the **Production URL**. You can then activate your workflow, and n8n runs it automatically when a user submits the form.\n\nWhen working with a production URL, ensure that you have saved and activated the workflow. Data flowing through the Form trigger isn't visible in the editor UI with the production URL.",
      "setDefaultsWithQueryParameters": {
        "note": "Query parameters are only available when using the form in production mode. n8n won't populate field values from query parameters in testing mode."
      },
      "parameters": {
        "Authentication": {
          "type": "select",
          "options": [
            "Basic Auth",
            "None"
          ],
          "description": "Authentication type for the form"
        },
        "Basic Auth": {
          "parameters": {
            "Credential for Basic Auth": {
              "type": "credential",
              "credentialType": "httpBasicAuth",
              "description": "Basic authentication credential"
            }
          }
        },
        "Form URLs": {
          "type": "urls",
          "description": "Test and Production URLs"
        },
        "Form Path": {
          "type": "string",
          "description": "Custom slug for the form"
        },
        "Form Title": {
          "type": "string",
          "description": "Title for the form (webpage and main h1 title)"
        },
        "Form Description": {
          "type": "string",
          "description": "Description for the form (subtitle)"
        },
        "Form Elements": {
          "type": "repeatable",
          "description": "Question fields for your form",
          "template": {
            "Field Label": {
              "type": "string",
              "description": "Label that appears above the input field"
            },
            "Element Type": {
              "type": "select",
              "options": [
                "Custom HTML",
                "Date",
                "Dropdown List",
                "Email",
                "File",
                "Hidden Field",
                "Number",
                "Password",
                "Text",
                "Textarea"
              ],
              "description": "Type of form element"
            },
            "Custom HTML": {
              "parameters": {
                "Element Name": {
                  "type": "string",
                  "description": "Name to include Custom HTML content in output"
                }
              }
            },
            "Dropdown List": {
              "parameters": {
                "Multiple Choice": {
                  "type": "boolean",
                  "description": "Allow multiple choices in dropdown"
                },
                "Field Options": {
                  "type": "repeatable",
                  "description": "Dropdown options",
                  "template": {
                    "Field Option": {
                      "type": "string",
                      "description": "Option for the dropdown list"
                    }
                  }
                }
              }
            },
            "Hidden Field": {
              "parameters": {
                "Field Value": {
                  "type": "string",
                  "description": "Default value for the hidden field"
                }
              }
            },
            "Required Field": {
              "type": "boolean",
              "description": "Require users to complete this field"
            }
          }
        },
        "Respond When": {
          "type": "select",
          "options": [
            "Form Is Submitted",
            "Workflow Finishes"
          ],
          "description": "When to send a response to form submission"
        }
      },
      "options": {
        "Append n8n Attribution": {
          "type": "boolean",
          "description": "Hide 'Form automated with n8n' attribute"
        },
        "Form Response": {
          "type": "select",
          "options": [
            "Form Submitted Text",
            "Redirect URL"
          ],
          "description": "How to respond when user submits form",
          "details": {
            "Form Submitted Text": {
              "parameters": {
                "Form Submitted Text Message": {
                  "type": "string",
                  "description": "Message to show to the user after form submission"
                }
              }
            },
            "Redirect URL": {
              "parameters": {
                "Redirect URL": {
                  "type": "string",
                  "description": "URL to redirect user to after form submission"
                }
              }
            }
          }
        },
        "Ignore Bots": {
          "type": "boolean",
          "description": "Ignore requests from bots"
        },
        "Use Workflow Timezone": {
          "type": "boolean",
          "description": "Use workflow timezone instead of UTC"
        }
      }
    },
    "n8n-nodes-base.ftp": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "FTP",
      "description": "The FTP node is useful to access and upload files to an FTP or SFTP server.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/ftp.md).",
      "operations": [
        "Delete",
        "Download",
        "List",
        "Rename",
        "Upload"
      ],
      "Delete": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          }
        },
        "options": {
          "Folder": {
            "type": "boolean",
            "description": "Delete folders and files",
            "parameters": {
              "Recursive": {
                "type": "boolean",
                "description": "Recursively delete all files and directories within the target directory"
              }
            }
          }
        }
      },
      "Download": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          },
          "Put Output File in Field": {
            "type": "string",
            "description": "Output binary field to put the file in"
          }
        }
      },
      "List": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          },
          "Recursive": {
            "type": "boolean",
            "description": "Return all directories/objects recursively"
          }
        }
      },
      "Rename": {
        "parameters": {
          "Old Path": {
            "type": "string",
            "description": "Existing path of the file to rename"
          },
          "New Path": {
            "type": "string",
            "description": "New path for the renamed file"
          }
        },
        "options": {
          "Create Directories": {
            "type": "boolean",
            "description": "Recursively create destination directory when renaming"
          }
        }
      },
      "Upload": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          },
          "Binary File": {
            "type": "boolean",
            "description": "Upload a binary file",
            "parameters": {
              "Input Binary Field": {
                "type": "string",
                "description": "Input binary field containing file to upload"
              }
            },
            "alternativeParameters": {
              "File Content": {
                "type": "string",
                "description": "Text content of the file to upload"
              }
            }
          }
        }
      }
    },
    "n8n-nodes-base.git": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "Git",
      "description": "[Git](https://git-scm.com/) is a free and open-source distributed version control system designed to handle everything from small to large projects with speed and efficiency.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/git.md).",
      "operations": [
        "Add",
        "Add Config",
        "Clone",
        "Commit",
        "Fetch",
        "List Config",
        "Log",
        "Pull",
        "Push",
        "Push Tags",
        "Status",
        "Tag",
        "User Setup"
      ],
      "Add": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Paths to Add": {
            "type": "string",
            "description": "Comma-separated list of paths of files/folders to add"
          }
        }
      },
      "Add Config": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Key": {
            "type": "string",
            "description": "Name of the key to set"
          },
          "Value": {
            "type": "string",
            "description": "Value of the key to set"
          }
        },
        "options": {
          "Mode": {
            "type": "select",
            "options": [
              "Set",
              "Append"
            ],
            "description": "Config mode"
          }
        }
      },
      "Clone": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Authentication": {
            "type": "select",
            "options": [
              "Authenticate",
              "None"
            ],
            "description": "Authentication method",
            "details": {
              "Authenticate": {
                "parameters": {
                  "Credential for Git": {
                    "type": "credential",
                    "credentialType": "git",
                    "description": "Git credential to connect with"
                  }
                }
              }
            }
          },
          "New Repository Path": {
            "type": "string",
            "description": "Local path for the cloned repository"
          },
          "Source Repository": {
            "type": "string",
            "description": "URL or path of the repository to clone"
          }
        }
      },
      "Commit": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Message": {
            "type": "string",
            "description": "Commit message"
          }
        },
        "options": {
          "Paths to Add": {
            "type": "string",
            "description": "Comma-separated list of paths of files/folders to commit (leave blank for all added)"
          }
        }
      },
      "Fetch": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "List Config": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Log": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Return All": {
            "type": "boolean",
            "description": "Return all results"
          },
          "Limit": {
            "type": "number",
            "description": "Maximum number of results to return (if Return All is off)"
          }
        },
        "options": {
          "File": {
            "type": "string",
            "description": "Path of a file or folder to get history of"
          }
        }
      },
      "Pull": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Push": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Authentication": {
            "type": "select",
            "options": [
              "Authenticate",
              "None"
            ],
            "description": "Authentication method",
            "details": {
              "Authenticate": {
                "parameters": {
                  "Credential for Git": {
                    "type": "credential",
                    "credentialType": "git",
                    "description": "Git credential to connect with"
                  }
                }
              }
            }
          }
        },
        "options": {
          "Target Repository": {
            "type": "string",
            "description": "URL or path of the repository to push to"
          }
        }
      },
      "Push Tags": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Status": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Tag": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Name": {
            "type": "string",
            "description": "Name of the tag to create"
          }
        }
      },
      "User Setup": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      }
    },
    "n8n-nodes-base.graphql": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "GraphQL",
      "description": "[GraphQL](https://graphql.org/){:target=_blank .external-link} is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. Use the GraphQL node to query a GraphQL endpoint.",
      "parameters": {
        "Authentication": {
          "type": "selectAuthentication",
          "description": "Type of authentication to use"
        },
        "HTTP Request Method": {
          "type": "select",
          "options": [
            "GET",
            "POST"
          ],
          "description": "Underlying HTTP Request method",
          "details": {
            "POST": {
              "parameters": {
                "Request Format": {
                  "type": "select",
                  "options": [
                    "GraphQL (Raw)",
                    "JSON"
                  ],
                  "description": "Request Format for POST method"
                }
              }
            }
          }
        },
        "Endpoint": {
          "type": "string",
          "description": "GraphQL Endpoint to hit"
        },
        "Ignore SSL Issues": {
          "type": "boolean",
          "description": "Ignore SSL certificate validation failure"
        },
        "Query": {
          "type": "string",
          "description": "GraphQL query to execute"
        },
        "Response Format": {
          "type": "select",
          "options": [
            "JSON",
            "String"
          ],
          "description": "Format to receive query results in",
          "details": {
            "String": {
              "parameters": {
                "Response Data Property Name": {
                  "type": "string",
                  "description": "Property to write the string response to"
                }
              }
            }
          }
        }
      },
      "headers": {
        "Headers": {
          "type": "keyValuePair",
          "description": "Headers to pass as part of the query"
        }
      }
    },
    "n8n-nodes-base.html": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "HTML",
      "description": "The HTML node provides operations to help you work with HTML in n8n.",
      "note": "The HTML node replaces the HTML Extract node from version 0.213.0 on. If you're using an older version of n8n, you can still view the [HTML Extract node documentation](https://github.com/n8n-io/n8n-docs/blob/86fe33b681621e618e3adcab9a27e8605dbc23ad/docs/integrations/builtin/core-nodes/n8n-nodes-base.htmlextract.md){:target=_blank .external-link}.",
      "warning": "When using the HTML node to generate an HTML template you can introduce [XSS (cross-site scripting)](https://owasp.org/www-community/attacks/xss/){:target=_blank .external-link}. This is a security risk. Be careful with un-trusted inputs.",
      "operations": [
        "Generate HTML template",
        "Extract HTML content",
        "Convert to HTML Table"
      ],
      "Generate HTML template": {
        "description": "Create an HTML template from workflow data. Supports HTML, CSS, JavaScript (not executed), and Expressions."
      },
      "Extract HTML Content": {
        "parameters": {
          "Source Data": {
            "type": "select",
            "options": [
              "JSON",
              "Binary"
            ],
            "description": "Source type for HTML content",
            "details": {
              "JSON": {
                "parameters": {
                  "JSON Property": {
                    "type": "string",
                    "description": "Input containing HTML to extract"
                  }
                }
              },
              "Binary": {
                "parameters": {
                  "Input Binary Field": {
                    "type": "string",
                    "description": "Input containing HTML to extract (binary)"
                  }
                }
              }
            }
          },
          "Extraction Values": {
            "type": "repeatable",
            "description": "Values to extract from HTML content",
            "template": {
              "Key": {
                "type": "string",
                "description": "Key to save extracted value under"
              },
              "CSS Selector": {
                "type": "string",
                "description": "CSS selector to search for"
              },
              "Return Value": {
                "type": "select",
                "options": [
                  "Attribute",
                  "HTML",
                  "Text",
                  "Value"
                ],
                "description": "Type of data to return",
                "details": {
                  "Attribute": {
                    "parameters": {
                      "Attribute": {
                        "type": "string",
                        "description": "Attribute to return the value of"
                      }
                    }
                  },
                  "Text": {
                    "parameters": {
                      "Skip Selectors": {
                        "type": "string",
                        "description": "Comma-separated list of selectors to skip"
                      }
                    }
                  }
                }
              },
              "Return Array": {
                "type": "boolean",
                "description": "Return multiple extraction values as an array"
              }
            }
          }
        },
        "options": {
          "Trim Values": {
            "type": "boolean",
            "description": "Remove spaces/newlines from value start/end"
          },
          "Clean Up Text": {
            "type": "boolean",
            "description": "Clean up text content (whitespaces, line breaks)"
          }
        }
      },
      "Convert to HTML Table": {
        "description": "Convert input content to an HTML table.",
        "options": {
          "Capitalize Headers": {
            "type": "boolean",
            "description": "Capitalize table headers"
          },
          "Custom Styling": {
            "type": "boolean",
            "description": "Use custom styling"
          },
          "Caption": {
            "type": "string",
            "description": "Caption for the table"
          },
          "Table Attributes": {
            "type": "string",
            "description": "Attributes for the <table> tag"
          },
          "Header Attributes": {
            "type": "string",
            "description": "Attributes for the <th> tags"
          },
          "Row Attributes": {
            "type": "string",
            "description": "Attributes for the <tr> tags"
          },
          "Cell Attributes": {
            "type": "string",
            "description": "Attributes for the <td> tags"
          }
        }
      }
    },
    "n8n-nodes-base.if": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "If",
      "description": "Use the If node to split a workflow conditionally based on comparison operations.",
      "parameters": {
        "Conditions": {
          "type": "group",
          "description": "Comparison conditions",
          "repeatable": true,
          "template": {
            "DataType": {
              "type": "selectDataType",
              "description": "Data type and comparison operation type"
            }
          }
        },
        "Condition Combination": {
          "type": "select",
          "options": [
            "AND",
            "OR"
          ],
          "description": "Combine multiple conditions"
        }
      },
      "templatesAndExamples": "<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'if') ]]",
      "branchExecution": "<!-- --8<-- \"_snippets/integrations/builtin/core-nodes/merge/if-merge-branch-execution.md\" -->",
      "relatedResources": "Refer to [Splitting with conditionals](/flow-logic/splitting.md) for more information on using conditionals to create complex logic in n8n.\n\nIf you need more than two conditional outputs, use the [Switch node](/integrations/builtin/core-nodes/n8n-nodes-base.switch.md)."
    },
    "n8n-nodes-base.itemlists": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "Item Lists",
      "description": "/// warning | Removed in 1.21.0\nn8n removed the Item Lists node in version 1.21.0. Use the following nodes instead:\n\n* [Aggregate](/integrations/builtin/core-nodes/n8n-nodes-base.aggregate.md): take separate items, or portions of them, and group them together into individual items.\n* [Limit](/integrations/builtin/core-nodes/n8n-nodes-base.aggregate.md): remove items beyond a defined maximum number.\n* [Remove Duplicates](/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/index.md): identify items that are identical across all fields or a subset of fields.\n* [Sort](/integrations/builtin/core-nodes/n8n-nodes-base.sort.md): organize lists of in a desired ordering, or generate a random selection.\n* [Split Out](/integrations/builtin/core-nodes/n8n-nodes-base.splitout.md): separate a single data item containing a list into multiple items.\n* [Summarize](/integrations/builtin/core-nodes/n8n-nodes-base.summarize.md): aggregate items together, in a manner similar to Excel pivot tables. \n///\n\nThe Item Lists node simplifies working with returned data that contain lists (arrays), enabling you to change the structure for further processing without the need to use [Code](/integrations/builtin/core-nodes/n8n-nodes-base.code/index.md) nodes or write custom JavaScript.",
      "operations": [
        "Concatenate Items",
        "Limit",
        "Remove Duplicates",
        "Sort",
        "Split Out Items",
        "Summarize"
      ],
      "Split Out Items": {
        "parameters": {
          "Field to Split Out": {
            "type": "string",
            "description": "Field containing list to separate out into individual items"
          },
          "Include": {
            "type": "select",
            "options": [
              "No Other Fields",
              "All Other Fields",
              "Selected Other Fields"
            ],
            "description": "Fields to include from input data",
            "details": {
              "Selected Other Fields": {
                "parameters": {
                  "Fields to Include": {
                    "type": "string",
                    "description": "Comma separated list of desired fields"
                  }
                }
              }
            }
          }
        },
        "options": {
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          },
          "Destination Field Name": {
            "type": "string",
            "description": "Field name to put new split contents under"
          },
          "Include Binary": {
            "type": "boolean",
            "description": "Include binary data from input"
          }
        }
      },
      "Concatenate Items": {
        "parameters": {
          "Aggregate": {
            "type": "select",
            "options": [
              "Individual Fields",
              "All Item Data"
            ],
            "description": "Aggregation type"
          },
          "Individual Fields": {
            "parameters": {
              "Field To Aggregate": {
                "type": "string",
                "description": "Field in input data to be aggregated"
              },
              "Rename Field": {
                "type": "boolean",
                "description": "Enable to enter a field name for aggregated output",
                "parameters": {
                  "Output Field Name": {
                    "type": "string",
                    "description": "Field name for the aggregated output data"
                  }
                }
              }
            },
            "options": {
              "Disable Dot Notation": {
                "type": "boolean",
                "description": "Disable dot notation for child fields"
              },
              "Include Binaries": {
                "type": "boolean",
                "description": "Include binary data from input"
              }
            }
          },
          "All Item Data": {
            "parameters": {
              "Put Output in Field": {
                "type": "string",
                "description": "Name of the output field"
              },
              "Include": {
                "type": "select",
                "options": [
                  "All fields",
                  "Specified Fields",
                  "All Fields Except"
                ],
                "description": "Choose fields to include in output"
              }
            }
          }
        }
      },
      "Remove Duplicates": {
        "parameters": {
          "Compare": {
            "type": "select",
            "options": [
              "All Fields",
              "All Fields Except",
              "Selected Fields"
            ],
            "description": "Fields of input data to compare"
          },
          "All Fields Except": {
            "parameters": {
              "Fields to Exclude": {
                "type": "string",
                "description": "Fields to exclude from comparison (comma-separated)"
              }
            }
          },
          "Selected Fields": {
            "parameters": {
              "Fields to Include": {
                "type": "string",
                "description": "Fields to include in comparison (comma-separated)"
              }
            }
          }
        },
        "options": {
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          }
        }
      },
      "Sort": {
        "parameters": {
          "Type": {
            "type": "select",
            "options": [
              "Simple",
              "Random",
              "Code"
            ],
            "description": "Type of sorting input"
          },
          "Simple": {
            "parameters": {
              "Add Field To Sort By": {
                "type": "repeatable",
                "description": "Fields to sort by",
                "template": {
                  "Field Name": {
                    "type": "string",
                    "description": "Field name to sort by"
                  },
                  "Order": {
                    "type": "select",
                    "options": [
                      "Ascending",
                      "Descending"
                    ],
                    "description": "Sort order"
                  }
                }
              }
            }
          },
          "Code": {
            "parameters": {
              "Code": {
                "type": "code",
                "description": "Custom JavaScript code for sorting"
              }
            }
          }
        },
        "options": {
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          }
        }
      },
      "Limit": {
        "parameters": {
          "Max Items": {
            "type": "number",
            "description": "Maximum number of items to keep"
          },
          "Keep": {
            "type": "select",
            "options": [
              "First Items",
              "Last Items"
            ],
            "description": "Items to keep from input data"
          }
        }
      },
      "Summarize": {
        "parameters": {
          "Fields to Summarize": {
            "type": "repeatable",
            "description": "Fields to summarize",
            "template": {
              "Aggregation": {
                "type": "select",
                "options": [
                  "Append",
                  "Average",
                  "Concatenate",
                  "Count",
                  "Count Unique",
                  "Max",
                  "Min",
                  "Sum"
                ],
                "description": "Aggregation method"
              },
              "Field": {
                "type": "string",
                "description": "Field to perform aggregation on"
              },
              "Include Empty Values": {
                "type": "boolean",
                "description": "Include empty values in aggregation (for Append and Concatenate)"
              },
              "Separator": {
                "type": "select",
                "options": [
                  "Comma",
                  "Newline",
                  "Space",
                  "Tab"
                ],
                "description": "Separator for concatenation"
              }
            }
          },
          "Fields to Split By": {
            "type": "string",
            "description": "Fields to split the summary by (comma-separated)"
          }
        },
        "options": {
          "Continue if Field Not Found": {
            "type": "boolean",
            "description": "Continue and return empty item if field not found"
          },
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          },
          "Output Format": {
            "type": "select",
            "options": [
              "Each Split in a Separate Item",
              "All Splits in a Single Item"
            ],
            "description": "Output format for splits"
          },
          "Ignore items without valid fields to group by": {
            "type": "boolean",
            "description": "Ignore input items without Fields to Split By"
          }
        }
      }
    },
    "n8n-nodes-base.jwt": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "JWT",
      "description": "Work with JSON web tokens in your n8n workflows.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/jwt.md).",
      "operations": [
        "Decode",
        "Sign",
        "Verify"
      ],
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "jwt",
          "description": "JWT credential to connect with"
        },
        "Token": {
          "type": "string",
          "description": "Token to Verify or Decode"
        },
        "Sign": {
          "parameters": {
            "Use JSON to Build Payload": {
              "type": "boolean",
              "description": "Build payload claims using JSON"
            },
            "Payload Claims": {
              "type": "group",
              "description": "Payload claims for signing",
              "parameters": {
                "Audience": {
                  "type": "string",
                  "description": "Audience (aud) claim"
                },
                "Expires In": {
                  "type": "number",
                  "description": "Expiration Time (exp) claim in seconds"
                },
                "Issuer": {
                  "type": "string",
                  "description": "Issuer (iss) claim"
                },
                "JWT ID": {
                  "type": "string",
                  "description": "JWT ID (jti) claim"
                },
                "Not Before": {
                  "type": "number",
                  "description": "Not Before (nbf) claim in seconds"
                },
                "Subject": {
                  "type": "string",
                  "description": "Subject (sub) claim"
                }
              }
            },
            "JSON Payload Claims": {
              "type": "json",
              "description": "JSON payload claims for signing"
            }
          }
        }
      },
      "options": {
        "Decode": {
          "options": {
            "Return Additional Info": {
              "type": "boolean",
              "description": "Return complete decoded token with header and signature"
            }
          }
        },
        "Sign": {
          "options": {
            "Override Algorithm": {
              "type": "select",
              "options": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512"
              ],
              "description": "Algorithm to override credential setting"
            }
          }
        },
        "Verify": {
          "options": {
            "Return Additional Info": {
              "type": "boolean",
              "description": "Return complete decoded token with header and signature"
            },
            "Ignore Expiration": {
              "type": "boolean",
              "description": "Ignore token's expiration time claim (exp)"
            },
            "Ignore Not Before Claim": {
              "type": "boolean",
              "description": "Ignore token's not before claim (nbf)"
            },
            "Clock Tolerance": {
              "type": "number",
              "description": "Clock tolerance in seconds for nbf and exp claims"
            },
            "Override Algorithm": {
              "type": "select",
              "options": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512"
              ],
              "description": "Algorithm to override credential setting"
            }
          }
        }
      }
    },
    "n8n-nodes-base.ldap": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "LDAP",
      "description": "This node allows you to interact with your LDAP servers to create, find, and update objects.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/ldap.md).",
      "operations": [
        "Compare",
        "Create",
        "Delete",
        "Rename",
        "Search",
        "Update"
      ],
      "Compare": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to compare"
          },
          "Attribute ID": {
            "type": "string",
            "description": "ID of the attribute to compare"
          },
          "Value": {
            "type": "string",
            "description": "Value to compare"
          }
        }
      },
      "Create": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to create"
          },
          "Attributes": {
            "type": "repeatable",
            "description": "Attribute ID/Value pairs to create",
            "template": {
              "Attribute ID": {
                "type": "string",
                "description": "Attribute ID"
              },
              "Value": {
                "type": "string",
                "description": "Attribute Value"
              }
            }
          }
        }
      },
      "Delete": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to delete"
          }
        }
      },
      "Rename": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Current Distinguished Name (DN) of the entry"
          },
          "New DN": {
            "type": "string",
            "description": "New Distinguished Name (DN) for the entry"
          }
        }
      },
      "Search": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "Base DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of subtree to search in"
          },
          "Search For": {
            "type": "string",
            "description": "Directory object class to search for"
          },
          "Attribute": {
            "type": "string",
            "description": "Attribute to search for"
          },
          "Search Text": {
            "type": "string",
            "description": "Text to search for (use * for wildcard)"
          },
          "Return All": {
            "type": "boolean",
            "description": "Return all results"
          },
          "Limit": {
            "type": "number",
            "description": "Maximum number of results to return (if Return All is off)"
          }
        },
        "options": {
          "Attribute Names or IDs": {
            "type": "string",
            "description": "Comma-separated list of attributes to return"
          },
          "Page Size": {
            "type": "number",
            "description": "Maximum number of results to request at one time (0 to disable paging)"
          },
          "Scopes": {
            "type": "select",
            "options": [
              "Base Tree",
              "Single Level",
              "Whole Subtree"
            ],
            "description": "Search scope relative to Base DN"
          }
        }
      },
      "Update": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to update"
          },
          "Update Attributes": {
            "type": "select",
            "options": [
              "Add",
              "Remove",
              "Replace"
            ],
            "description": "Type of attribute update"
          },
          "Attribute ID": {
            "type": "string",
            "description": "Attribute ID to update"
          },
          "Value": {
            "type": "string",
            "description": "New value for the attribute"
          }
        }
      }
    },
    "n8n-nodes-base.limit": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Limit",
      "description": "Use the Limit node to remove items beyond a defined maximum number. You can choose whether n8n takes the items from the beginning or end of the input data.",
      "parameters": {
        "Max Items": {
          "type": "number",
          "description": "Maximum number of items to keep"
        },
        "Keep": {
          "type": "select",
          "options": [
            "First Items",
            "Last Items"
          ],
          "description": "Items to keep from input data"
        }
      }
    },
    "n8n-nodes-base.localfiletrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Local File Trigger node",
      "description": "The Local File Trigger node starts a workflow when it detects changes on the file system. These changes involve a file or folder getting added, changed, or deleted.",
      "note": "This node isn't available on n8n Cloud.",
      "parameters": {
        "Trigger On": {
          "type": "select",
          "options": [
            "Specific File Changes",
            "Specific Folder Changes"
          ],
          "description": "Event to watch for"
        },
        "Specific File Changes": {
          "parameters": {
            "File to Watch": {
              "type": "string",
              "description": "Path to the file to watch"
            }
          }
        },
        "Specific Folder Changes": {
          "parameters": {
            "Folder to Watch": {
              "type": "string",
              "description": "Path to the folder to watch"
            },
            "Watch for": {
              "type": "multiOptions",
              "options": [
                "Add",
                "Change",
                "Delete"
              ],
              "description": "Types of changes to watch for"
            }
          }
        }
      },
      "options": {
        "Include Linked Files/Folders": {
          "type": "boolean",
          "description": "Watch for changes to linked files/folders"
        },
        "Ignore": {
          "type": "string",
          "description": "Files or paths to ignore (Anymatch syntax)"
        },
        "Max Folder Depth": {
          "type": "number",
          "description": "Maximum folder depth to watch for changes"
        }
      }
    },
    "n8n-nodes-base.manualworkflowtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Manual Trigger node",
      "description": "Use this node if you want to start a workflow by selecting **Test Workflow** and don't want any option for the workflow to run automatically.",
      "usage": "Workflows always need a trigger, or start point. Most workflows start with a trigger node firing in response to an external event or the [Schedule Trigger](/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/index.md) firing on a set schedule.\n\nThe Manual Trigger node serves as the workflow trigger for workflows that don't have an automatic trigger.\n\nUse this trigger:\n\n* To test your workflow before you add an automatic trigger of some kind.\n* When you don't want the workflow to run automatically.",
      "commonIssues": {
        "onlyOneManualTriggerAllowed": "This error displays if you try to add a Manual Trigger node to a workflow which already includes a Manual Trigger node."
      }
    },
    "n8n-nodes-base.markdown": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Markdown",
      "description": "The Markdown node converts between Markdown and HTML formats.",
      "operations": [
        "Markdown to HTML",
        "HTML to Markdown"
      ],
      "parameters": {
        "Markdown to HTML": {
          "parameters": {
            "Markdown": {
              "type": "string",
              "description": "Markdown data to convert"
            }
          },
          "options": {
            "Add Blank To Links": {
              "type": "boolean",
              "description": "Open links in a new window"
            },
            "Automatic Linking To URLs": {
              "type": "boolean",
              "description": "Automatically link URLs"
            },
            "Backslash Escapes HTML Tags": {
              "type": "boolean",
              "description": "Allow backslash escaping of HTML tags"
            },
            "Complete HTML Document": {
              "type": "boolean",
              "description": "Output a complete HTML document"
            },
            "Customized Header ID": {
              "type": "boolean",
              "description": "Support custom heading IDs"
            },
            "Emoji Support": {
              "type": "boolean",
              "description": "Support emojis"
            },
            "Encode Emails": {
              "type": "boolean",
              "description": "Transform ASCII character emails to decimal entities"
            },
            "Exclude Trailing Punctuation From URLs": {
              "type": "boolean",
              "description": "Exclude trailing punctuation from automatically linked URLs"
            },
            "GitHub Code Blocks": {
              "type": "boolean",
              "description": "Enable GitHub Flavored Markdown code blocks"
            },
            "GitHub Compatible Header IDs": {
              "type": "boolean",
              "description": "Generate GitHub Flavored Markdown heading IDs"
            },
            "GitHub Mention Link": {
              "type": "string",
              "description": "Link used with GitHub Mentions"
            },
            "GitHub Mentions": {
              "type": "boolean",
              "description": "Support tagging GitHub users with @"
            },
            "GitHub Task Lists": {
              "type": "boolean",
              "description": "Support GitHub Flavored Markdown task lists"
            },
            "Header Level Start": {
              "type": "number",
              "description": "Start level for headers"
            },
            "Mandatory Space Before Header": {
              "type": "boolean",
              "description": "Require space between # and heading text"
            },
            "Middle Word Asterisks": {
              "type": "boolean",
              "description": "Treat asterisks in words as literal asterisks"
            },
            "Middle Word Underscores": {
              "type": "boolean",
              "description": "Treat underscores in words as literal underscores"
            },
            "No Header ID": {
              "type": "boolean",
              "description": "Disable automatic generation of header IDs"
            },
            "Parse Image Dimensions": {
              "type": "boolean",
              "description": "Support setting maximum image dimensions in Markdown syntax"
            },
            "Prefix Header ID": {
              "type": "string",
              "description": "Prefix to add to header IDs"
            },
            "Raw Header ID": {
              "type": "boolean",
              "description": "Remove spaces, ', and \" from header IDs"
            },
            "Raw Prefix Header ID": {
              "type": "boolean",
              "description": "Prevent n8n from modifying header prefixes"
            },
            "Simple Line Breaks": {
              "type": "boolean",
              "description": "Create line breaks without double space at end of line"
            },
            "Smart Indentation Fix": {
              "type": "boolean",
              "description": "Fix indentation problems related to ES6 template strings"
            },
            "Spaces Indented Sublists": {
              "type": "boolean",
              "description": "Remove requirement to indent sublists four spaces"
            },
            "Split Adjacent Blockquotes": {
              "type": "boolean",
              "description": "Split adjacent blockquote blocks"
            },
            "Strikethrough": {
              "type": "boolean",
              "description": "Support strikethrough syntax (~~word~~)"
            },
            "Tables Header ID": {
              "type": "boolean",
              "description": "Add an ID to table header tags"
            },
            "Tables Support": {
              "type": "boolean",
              "description": "Support tables"
            }
          }
        },
        "HTML to Markdown": {
          "parameters": {
            "HTML": {
              "type": "string",
              "description": "HTML data to convert"
            }
          },
          "options": {
            "Bullet Marker": {
              "type": "string",
              "description": "Character for unordered lists",
              "default": "*"
            },
            "Code Block Fence": {
              "type": "string",
              "description": "Characters for code blocks"
            },
            "Emphasis Delimiter": {
              "type": "string",
              "description": "Character for `<em>`",
              "default": "_"
            },
            "Global Escape Pattern": {
              "type": "string",
              "description": "Overrides default character escape settings"
            },
            "Ignored Elements": {
              "type": "string",
              "description": "HTML elements to ignore"
            },
            "Keep Images With Data": {
              "type": "boolean",
              "description": "Keep images with data (up to 1MB)"
            },
            "Line Start Escape Pattern": {
              "type": "string",
              "description": "Overrides default character escape settings"
            },
            "Max Consecutive New Lines": {
              "type": "number",
              "description": "Maximum consecutive new lines allowed",
              "default": 3
            },
            "Place URLs At The Bottom": {
              "type": "boolean",
              "description": "Place URLs at the bottom of the page"
            },
            "Strong Delimiter": {
              "type": "string",
              "description": "Characters for `<strong>`",
              "default": "**"
            },
            "Style For Code Block": {
              "type": "select",
              "options": [
                "Fence",
                "Indented"
              ],
              "description": "Styling for code blocks",
              "default": "Fence"
            },
            "Text Replacement Pattern": {
              "type": "string",
              "description": "Text replacement pattern using regex"
            },
            "Treat As Blocks": {
              "type": "string",
              "description": "HTML elements to treat as blocks"
            }
          }
        },
        "Destination Key": {
          "type": "string",
          "description": "Field to put the output in"
        }
      },
      "parsers": {
        "HTML to Markdown": "[node-html-markdown](https://www.npmjs.com/package/node-html-markdown)",
        "Markdown to HTML": "[Showdown](https://www.npmjs.com/package/showdown) (GitHub Flavored Markdown optional)"
      }
    },
    "n8n-nodes-base.merge": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Merge",
      "description": "Use the Merge node to combine data from multiple streams, once data of all streams is available.",
      "noteMajorChanges": "The n8n team overhauled this node in n8n 0.194.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document [here](https://github.com/n8n-io/n8n-docs/blob/4ff688642cc9ee7ca7d00987847bf4e4515da59d/docs/integrations/builtin/core-nodes/n8n-nodes-base.merge.md){:target=_blank .external-link}.",
      "noteMinorChanges": "n8n version 1.49.0 introduced the option to add more than two inputs. Older versions only support up to two inputs. If you're running an older version and want to combine multiple inputs in these versions, use the [Code node](https://deploy-preview-2225--n8n-docs.netlify.app/code/code-node/).\n\nThe **Mode > SQL Query** feature was also added in n8n version 1.49.0 and isn't available in older versions.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "Append",
            "Combine",
            "SQL Query",
            "Choose Branch"
          ],
          "description": "Mode of data combination"
        },
        "Append": {
          "parameters": {
            "Number of Inputs": {
              "type": "number",
              "description": "Number of input streams to append"
            }
          }
        },
        "Combine": {
          "parameters": {
            "Combine By": {
              "type": "select",
              "options": [
                "Matching Fields",
                "Position",
                "All Possible Combinations"
              ],
              "description": "Method to combine input data"
            },
            "Matching Fields": {
              "parameters": {
                "Fields to Match": {
                  "type": "string",
                  "description": "Comma-separated list of fields to match"
                },
                "Output Type": {
                  "type": "select",
                  "options": [
                    "Keep Matches",
                    "Keep Non-Matches",
                    "Keep Everything",
                    "Enrich Input 1",
                    "Enrich Input 2"
                  ],
                  "description": "Type of output for matching fields"
                }
              }
            }
          }
        },
        "SQL Query": {
          "parameters": {
            "Query": {
              "type": "sql",
              "description": "Custom SQL query to merge data"
            }
          }
        },
        "Choose Branch": {
          "parameters": {
            "Output": {
              "type": "select",
              "options": [
                "Input 1 Data",
                "Input 2 Data",
                "A Single, Empty Item"
              ],
              "description": "Input to output"
            }
          }
        }
      },
      "options": {
        "Combine": {
          "options": {
            "Clash Handling": {
              "type": "select",
              "options": [
                "Input 1 takes precedence",
                "Input 2 takes precedence",
                "Combine"
              ],
              "description": "How to merge when data streams clash"
            },
            "Fuzzy Compare": {
              "type": "boolean",
              "description": "Tolerate type differences in field comparison"
            },
            "Disable Dot Notation": {
              "type": "boolean",
              "description": "Disable dot notation for child fields"
            },
            "Multiple Matches": {
              "type": "select",
              "options": [
                "Include All Matches",
                "Include First Match Only"
              ],
              "description": "Handling multiple matches in data streams"
            },
            "Include Any Unpaired Items": {
              "type": "boolean",
              "description": "Keep or discard unpaired items when merging by position"
            }
          }
        }
      },
      "mergingDataStreams": "The items passed into Input 1 of the Merge node will take precedence.",
      "branchExecution": "<!-- --8<-- \"_snippets/integrations/builtin/core-nodes/merge/if-merge-branch-execution.md\" -->"
    },
    "n8n-nodes-base.n8n": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "n8n",
      "description": "A node to integrate with n8n itself. This node allows you to consume the [n8n API](/api/index.md) in your workflows.",
      "apiDocumentation": "Refer to the [n8n REST API documentation](/api/index.md) for more information on using the n8n API. Refer to [API endpoint reference](/api/api-reference.md) for working with the API endpoints directly.",
      "note": "You can find authentication information for this node in the [API authentication](/api/authentication.md) documentation.",
      "warning": "This node doesn't support SSL. If your server requires an SSL connection, use the [HTTP Request node](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) to call the [n8n API](/api/index.md).\nThe HTTP Request node has options to [provide the SSL certificate](/integrations/builtin/credentials/httprequest.md#provide-an-ssl-certificate).",
      "operations": [
        "Audit",
        "Credential",
        "Execution",
        "Workflow"
      ],
      "Generate audit": {
        "description": "Generate a security audit.",
        "options": {
          "Categories": {
            "type": "multiOptions",
            "options": [
              "Credentials",
              "Database",
              "Filesystem",
              "Instance",
              "Nodes"
            ],
            "description": "Risk categories to include in audit"
          },
          "Days Abandoned Workflow": {
            "type": "number",
            "description": "Days without execution after which workflow is considered abandoned",
            "default": 90
          }
        }
      },
      "Credential": {
        "operations": [
          "Create",
          "Delete",
          "Get Schema"
        ],
        "Create": {
          "parameters": {
            "Name": {
              "type": "string",
              "description": "Name of the credential to create"
            },
            "Credential Type": {
              "type": "string",
              "description": "Type of the credential"
            },
            "Data": {
              "type": "json",
              "description": "Valid JSON object with required properties (use Get Schema to see format)"
            }
          }
        },
        "Delete": {
          "parameters": {
            "Credential ID": {
              "type": "string",
              "description": "ID of the credential to delete"
            }
          }
        },
        "Get Schema": {
          "parameters": {
            "Credential Type": {
              "type": "string",
              "description": "Type of the credential"
            }
          }
        }
      },
      "Execution": {
        "operations": [
          "Get",
          "Get Many",
          "Delete"
        ],
        "Get": {
          "parameters": {
            "Execution ID": {
              "type": "string",
              "description": "ID of the execution to retrieve"
            }
          },
          "options": {
            "Include Execution Details": {
              "type": "boolean",
              "description": "Include detailed execution data"
            }
          }
        },
        "Get Many": {
          "parameters": {
            "Return All": {
              "type": "boolean",
              "description": "Return all results"
            },
            "Limit": {
              "type": "number",
              "description": "Number of results to return (if Return All is off)"
            }
          },
          "filters": {
            "Workflow": {
              "type": "select",
              "options": [
                "From list",
                "By URL",
                "By ID"
              ],
              "description": "Filter executions by workflow",
              "details": {
                "By URL": {
                  "parameters": {
                    "Workflow URL": {
                      "type": "string",
                      "description": "Workflow URL to filter by"
                    }
                  }
                },
                "By ID": {
                  "parameters": {
                    "Workflow ID": {
                      "type": "string",
                      "description": "Workflow ID to filter by"
                    }
                  }
                }
              }
            },
            "Status": {
              "type": "multiOptions",
              "options": [
                "Error",
                "Success",
                "Waiting"
              ],
              "description": "Filter executions by status"
            }
          },
          "options": {
            "Include Execution Details": {
              "type": "boolean",
              "description": "Include detailed execution data"
            }
          }
        },
        "Delete": {
          "parameters": {
            "Execution ID": {
              "type": "string",
              "description": "ID of the execution to delete"
            }
          }
        }
      },
      "Workflow": {
        "operations": [
          "Activate",
          "Create",
          "Deactivate",
          "Delete",
          "Get",
          "Get Many",
          "Update"
        ],
        "Activate, Deactivate, Delete, and Get": {
          "parameters": {
            "Workflow": {
              "type": "select",
              "options": [
                "From list",
                "By URL",
                "By ID"
              ],
              "description": "Workflow to operate on",
              "details": {
                "By URL": {
                  "parameters": {
                    "Workflow URL": {
                      "type": "string",
                      "description": "Workflow URL"
                    }
                  }
                },
                "By ID": {
                  "parameters": {
                    "Workflow ID": {
                      "type": "string",
                      "description": "Workflow ID"
                    }
                  }
                }
              }
            }
          }
        },
        "Create": {
          "parameters": {
            "Workflow Object": {
              "type": "json",
              "description": "Valid JSON object with new workflow details (name, nodes, connections, settings)"
            }
          }
        },
        "Get Many": {
          "parameters": {
            "Return All": {
              "type": "boolean",
              "description": "Return all results"
            },
            "Limit": {
              "type": "number",
              "description": "Number of results to return (if Return All is off)"
            }
          },
          "filters": {
            "Return Only Active Workflows": {
              "type": "boolean",
              "description": "Return only active workflows"
            },
            "Tags": {
              "type": "string",
              "description": "Comma-separated list of tags for returned workflows"
            }
          }
        },
        "Update": {
          "parameters": {
            "Workflow": {
              "type": "select",
              "options": [
                "From list",
                "By URL",
                "By ID"
              ],
              "description": "Workflow to update",
              "details": {
                "By URL": {
                  "parameters": {
                    "Workflow URL": {
                      "type": "string",
                      "description": "Workflow URL"
                    }
                  }
                },
                "By ID": {
                  "parameters": {
                    "Workflow ID": {
                      "type": "string",
                      "description": "Workflow ID"
                    }
                  }
                }
              }
            },
            "Workflow Object": {
              "type": "json",
              "description": "Valid JSON object to update workflow with (name, nodes, connections, settings)"
            }
          }
        }
      }
    },
    "n8n-nodes-base.n8ntrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "n8n Trigger node",
      "description": "The n8n Trigger node triggers when the current workflow updates or activates, or when the n8n instance starts or restarts. You can use the n8n Trigger node to notify when these events occur.",
      "parameters": {
        "Events": {
          "type": "multiOptions",
          "options": [
            "Active Workflow Updated",
            "Instance started",
            "Workflow Activated"
          ],
          "description": "Events to trigger on"
        }
      }
    },
    "n8n-nodes-base.noop": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "No Operation, do nothing",
      "description": "Use the No Operation, do nothing node when you don't want to perform any operations. The purpose of this node is to make the workflow easier to read and understand where the flow of data stops. This can help others visually get a better understanding of the workflow."
    },
    "n8n-nodes-base.readwritefile": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Read/Write Files from Disk",
      "description": "Use the Read/Write Files from Disk node to read and write files from/to the machine where n8n is running.",
      "note": "This node isn't available on n8n Cloud.",
      "operations": [
        "Read File(s) From Disk",
        "Write File to Disk"
      ],
      "Read File(s) From Disk": {
        "parameters": {
          "File(s) Selector": {
            "type": "string",
            "description": "Path of the file(s) to read (supports path patterns)"
          }
        },
        "options": {
          "File Extension": {
            "type": "string",
            "description": "Extension for the output file"
          },
          "File Name": {
            "type": "string",
            "description": "Name for the output file"
          },
          "MIME Type": {
            "type": "string",
            "description": "MIME type of the output file"
          },
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        }
      },
      "Write File to Disk": {
        "parameters": {
          "File Path and Name": {
            "type": "string",
            "description": "Destination path, name, and extension for the file"
          },
          "Input Binary Field": {
            "type": "string",
            "description": "Field in the input data containing binary file"
          }
        },
        "options": {
          "Append": {
            "type": "boolean",
            "description": "Append data to an existing file"
          }
        }
      },
      "fileLocations": "If you run n8n in Docker, your command runs in the n8n container and not the Docker host.\n\nThis node looks for files relative to the n8n install path. n8n recommends using absolute file paths to prevent any errors."
    },
    "n8n-nodes-base.renamekeys": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Rename Keys",
      "description": "Use the Rename Keys node to rename the keys of a key-value pair in n8n.",
      "parameters": {
        "Add new key": {
          "type": "repeatable",
          "description": "Rename a key",
          "template": {
            "Current Key Name": {
              "type": "string",
              "description": "Current name of the key to rename"
            },
            "New Key Name": {
              "type": "string",
              "description": "New name for the key"
            }
          }
        }
      },
      "options": {
        "Regex": {
          "type": "boolean",
          "description": "Use regular expression to identify keys to rename",
          "parameters": {
            "Regular Expression": {
              "type": "string",
              "description": "Regular expression to identify keys"
            },
            "Replace With": {
              "type": "string",
              "description": "New name to assign to matching keys"
            },
            "Case Insensitive": {
              "type": "boolean",
              "description": "Regular expression should be case insensitive"
            },
            "Max Depth": {
              "type": "number",
              "description": "Maximum depth to replace keys (-1 for unlimited, 0 for top-level)"
            }
          }
        }
      },
      "warningRegexImpacts": "Using a regular expression can affect any keys that match the expression, including keys you've already renamed."
    },
    "n8n-nodes-base.respondtowebhook": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Respond to Webhook",
      "description": "Use the Respond to Webhook node to control the response to incoming webhooks. This node works with the [Webhook](/integrations/builtin/core-nodes/n8n-nodes-base.webhook/index.md) node.",
      "note": "The Respond to Webhook node runs once, using the first incoming data item. Refer to [Return more than one data item](#return-more-than-one-data-item-deprecated) for more information.",
      "parameters": {
        "Respond With": {
          "type": "select",
          "options": [
            "All Incoming Items",
            "Binary",
            "First Incoming Item",
            "JSON",
            "No Data",
            "Redirect",
            "Text"
          ],
          "description": "Data to send in webhook response",
          "details": {
            "Binary": {
              "parameters": {
                "Response Data Source": {
                  "type": "binaryProperty",
                  "description": "Binary property containing file for response"
                }
              }
            },
            "JSON": {
              "parameters": {
                "Response Body": {
                  "type": "json",
                  "description": "JSON object for response"
                }
              }
            },
            "Redirect": {
              "parameters": {
                "Redirect URL": {
                  "type": "string",
                  "description": "URL to redirect to"
                }
              }
            },
            "Text": {
              "parameters": {
                "Response Body": {
                  "type": "string",
                  "description": "Text for response"
                }
              }
            }
          }
        }
      },
      "options": {
        "Response Code": {
          "type": "number",
          "description": "HTTP response code to use"
        },
        "Response Headers": {
          "type": "keyValuePair",
          "description": "Headers to send in response"
        },
        "Put Response in Field": {
          "type": "string",
          "description": "Field name for response data (All/First Incoming Items)"
        }
      },
      "workflowBehavior": "When using the Respond to Webhook node, workflows behave as follows:\n\n- The workflow finishes without executing the Respond to Webhook node: it returns a standard message with a 200 status.\n- The workflow errors before the first Respond to Webhook node executes: the workflow returns an error message with a 500 status.\n- A second Respond to Webhook node executes after the first one: the workflow ignores it.\n- A Respond to Webhook node executes but there was no webhook: the workflow ignores the Respond to Webhook node."
    },
    "n8n-nodes-base.rssfeedread": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "RSS Read",
      "description": "Use the RSS Read node to read data from RSS feeds published on the internet.",
      "parameters": {
        "URL": {
          "type": "string",
          "description": "URL for the RSS publication"
        }
      },
      "options": {
        "Ignore SSL Issues": {
          "type": "boolean",
          "description": "Ignore SSL/TLS verification failures"
        }
      },
      "relatedResources": "n8n provides a trigger node for RSS Read. You can find the trigger node docs [here](/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedreadtrigger.md)."
    },
    "n8n-nodes-base.rssfeedreadtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "RSS Feed Trigger node",
      "description": "The RSS Feed Trigger node allows you to start an n8n workflow when a new RSS feed item has been published.",
      "parameters": {
        "Poll Times": {
          "type": "pollTimes",
          "description": "Polling schedule configuration"
        },
        "Feed URL": {
          "type": "string",
          "description": "URL of the RSS feed to poll"
        }
      },
      "templatesAndExamples": "<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'rss-feed-trigger') ]]",
      "relatedResources": "n8n provides an app node for RSS Feeds. You can find the node docs [here](/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedread.md)."
    },
    "n8n-nodes-base.sendemail": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Send Email",
      "description": "The Send Email node sends emails using an SMTP email server.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/sendemail/index.md).",
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "smtpEmail",
          "description": "SMTP account credential to connect with"
        },
        "From Email": {
          "type": "string",
          "description": "Email address to send from (Name <email@sample.com> format supported)"
        },
        "To Email": {
          "type": "string",
          "description": "Email address to send to (Name <email@sample.com> format supported)"
        },
        "Subject": {
          "type": "string",
          "description": "Subject line for the email"
        },
        "Email Format": {
          "type": "select",
          "options": [
            "Text",
            "HTML",
            "Both"
          ],
          "description": "Format to send the email in"
        }
      },
      "options": {
        "Append n8n Attribution": {
          "type": "boolean",
          "description": "Include 'This email was sent automatically with n8n' attribution"
        },
        "Attachments": {
          "type": "string",
          "description": "Comma-separated list of binary properties for attachments"
        },
        "CC Email": {
          "type": "email",
          "description": "Email address for the cc: field"
        },
        "BCC Email": {
          "type": "email",
          "description": "Email address for the bcc: field"
        },
        "Ignore SSL Issues": {
          "type": "boolean",
          "description": "Ignore TLS/SSL certificate validation failures"
        },
        "Reply To": {
          "type": "email",
          "description": "Email address for the Reply To field"
        }
      }
    },
    "n8n-nodes-base.set": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Edit Fields (Set)",
      "description": "Use the Edit Fields node to set workflow data. This node can set new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values to Google Sheets or databases.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "Manual Mapping",
            "JSON Output"
          ],
          "description": "Mode for setting fields"
        },
        "Fields to Set": {
          "type": "keyValuePair",
          "description": "Fields to set manually",
          "manualMapping": true
        },
        "Keep Only Set Fields": {
          "type": "boolean",
          "description": "Discard input data not used in Fields to Set"
        },
        "Include in Output": {
          "type": "select",
          "options": [
            "All Input Fields",
            "Only Set Fields"
          ],
          "description": "Input data to include in output"
        }
      },
      "options": {
        "Include Binary Data": {
          "type": "boolean",
          "description": "Include binary data in output"
        },
        "Ignore Type Conversion Errors": {
          "type": "boolean",
          "description": "Ignore data type errors when mapping fields (Manual Mapping only)"
        },
        "Support Dot Notation": {
          "type": "boolean",
          "description": "Support dot notation for nested fields"
        }
      },
      "arraysAndExpressions": "You can use arrays and expressions when creating your JSON Output."
    },
    "n8n-nodes-base.sort": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Sort",
      "description": "Use the Sort node to organize lists of items in a desired ordering, or generate a random selection.",
      "note": "The Sort operation uses the default JavaScript operation where the elements to be sorted are converted into strings and their values compared. Refer to [Mozilla's guide to Array sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort){:target=_blank .external-link} to learn more.",
      "parameters": {
        "Type": {
          "type": "select",
          "options": [
            "Simple",
            "Random",
            "Code"
          ],
          "description": "Type of sorting input"
        },
        "Simple": {
          "parameters": {
            "Add Field To Sort By": {
              "type": "repeatable",
              "description": "Fields to sort by",
              "template": {
                "Field Name": {
                  "type": "string",
                  "description": "Field name to sort by"
                },
                "Order": {
                  "type": "select",
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "description": "Sort order"
                }
              }
            }
          }
        },
        "Code": {
          "parameters": {
            "Code": {
              "type": "code",
              "description": "Custom JavaScript code for sorting"
            }
          }
        }
      },
      "options": {
        "Simple": {
          "options": {
            "Disable Dot Notation": {
              "type": "boolean",
              "description": "Disable dot notation for child fields"
            }
          }
        }
      }
    },
    "n8n-nodes-base.splitinbatches": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Loop Over Items (Split in Batches)",
      "description": "The Loop Over Items node helps you loop through data.",
      "usage": "By default, n8n nodes process input items one at a time. Depending on what you're trying to achieve, you often don't need the Loop Over Items node in your workflow. You can learn more about how n8n processes multiple items on the [looping in n8n](/flow-logic/looping.md) page.\n\nIn particular, these two sections are of particular interest to the Loop Over Items node:\n\n* [Loop until all items are processed](/flow-logic/looping.md#loop-until-all-items-are-processed): describes how the Loop Over Items node differs from normal item processing and when you might want to incorporate this node.\n* [Node exceptions](/flow-logic/looping.md#node-exceptions): outlines specific cases and nodes where you may need to use the Loop Over Items node to manually build looping logic.",
      "parameters": {
        "Batch Size": {
          "type": "number",
          "description": "Number of items to return with each call"
        }
      },
      "options": {
        "Reset": {
          "type": "boolean",
          "description": "Reset with current input-data newly initialized with each loop"
        }
      }
    },
    "n8n-nodes-base.splitout": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Split Out",
      "description": "Use the Split Out node to separate a single data item containing a list into multiple items. For example, a list of customers, and you want to split them so that you have an item for each customer.",
      "parameters": {
        "Field to Split Out": {
          "type": "string",
          "description": "Field containing list to separate out"
        },
        "Include": {
          "type": "select",
          "options": [
            "No Other Fields",
            "All Other Fields",
            "Selected Other Fields"
          ],
          "description": "Fields to include from input data",
          "details": {
            "Selected Other Fields": {
              "parameters": {
                "Fields to Include": {
                  "type": "string",
                  "description": "Comma separated list of fields to include"
                }
              }
            }
          }
        }
      },
      "options": {
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disable dot notation for child fields"
        },
        "Destination Field Name": {
          "type": "string",
          "description": "Field to put split field contents in output"
        },
        "Include Binary": {
          "type": "boolean",
          "description": "Include binary data from input"
        }
      }
    },
    "n8n-nodes-base.ssetrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "SSE Trigger node",
      "description": "Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server using HTTP connection. The SSE Trigger node is used to receive server-sent events.",
      "parameters": {
        "URL": {
          "type": "string",
          "description": "URL from which to receive server-sent events (SSE)"
        }
      }
    },
    "n8n-nodes-base.ssh": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "SSH",
      "description": "The SSH node is useful for executing commands using the Secure Shell Protocol.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/ssh.md).",
      "operations": [
        "Execute Command",
        "Download File",
        "Upload File"
      ],
      "Execute Command": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ssh",
            "description": "SSH credential to connect with"
          },
          "Command": {
            "type": "string",
            "description": "Command to execute on the remote device"
          },
          "Working Directory": {
            "type": "string",
            "description": "Directory to execute the command in"
          }
        }
      },
      "Download File": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ssh",
            "description": "SSH credential to connect with"
          },
          "Path": {
            "type": "string",
            "description": "Path of the file to download (includes filename)"
          },
          "File Property": {
            "type": "string",
            "description": "Object property holding binary data to download"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "Override binary data file name"
          }
        }
      },
      "Upload File": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ssh",
            "description": "SSH credential to connect with"
          },
          "Input Binary Field": {
            "type": "string",
            "description": "Input binary field containing file to upload"
          },
          "Target Directory": {
            "type": "string",
            "description": "Directory to upload the file to"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "Override binary data file name"
          }
        }
      }
    },
    "n8n-nodes-base.stopanderror": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Stop And Error",
      "description": "Use the Stop And Error node to display custom error messages, cause executions to fail under certain conditions, and send custom error information to error workflows.",
      "operations": [
        "Error Message",
        "Error Object"
      ],
      "parameters": {
        "Error Type": {
          "type": "select",
          "options": [
            "Error Message",
            "Error Object"
          ],
          "description": "Type of error to throw"
        },
        "Error Message": {
          "parameters": {
            "Error Message Input": {
              "type": "string",
              "description": "Message to throw"
            }
          }
        },
        "Error Object": {
          "parameters": {
            "Error Object JSON": {
              "type": "json",
              "description": "JSON object containing error properties"
            }
          }
        }
      },
      "relatedResources": "You can use the Stop And Error node with the [Error trigger](/integrations/builtin/core-nodes/n8n-nodes-base.errortrigger.md) node.\n\nRead more about [Error workflows](/flow-logic/error-handling.md) in n8n workflows."
    },
    "n8n-nodes-base.summarize": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Summarize",
      "description": "Use the Summarize node to aggregate items together, in a manner similar to Excel pivot tables.",
      "parameters": {
        "Fields to Summarize": {
          "type": "repeatable",
          "description": "Fields to summarize",
          "template": {
            "Aggregation": {
              "type": "select",
              "options": [
                "Append",
                "Average",
                "Concatenate",
                "Count",
                "Count Unique",
                "Max",
                "Min",
                "Sum"
              ],
              "description": "Aggregation method"
            },
            "Field": {
              "type": "string",
              "description": "Field to perform aggregation on"
            },
            "Include Empty Values": {
              "type": "boolean",
              "description": "Include empty values in aggregation (for Append and Concatenate)"
            },
            "Separator": {
              "type": "select",
              "options": [
                "Comma",
                "Newline",
                "Space",
                "Tab"
              ],
              "description": "Separator for concatenation"
            }
          }
        },
        "Fields to Split By": {
          "type": "string",
          "description": "Fields to split the summary by (comma-separated)"
        }
      },
      "options": {
        "Continue if Field Not Found": {
          "type": "boolean",
          "description": "Continue and return empty item if field not found"
        },
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disable dot notation for child fields"
        },
        "Output Format": {
          "type": "select",
          "options": [
            "Each Split in a Separate Item",
            "All Splits in a Single Item"
          ],
          "description": "Output format for splits"
        },
        "Ignore items without valid fields to group by": {
          "type": "boolean",
          "description": "Ignore input items without Fields to Split By"
        }
      }
    },
    "n8n-nodes-base.switch": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Switch",
      "description": "Use the Switch node to route a workflow conditionally based on comparison operations. It's similar to the [IF](/integrations/builtin/core-nodes/n8n-nodes-base.if.md) node, but supports multiple output routes.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "Rules",
            "Expression"
          ],
          "description": "Mode for switch node operation"
        },
        "Rules": {
          "parameters": {
            "Routing Rules": {
              "type": "group",
              "description": "Routing rules to define comparison conditions",
              "repeatable": true,
              "template": {
                "DataType": {
                  "type": "selectDataType",
                  "description": "Data type and comparison operation type"
                }
              }
            },
            "Rename Output": {
              "type": "boolean",
              "description": "Rename the output field",
              "parameters": {
                "Output Name": {
                  "type": "string",
                  "description": "Desired output name"
                }
              }
            }
          }
        },
        "Expression": {
          "parameters": {
            "Number of Outputs": {
              "type": "number",
              "description": "Number of outputs for the node"
            },
            "Output Index": {
              "type": "string",
              "description": "Expression to calculate output index (must return a number)"
            }
          }
        }
      },
      "options": {
        "Rules": {
          "options": {
            "Fallback Output": {
              "type": "select",
              "options": [
                "None",
                "Extra Output",
                "Output 0"
              ],
              "description": "Fallback output for non-matching items"
            },
            "Ignore Case": {
              "type": "boolean",
              "description": "Ignore letter case in conditions"
            },
            "Less Strict Type Validation": {
              "type": "boolean",
              "description": "Attempt to convert value types based on operator"
            },
            "Send data to all matching outputs": {
              "type": "boolean",
              "description": "Send data to all outputs meeting conditions"
            }
          }
        }
      },
      "relatedResources": "Refer to [Splitting with conditionals](/flow-logic/splitting.md) for more information on using conditionals to create complex logic in n8n."
    },
    "n8n-nodes-base.totp": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "TOTP",
      "description": "The TOTP node provides a way to generate a TOTP (time-based one-time password).",
      "note": "Refer to [TOTP credentials](/integrations/builtin/credentials/totp.md) for guidance on setting up authentication.",
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "totp",
          "description": "TOTP credential to connect with"
        },
        "Operation": {
          "type": "select",
          "options": [
            "Generate Secret"
          ],
          "description": "Operation to perform"
        }
      },
      "options": {
        "Algorithm": {
          "type": "select",
          "options": [
            "SHA1",
            "SHA256",
            "SHA512"
          ],
          "description": "HMAC hashing algorithm",
          "default": "SHA1"
        },
        "Digits": {
          "type": "number",
          "description": "Number of digits in generated code",
          "default": 6
        },
        "Period": {
          "type": "number",
          "description": "Validity period of TOTP in seconds",
          "default": 30
        }
      }
    },
    "n8n-nodes-base.wait": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Wait",
      "description": "Use the Wait node pause your workflow's execution. When the workflow pauses it offloads the execution data to the database. When the resume condition is met, the workflow reloads the data and the execution continues.",
      "operations": [
        "After Time Interval",
        "At Specified Time",
        "On Webhook Call",
        "On Form Submitted"
      ],
      "After Time Interval": {
        "parameters": {
          "Wait Amount": {
            "type": "number",
            "description": "Amount of time to wait"
          },
          "Wait Unit": {
            "type": "select",
            "options": [
              "Seconds",
              "Minutes",
              "Hours",
              "Days"
            ],
            "description": "Unit of measure for wait amount"
          }
        }
      },
      "At Specified Time": {
        "parameters": {
          "Date and Time": {
            "type": "datetime",
            "description": "Date and time to wait until"
          }
        }
      },
      "On Webhook Call": {
        "parameters": {
          "Authentication": {
            "type": "select",
            "options": [
              "Basic Auth",
              "Header Auth",
              "JWT Auth",
              "None"
            ],
            "description": "Authentication for incoming resume-webhook-requests"
          },
          "Basic Auth": {
            "parameters": {
              "Credential for Basic Auth": {
                "type": "credential",
                "credentialType": "httpBasicAuth",
                "description": "Basic authentication credential"
              }
            }
          },
          "Header Auth": {
            "parameters": {
              "Credential for Header Auth": {
                "type": "credential",
                "credentialType": "httpHeaderAuth",
                "description": "Header authentication credential"
              }
            }
          },
          "JWT Auth": {
            "parameters": {
              "Credential for JWT Auth": {
                "type": "credential",
                "credentialType": "jwt",
                "description": "JWT authentication credential"
              }
            }
          },
          "HTTP Method": {
            "type": "select",
            "options": [
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT"
            ],
            "description": "HTTP method for webhook"
          },
          "Response Code": {
            "type": "number",
            "description": "HTTP response code for webhook"
          },
          "Respond": {
            "type": "select",
            "options": [
              "Immediately",
              "When Last Node Finishes",
              "Using 'Respond to Webhook' Node"
            ],
            "description": "How and when to respond to webhook",
            "details": {
              "When Last Node Finishes": {
                "parameters": {
                  "Response Data": {
                    "type": "select",
                    "options": [
                      "All Entries",
                      "First Entry JSON",
                      "First Entry Binary",
                      "No Response Body"
                    ],
                    "description": "Data to return in response"
                  }
                }
              }
            }
          },
          "Limit Wait Time": {
            "type": "boolean",
            "description": "Automatically resume execution after a limit",
            "parameters": {
              "Limit Type": {
                "type": "select",
                "options": [
                  "After Time Interval",
                  "At Specified Time"
                ],
                "description": "Type of wait time limit",
                "details": {
                  "After Time Interval": {
                    "parameters": {
                      "Amount": {
                        "type": "number",
                        "description": "Amount of time to wait"
                      },
                      "Unit": {
                        "type": "select",
                        "options": [
                          "Seconds",
                          "Minutes",
                          "Hours",
                          "Days"
                        ],
                        "description": "Unit of time for the limit"
                      }
                    }
                  },
                  "At Specified Time": {
                    "parameters": {
                      "Max Date and Time": {
                        "type": "datetime",
                        "description": "Specified time the node should resume"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "options": {
          "On Webhook Call": {
            "options": {
              "Binary Property": {
                "type": "string",
                "description": "Binary property to write received file data to"
              },
              "Ignore Bots": {
                "type": "boolean",
                "description": "Ignore requests from bots"
              },
              "IP(s) Whitelist": {
                "type": "string",
                "description": "Comma-separated list of allowed IP addresses"
              },
              "No Response Body": {
                "type": "boolean",
                "description": "Prevent n8n from sending a response body"
              },
              "Raw Body": {
                "type": "boolean",
                "description": "Return body in a raw format (JSON/XML)"
              },
              "Response Data": {
                "type": "string",
                "description": "Custom data to send in response"
              },
              "Response Headers": {
                "type": "keyValuePair",
                "description": "Additional headers to send in response"
              },
              "Webhook Suffix": {
                "type": "string",
                "description": "Suffix to append to resume URL for unique URLs"
              }
            }
          }
        }
      },
      "On Form Submitted": {
        "parameters": {
          "Form Title": {
            "type": "string",
            "description": "Title to display at the top of the form"
          },
          "Form Description": {
            "type": "string",
            "description": "Description to display beneath the form title"
          },
          "Form Fields": {
            "type": "repeatable",
            "description": "Fields to appear on the form",
            "template": {
              "Field Label": {
                "type": "string",
                "description": "Label for the form field"
              },
              "Field Type": {
                "type": "select",
                "options": [
                  "Date",
                  "Dropdown List",
                  "Number",
                  "Password",
                  "Text",
                  "Textarea"
                ],
                "description": "Type of form field"
              },
              "Dropdown List": {
                "parameters": {
                  "Field Options": {
                    "type": "repeatable",
                    "description": "Dropdown options",
                    "template": {
                      "Field Option": {
                        "type": "string",
                        "description": "Option for the dropdown list"
                      }
                    }
                  },
                  "Multiple Choice": {
                    "type": "boolean",
                    "description": "Allow multiple choices in dropdown"
                  }
                }
              },
              "Required Field": {
                "type": "boolean",
                "description": "Field must be completed to submit form"
              }
            }
          },
          "Respond When": {
            "type": "select",
            "options": [
              "Form Is Submitted",
              "Workflow Finishes",
              "Using 'Respond to Webhook' Node"
            ],
            "description": "When to respond to form submission"
          },
          "Limit Wait Time": {
            "type": "boolean",
            "description": "Automatically resume execution after a limit",
            "parameters": {
              "Limit Type": {
                "type": "select",
                "options": [
                  "After Time Interval",
                  "At Specified Time"
                ],
                "description": "Type of wait time limit",
                "details": {
                  "After Time Interval": {
                    "parameters": {
                      "Amount": {
                        "type": "number",
                        "description": "Amount of time to wait"
                      },
                      "Unit": {
                        "type": "select",
                        "options": [
                          "Seconds",
                          "Minutes",
                          "Hours",
                          "Days"
                        ],
                        "description": "Unit of time for the limit"
                      }
                    }
                  },
                  "At Specified Time": {
                    "parameters": {
                      "Max Date and Time": {
                        "type": "datetime",
                        "description": "Specified time the node should resume"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "options": {
          "On Form Response": {
            "options": {
              "Form Response": {
                "type": "select",
                "options": [
                  "Form Submitted Text",
                  "Redirect URL"
                ],
                "description": "How and what you want the form to Respond With",
                "details": {
                  "Form Submitted Text": {
                    "parameters": {
                      "Text to Show": {
                        "type": "string",
                        "description": "Text to display after user fills out form"
                      }
                    }
                  },
                  "Redirect URL": {
                    "parameters": {
                      "URL to Redirect to": {
                        "type": "string",
                        "description": "URL to redirect to after form submission"
                      }
                    }
                  }
                }
              },
              "Webhook Suffix": {
                "type": "string",
                "description": "Suffix to append to resume URL for unique URLs"
              }
            }
          }
        }
      },
      "timeBasedOperations": "For the time-based resume operations, note that:\n\n* For wait times less than 65 seconds, the workflow doesn't offload execution data to the database. Instead, the process continues to run and the execution resumes after the specified interval passes.\n* The n8n server time is always used regardless of the timezone setting. Workflow timezone settings, and any changes made to them, don't affect the Wait node interval or specified time."
    },
    "n8n-nodes-base.workflowtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Workflow Trigger node",
      "description": "The Workflow Trigger node gets triggered when a workflow is updated or activated.",
      "warning": "n8n has deprecated the Workflow Trigger node and moved its functionality to the [n8n Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.n8ntrigger.md).",
      "note": "If you want to use the Workflow Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow.",
      "parameters": {
        "Events": {
          "type": "multiOptions",
          "options": [
            "Active Workflow Updated",
            "Workflow Activated"
          ],
          "description": "Events to trigger on"
        }
      }
    },
    "n8n-nodes-base.xml": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "XML",
      "description": "Use the XML node to convert data from and to XML.",
      "note": "If your XML is within a binary file, use the [Extract from File](/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile.md) node to convert it to text first.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "JSON to XML",
            "XML to JSON"
          ],
          "description": "Format for data conversion"
        },
        "Property Name": {
          "type": "string",
          "description": "Property containing data to convert"
        }
      },
      "options": {
        "Attribute Key": {
          "type": "string",
          "description": "Prefix used to access attributes",
          "default": "$"
        },
        "Character Key": {
          "type": "string",
          "description": "Prefix used to access character content",
          "default": "_"
        },
        "JSON to XML": {
          "options": {
            "Allow Surrogate Chars": {
              "type": "boolean",
              "description": "Allow using characters from Unicode surrogate blocks"
            },
            "Cdata": {
              "type": "boolean",
              "description": "Wrap text nodes in <![CDATA[ ... ]]>"
            },
            "Headless": {
              "type": "boolean",
              "description": "Omit the XML header"
            },
            "Root Name": {
              "type": "string",
              "description": "Root element name to use"
            }
          }
        },
        "XML to JSON": {
          "options": {
            "Explicit Array": {
              "type": "boolean",
              "description": "Put child nodes in an array"
            },
            "Explicit Root": {
              "type": "boolean",
              "description": "Get the root node in the resulting object"
            },
            "Ignore Attributes": {
              "type": "boolean",
              "description": "Ignore all XML attributes"
            },
            "Merge Attributes": {
              "type": "boolean",
              "description": "Merge attributes and child elements as properties"
            },
            "Normalize": {
              "type": "boolean",
              "description": "Trim whitespaces inside text nodes"
            },
            "Normalize Tags": {
              "type": "boolean",
              "description": "Normalize all tag names to lowercase"
            },
            "Trim": {
              "type": "boolean",
              "description": "Trim whitespace at start/end of text nodes"
            }
          }
        }
      }
    },
    "n8n-nodes-base.code": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Code node",
        "description": "<!-- --8<-- \"_snippets/integrations/builtin/core-nodes/code-node.md\" -->"
      },
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Code node common issues",
        "description": "Here are some common errors and issues with the [Code node](/integrations/builtin/core-nodes/n8n-nodes-base.code/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Code doesn't return items properly",
          "A 'json' property isn't an object",
          "Code doesn't return an object",
          "'import' and 'export' may only appear at the top level",
          "Cannot find module '<module>'",
          "Using global variables"
        ]
      },
      "keyboard-shortcuts": {
        "contentType": "reference",
        "title": "Code editor keyboard shortcuts",
        "description": "A list of the keyboard shortcuts, for multiple platforms, which are supported by the Code node editor.",
        "priority": "high",
        "sections": [
          "Cursor Movement",
          "Selection",
          "Basic Operations",
          "Delete Operations",
          "Line Operations",
          "Autocomplete",
          "Indentation",
          "Code Folding",
          "Multi-cursor",
          "Formatting",
          "Search & Navigation"
        ]
      }
    },
    "n8n-nodes-base.executecommand": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Execute Command",
        "description": "The Execute Command node runs shell commands on the host machine that runs n8n.",
        "noteWhichShell": "This node executes the command in the default shell of the host machine. For example, `cmd` on Windows and `zsh` on macOS.\n\nIf you run n8n with Docker, your command will run in the n8n container and not the Docker host.",
        "noteNotAvailableCloud": "This node isn't available on n8n Cloud.",
        "parameters": {
          "Execute Once": {
            "type": "boolean",
            "description": "Execute only once or per input item"
          },
          "Command": {
            "type": "string",
            "description": "Command to execute on the host machine"
          }
        },
        "runMultipleCommands": "Use one of two methods to run multiple commands in one Execute Command node:\n\n* Enter each command on one line separated by `&&`.\n* Enter each command on a separate line.",
        "runCurlCommand": "You can also use the [HTTP Request](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) node to make a cURL request.\n\nIf you want to run the curl command in the Execute Command node, you will have to build a Docker image based on the existing n8n image. The default n8n Docker image uses Alpine Linux. You will have to install the curl package."
      },
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Execute Command node common issues",
        "description": "Here are some common errors and issues with the [Execute Command node](/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Command failed: <command> /bin/sh: <command>: not found",
          "Error: stdout maxBuffer length exceeded"
        ]
      }
    },
    "n8n-nodes-base.httprequest": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "HTTP Request node",
        "description": "The HTTP Request node is one of the most versatile nodes in n8n. It allows you to make HTTP requests to query data from any app or service with a REST API.",
        "apiTerminology": "When using this node, you're creating a REST API call. You need some understanding of basic API terminology and concepts.",
        "waysToCreateRequest": [
          "configure node parameters",
          "import a curl command"
        ],
        "noteCredentials": "Refer to [HTTP Request credentials](/integrations/builtin/credentials/httprequest.md) for guidance on setting up authentication."
      },
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "HTTP Request node common issues",
        "description": "Here are some common errors and issues with the [HTTP Request node](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Bad request - please check your parameters",
          "The resource you are requesting could not be found",
          "JSON parameter need to be an valid JSON",
          "Forbidden - perhaps check your credentials",
          "429 - The service is receiving too many requests from you"
        ],
        "solutions429Error": {
          "batching": "Use this option to send requests in batches and introduce a delay between them.",
          "retryOnFail": "Use this option to retry the node after a failed attempt."
        }
      }
    },
    "n8n-nodes-base.removeduplicates": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "medium",
        "title": "Remove Duplicates node",
        "description": "Use the Remove Duplicates node to identify and delete items that are:\n\n* identical across all fields or a subset of fields in a single execution\n* identical to or surpassed by items seen in previous executions\n\nThis is helpful in situations where you can end up with duplicate data, such as a user creating multiple accounts, or a customer submitting the same order multiple times. When working with large datasets it becomes more difficult to spot and remove these items.\n\nBy comparing against data from previous executions, the Remove Duplicates node can  delete items seen in earlier executions. It can also ensure that new items have a later date or a higher value than previous values.",
        "noteMajorChanges": "The n8n team overhauled this node in n8n 1.64.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document [here](https://github.com/n8n-io/n8n-docs/blob/7a66308290e6e5b104fcb82a3beafa0d6987df36/docs/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates.md){:target=_blank .external-link}.",
        "operationModes": [
          "Remove Items Repeated Within Current Input",
          "Remove Items Processed in Previous Executions",
          "Clear Deduplication History"
        ],
        "Remove Items Repeated Within Current Input": {
          "parameters": {
            "Compare": {
              "type": "select",
              "options": [
                "All Fields",
                "All Fields Except",
                "Selected Fields"
              ],
              "description": "Fields of input data to compare"
            }
          },
          "options": {
            "Disable Dot Notation": {
              "type": "boolean",
              "description": "Disable dot notation for child fields"
            },
            "Remove Other Fields": {
              "type": "boolean",
              "description": "Remove fields not used in comparison"
            }
          }
        },
        "Remove Items Processed in Previous Executions": {
          "parameters": {
            "Keep Items Where": {
              "type": "select",
              "options": [
                "Value Is New",
                "Value Is Higher than Any Previous Value",
                "Value Is a Date Later than Any Previous Date"
              ],
              "description": "Criteria for keeping items"
            },
            "Value to Dedupe On": {
              "type": "string",
              "description": "Input field(s) to compare based on Keep Items Where"
            }
          },
          "options": {
            "Scope": {
              "type": "select",
              "options": [
                "Node",
                "Workflow"
              ],
              "description": "Scope for deduplication data storage"
            },
            "History Size": {
              "type": "number",
              "description": "Number of items to store for duplicate tracking (Value Is New only)"
            }
          }
        },
        "Clear Deduplication History": {
          "parameters": {
            "Mode": {
              "type": "select",
              "options": [
                "Clean Database"
              ],
              "description": "Mode for managing stored items"
            }
          },
          "options": {
            "Scope": {
              "type": "select",
              "options": [
                "Node",
                "Workflow"
              ],
              "description": "Scope for managing deduplication database"
            }
          }
        }
      },
      "templates-and-examples": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "medium",
        "title": "Remove Duplicates node templates and Examples",
        "description": "Documentation for templates and examples in the Remove Duplicates node in n8n, a workflow automation platform. Includes templates using the node and examples of how to use it."
      }
    },
    "n8n-nodes-base.scheduletrigger": {
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Schedule Trigger node common issues",
        "description": "Here are some common errors and issues with the [Schedule Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Invalid cron expression",
          "Scheduled workflows run at the wrong time",
          "Variables not working as expected",
          "Changing the trigger interval"
        ]
      },
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Schedule Trigger node",
        "description": "Use the Schedule Trigger node to run workflows at fixed intervals and times. This works in a similar way to the Cron software utility in Unix-like systems.",
        "note": "If a workflow uses the Schedule node as a trigger, make sure that you save and activate the workflow.",
        "parameters": {
          "Trigger Rules": {
            "type": "group",
            "description": "Schedule trigger rules",
            "repeatable": true,
            "template": {
              "Trigger Interval": {
                "type": "select",
                "options": [
                  "Seconds",
                  "Minutes",
                  "Hours",
                  "Days",
                  "Weeks",
                  "Months",
                  "Custom (Cron)"
                ],
                "description": "Time interval unit of measure"
              },
              "Seconds": {
                "parameters": {
                  "Seconds Between Triggers": {
                    "type": "number",
                    "description": "Seconds between each trigger"
                  }
                }
              },
              "Minutes": {
                "parameters": {
                  "Minutes Between Triggers": {
                    "type": "number",
                    "description": "Minutes between each trigger"
                  }
                }
              },
              "Hours": {
                "parameters": {
                  "Hours Between Triggers": {
                    "type": "number",
                    "description": "Hours between each trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Days": {
                "parameters": {
                  "Days Between Triggers": {
                    "type": "number",
                    "description": "Days between each trigger"
                  },
                  "Trigger at Hour": {
                    "type": "selectHour",
                    "description": "Hour of the day to trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Weeks": {
                "parameters": {
                  "Weeks Between Triggers": {
                    "type": "number",
                    "description": "Weeks between each trigger"
                  },
                  "Trigger on Weekdays": {
                    "type": "multiOptions",
                    "options": [
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday",
                      "Sunday"
                    ],
                    "description": "Day(s) of the week to trigger"
                  },
                  "Trigger at Hour": {
                    "type": "selectHour",
                    "description": "Hour of the day to trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Months": {
                "parameters": {
                  "Months Between Triggers": {
                    "type": "number",
                    "description": "Months between each trigger"
                  },
                  "Trigger at Day of Month": {
                    "type": "number",
                    "description": "Day of the month to trigger (1-31)"
                  },
                  "Trigger at Hour": {
                    "type": "selectHour",
                    "description": "Hour of the day to trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Custom (Cron)": {
                "parameters": {
                  "Expression": {
                    "type": "cronExpression",
                    "description": "Custom cron expression for schedule"
                  }
                }
              }
            }
          }
        },
        "customCronIntervalExamples": {
          "everyXSeconds": "`*/10 * * * * *` - Every 10 seconds.",
          "everyXMinutes": "`*/5 * * * *` - Every 5 minutes.",
          "hourly": "`0 * * * *` - Every hour on the hour.",
          "daily": "`0 6 * * *` - At 6:00 AM every day.",
          "weekly": "`0 12 * * 1` - At noon every Monday.",
          "monthly": "`0 0 1 * *` - At midnight on the 1st of every month.",
          "everyXDays": "`0 0 */3 * *` - At midnight every 3rd day.",
          "onlyWeekdays": "`0 9 * * 1-5` - At 9:00 AM Monday through Friday.",
          "customHourlyRange": "`0 9-17 * * *` - Every hour from 9:00 AM to 5:00 PM every day.",
          "quarterly": "`0 0 1 1,4,7,10 *` - At midnight on the 1st of January, April, July, and October."
        },
        "warningVariablesInCron": "While variables can be used in the scheduled trigger, their values only get evaluated when the workflow is activated. If you alter a variable's value in the settings after a workflow is activated, the changes won't alter the cron schedule. To re-evaluate the variable, set the workflow to **Inactive** and then back to **Active** again"
      }
    },
    "n8n-nodes-base.webhook": {
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Webhook node common issues",
        "description": "Here are some common issues and questions for the [Webhook node](/integrations/builtin/core-nodes/n8n-nodes-base.webhook/index.md) and suggested solutions.",
        "issues": [
          "Listen for multiple HTTP methods",
          "Use the HTTP Request node to trigger the Webhook node",
          "Use curl to trigger the Webhook node",
          "Send a response of type string",
          "Test URL versus Production URL",
          "IPs in Whitelist are failing to connect"
        ]
      },
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Webhook node",
        "description": "Use the Webhook node to create [webhooks](https://en.wikipedia.org/wiki/Webhook){:target=_blank .external-link}, which can receive data from apps and services when an event occurs. It's a trigger node, which means it can start an n8n workflow. This allows services to connect to n8n and run a workflow.",
        "usage": "You can use the Webhook node as a trigger for a workflow when you want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it useful for building a workflow to process data and return the results, like an API endpoint.",
        "workflowDevelopmentProcess": "n8n provides different **Webhook URL**s for testing and production. The testing URL includes an option to **Listen for test event**. Refer to [Workflow development](/integrations/builtin/core-nodes/n8n-nodes-base.webhook/workflow-development.md) for more information on building, testing, and shifting your Webhook node to production.",
        "parameters": {
          "Webhook URLs": {
            "type": "urls",
            "description": "Test and Production Webhook URLs"
          },
          "HTTP Method": {
            "type": "selectHttpMethod",
            "description": "HTTP Request Method",
            "noteMaxPayload": "The webhook maximum payload size is 16MB. If you're self-hosting n8n, you can change this using the [endpoint environment variable](/hosting/configuration/environment-variables/endpoints.md) `N8N_PAYLOAD_SIZE_MAX`."
          },
          "Path": {
            "type": "string",
            "description": "Webhook URL path (supports route parameters)"
          },
          "Authentication": {
            "type": "selectAuthentication",
            "description": "Authentication method for webhook access"
          },
          "Respond": {
            "type": "select",
            "options": [
              "Immediately",
              "When Last Node Finishes",
              "Using 'Respond to Webhook' Node"
            ],
            "description": "How and when to respond to webhook calls"
          },
          "Response Code": {
            "type": "number",
            "description": "HTTP response code for successful execution"
          },
          "Response Data": {
            "type": "select",
            "options": [
              "All Entries",
              "First Entry JSON",
              "First Entry Binary",
              "No Response Body"
            ],
            "description": "Data to include in response body (When Last Node Finishes only)"
          }
        },
        "options": {
          "Allowed Origins (CORS)": {
            "type": "string",
            "description": "Permitted cross-origin domains (CORS)"
          },
          "Binary Property": {
            "type": "string",
            "description": "Binary property to write received file data to"
          },
          "Ignore Bots": {
            "type": "boolean",
            "description": "Ignore requests from bots"
          },
          "IP(s) Whitelist": {
            "type": "string",
            "description": "Comma-separated list of allowed IP addresses"
          },
          "No Response Body": {
            "type": "boolean",
            "description": "Prevent sending a response body"
          },
          "Raw Body": {
            "type": "boolean",
            "description": "Receive data in raw format (JSON/XML)"
          },
          "Response Content-Type": {
            "type": "selectContentType",
            "description": "Format for the webhook body"
          },
          "Response Data": {
            "type": "string",
            "description": "Custom data to send with the response"
          },
          "Response Headers": {
            "type": "keyValuePair",
            "description": "Extra headers to send in webhook response"
          },
          "Property Name": {
            "type": "string",
            "description": "JSON key to return (First Entry JSON Response Data only)"
          }
        }
      },
      "workflow-development": {
        "contentType": "howto",
        "priority": "critical",
        "title": "Webhook node workflow development documentation",
        "description": "Learn how to build, test, and use the Webhook node in your workflows in n8n.",
        "webhookURLs": "n8n generates two **Webhook URLs** for each Webhook node: a **Test URL** and a **Production URL**.",
        "buildAndTestWorkflows": "While building or testing a workflow, use the **Test** webhook URL.",
        "productionWorkflows": "When your workflow is ready, switch to using the **Production** webhook URL. You can then activate your workflow, and n8n runs it automatically when an external service calls the webhook URL."
      }
    },
    "n8n-nodes-langchain.chattrigger": {
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Chat Trigger node common issues",
        "description": "Here are some common errors and issues with the [Chat Trigger node](/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Pass data from a website to an embedded Chat Trigger node",
          "Chat Trigger node doesn't fetch previous messages"
        ]
      },
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Chat Trigger node",
        "description": "Use the Chat Trigger node when building AI workflows for chatbots and other chat interfaces. You can configure how users access the chat, using one of n8n's provided interfaces, or your own. You can add authentication.",
        "workflowExecutionUsage": "Every message to the Chat Trigger executes your workflow. This means that one conversation where a user sends 10 messages uses 10 executions from your execution allowance. Check your payment plan for details of your allowance.",
        "noteManualChatTrigger": "This node replaces the Manual Chat Trigger node from version 1.24.0.",
        "parameters": {
          "Make Chat Publicly Available": {
            "type": "boolean",
            "description": "Make chat publicly available (Hosted Chat, Embedded Chat)"
          },
          "Mode": {
            "type": "select",
            "options": [
              "Hosted Chat",
              "Embedded Chat"
            ],
            "description": "Mode of chat access"
          },
          "Authentication": {
            "type": "select",
            "options": [
              "None",
              "Basic Auth",
              "n8n User Auth"
            ],
            "description": "Authentication method for chat access"
          },
          "Basic Auth": {
            "parameters": {
              "Credential for Basic Auth": {
                "type": "credential",
                "credentialType": "httpBasicAuth",
                "description": "Basic authentication credential"
              }
            }
          },
          "Initial Message(s)": {
            "type": "string",
            "description": "Message to display when user arrives on page (Hosted Chat only)"
          }
        },
        "options": {
          "Hosted Chat": {
            "options": {
              "Allowed Origin (CORS)": {
                "type": "string",
                "description": "Allowed origins (CORS) for chat URL"
              },
              "Input Placeholder": {
                "type": "string",
                "description": "Input placeholder text"
              },
              "Title": {
                "type": "string",
                "description": "Chat interface title"
              },
              "Subtitle": {
                "type": "string",
                "description": "Chat interface subtitle"
              },
              "Load Previous Session": {
                "type": "select",
                "options": [
                  "Off",
                  "From Memory"
                ],
                "description": "Load chat messages from previous session"
              },
              "Response Mode": {
                "type": "select",
                "options": [
                  "When Last Node Finishes",
                  "Using 'Respond to Webhook' Node"
                ],
                "description": "Response mode for chat workflow"
              },
              "Require Button Click to Start Chat": {
                "type": "boolean",
                "description": "Display 'New Conversation' button"
              }
            }
          },
          "Embedded Chat": {
            "options": {
              "Allowed Origin (CORS)": {
                "type": "string",
                "description": "Allowed origins (CORS) for chat URL"
              },
              "Load Previous Session": {
                "type": "select",
                "options": [
                  "Off",
                  "From Memory"
                ],
                "description": "Load chat messages from previous session"
              },
              "Response Mode": {
                "type": "select",
                "options": [
                  "When Last Node Finishes",
                  "Using 'Respond to Webhook' Node"
                ],
                "description": "Response mode for chat workflow"
              }
            }
          }
        },
        "relatedResources": "<!-- --8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\" -->",
        "setChatResponseManually": "You need to manually set the chat response when you don't want to directly send the output of an Agent or Chain node to the user. Instead, you want to take the output of an Agent or Chain node and modify it or do something else with it before sending it back to the user.\n\nIn a basic workflow, the Agent and Chain nodes output a parameter named either `output` or `text`, and the Chat trigger sends the value of this parameter to the user as the chat response. \n\nIf you need to manually create the response sent to the user, you must create a parameter named either `text` or `output`. If you use a different parameter name, the Chat trigger sends the entire object as its response, not just the value."
      }
    }
  }
}



================================================
File: docs.txt
================================================
n8n’s automation platform comprises a comprehensive ecosystem of built‐in integrations, workflow management tools, and execution monitoring features that work together to help you build, test, and deploy automated processes. The platform’s built‐in integrations include a complete node library—the reference documentation for every built‐in node and its associated credentials. Core nodes provide actions and triggers for logic, scheduling, and generic API calls, while cluster nodes extend functionality as summarized in dedicated snippets. Credentials for external services (ranging from API keys and email/password combinations to multi‐line private keys) are stored encrypted in the database using a randomly generated personal encryption key (saved under ~/.n8n/config), and only node types with proper access rights can request them. In addition, community nodes offer custom extensions built by users, and guidance is available for installing and creating these nodes. n8n also addresses API rate limits, which restrict request frequency and data volume; when a node hits a rate limit (for example, receiving error 429 with the message “The service is receiving too many requests from you”), you can handle this either by enabling the “Retry On Fail” setting—configuring a wait period (in milliseconds) between retries—or by batching requests using the Loop Over Items node combined with the Wait node. The HTTP Request node itself provides built‐in batching options (specifying items per batch and a batch interval) and supports pagination for APIs that return data in chunks. An AI glossary within the documentation defines terms such as “completion” (the text generated by a model like GPT), “hallucinations” (when an LLM mistakenly identifies patterns or objects that do not exist), “vector database” (a database storing mathematical representations of information for similarity searches), and “vector store” (another term for a vector database, used with embeddings and retrievers to allow an AI to access information). Workflows in n8n are collections of interconnected nodes that automate processes; you create a workflow on the visual canvas by clicking the create button (from the side menu or overview page), choosing to work in your personal space or a project, and starting with a trigger node. Workflows are saved in JSON format and can be exported or imported via copy-paste, the editor UI (using options like Download, Import from URL, or Import from File), or via command-line interface commands. Version history enables you to view and restore previous versions created when you save, restore an old version (with a backup saved automatically), or pull from a Git repository via source control; note that workflow history (the record of different versions) is distinct from execution history (the record of individual workflow runs). Workflow settings let you customize execution order—choosing between legacy parallel execution (v0) and the recommended sequential execution (v1) based on canvas positioning—as well as assign an error workflow (triggered by the Error Trigger node), set the timezone (important for schedule triggers), and decide whether to save failed, successful, or manual executions and even the execution progress (which allows a workflow to resume after an error). Workflow sharing is supported on Pro and Enterprise plans and enables users to share workflows with specific permissions (view, run, update, export, but not delete or share further unless you are the creator), while tags provide a global labeling system that lets you filter workflows; templates offer pre-built examples to help you get started, and workflow IDs are available in the URL or workflow settings. The building blocks of workflows include nodes, connections, and sticky notes. Nodes, the core elements that fetch, process, or send data, come with controls for testing, deactivation, deletion, and context actions (such as renaming, pinning, copying, or duplicating), and they include settings for request options (batching, ignoring SSL issues, specifying a proxy, setting timeouts), options like Always Output Data, Execute Once (processing only the first input item), Retry On Fail, and error handling choices (stopping the workflow, continuing with or without error output). Connections are the links between nodes that route data from one node’s output to another’s input, and sticky notes allow you to annotate workflows with Markdown-formatted text (supporting bold, italics, headings, links, lists, and image adjustments such as full-width display), and can be repositioned, resized, or color-changed to help organize and document your automation. Executions are individual runs of a workflow and are categorized into manual executions (triggered via the Test Workflow button for iterative testing), partial executions (which run a subset of nodes, useful when troubleshooting specific steps, though they require a trigger such as a manual trigger node), and production executions (which run automatically when the workflow is active and triggered by an event or schedule). The executions list is available both at the workflow level (showing executions for a single workflow) and globally (all executions across your instance), and you can filter executions by workflow name, status (Failed, Running, Success, Waiting), start time, or custom data (data that you set using the Code node or Execution Data node). If an execution fails, you can retry it and load its data back into the editor for debugging. Custom execution data—set via JavaScript or Python code (with limitations on key and value lengths and a maximum of 10 items)—can be recorded with each execution and later retrieved for filtering or processing. Manual executions help you test workflow logic and data transformations, with options like data pinning (which “freezes” output data so that subsequent runs use the same input, making debugging more predictable), while partial executions let you re-run specific nodes; production executions occur automatically once workflows are activated. In summary, n8n’s documentation unifies detailed guidance on built-in integrations (including core and cluster nodes, credentials, and community nodes), API rate limit handling (through retry and batching mechanisms), AI-related terminology (covering agents, chains, memory, tools, and dynamic parameter auto-population via functions like $fromAI()), and the creation, export/import, versioning, sharing, and tagging of workflows, along with comprehensive coverage of workflow components (nodes, connections, sticky notes) and execution monitoring (manual, partial, and production runs), ensuring that users have all the necessary information to design, test, deploy, and debug robust automated processes in a logically structured, secure, and scalable environment.


================================================
File: integration-credentials.json
================================================
{
  "actionnetwork": {
    "serviceName": "Action Network",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Action Network API Key"
          }
        ]
      }
    }
  },
  "activecampaign": {
    "serviceName": "ActiveCampaign",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API URL",
            "type": "string",
            "required": true,
            "description": "Your ActiveCampaign API URL"
          },
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your ActiveCampaign API Key"
          }
        ]
      }
    }
  },
  "acuityscheduling": {
    "serviceName": "Acuity Scheduling",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "User ID",
            "type": "number",
            "required": true,
            "description": "Your Acuity Scheduling User ID"
          },
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Acuity Scheduling API Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Acuity Scheduling Client ID"
          },
          {
            "name": "Client Secret",
            "type": "string",
            "required": true,
            "description": "Your Acuity Scheduling Client Secret"
          }
        ]
      }
    }
  },
  "adalo": {
    "serviceName": "Adalo",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Adalo API Key"
          },
          {
            "name": "App ID",
            "type": "string",
            "required": true,
            "description": "Your Adalo App ID"
          }
        ]
      }
    }
  },
  "affinity": {
    "serviceName": "Affinity",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Affinity API Key"
          }
        ]
      }
    }
  },
  "agilecrm": {
    "serviceName": "Agile CRM",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Email Address",
            "type": "email",
            "required": true,
            "description": "Your Agile CRM registered Email Address"
          },
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Agile CRM REST API Key"
          },
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Agile CRM Subdomain"
          }
        ]
      }
    }
  },
  "airtable": {
    "serviceName": "Airtable",
    "authenticationMethods": {
      "personalAccessToken": {
        "type": "Personal Access Token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "string",
            "required": true,
            "description": "Your Airtable Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Airtable OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "string",
            "required": true,
            "description": "Your Airtable OAuth Client Secret"
          }
        ]
      }
    }
  },
  "alienvault": {
    "serviceName": "AlienVault",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "OTX Key",
            "type": "string",
            "required": true,
            "description": "Your AlienVault OTX Key"
          }
        ]
      }
    }
  },
  "amqp": {
    "serviceName": "AMQP",
    "authenticationMethods": {
      "amqpConnection": {
        "type": "AMQP Connection",
        "parameters": [
          {
            "name": "Hostname",
            "type": "string",
            "required": true,
            "description": "Hostname of your AMQP message broker"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "description": "Port number for the connection"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Username for AMQP connection"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for AMQP connection"
          },
          {
            "name": "Transport Type",
            "type": "options",
            "options": ["tcp", "tls"],
            "required": false,
            "description": "Transport type for AMQP connection"
          }
        ]
      }
    }
  },
  "anthropic": {
    "serviceName": "Anthropic",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Anthropic API Key"
          }
        ]
      }
    }
  },
  "apitemplateio": {
    "serviceName": "APITemplate.io",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your APITemplate.io API Key"
          }
        ]
      }
    }
  },
  "asana": {
    "serviceName": "Asana",
    "authenticationMethods": {
      "accessToken": {
        "type": "Access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "string",
            "required": true,
            "description": "Your Asana Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Asana OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "string",
            "required": true,
            "description": "Your Asana OAuth Client Secret"
          }
        ]
      }
    }
  },
  "auth0management": {
    "serviceName": "Auth0 Management",
    "authenticationMethods": {
      "apiClientSecret": {
        "type": "API client secret",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Auth0 Domain"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Auth0 Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Auth0 Client Secret"
          }
        ]
      }
    }
  },
  "automizy": {
    "serviceName": "Automizy",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Token",
            "type": "string",
            "required": true,
            "description": "Your Automizy API Token"
          }
        ]
      }
    }
  },
  "autopilot": {
    "serviceName": "Autopilot",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Autopilot API Key"
          }
        ]
      }
    }
  },
  "aws": {
    "serviceName": "AWS",
    "authenticationMethods": {
      "apiAccessKey": {
        "type": "API access key",
        "parameters": [
          {
            "name": "Region",
            "type": "options",
            "options": [
              "af-south-1",
              "ap-east-1",
              "ap-northeast-1",
              "ap-northeast-2",
              "ap-northeast-3",
              "ap-south-1",
              "ap-south-2",
              "ap-southeast-1",
              "ap-southeast-2",
              "ap-southeast-3",
              "ca-central-1",
              "eu-central-1",
              "eu-north-1",
              "eu-south-1",
              "eu-south-2",
              "eu-west-1",
              "eu-west-2",
              "eu-west-3",
              "il-central-1",
              "me-central-1",
              "me-south-1",
              "sa-east-1",
              "us-east-1",
              "us-east-2",
              "us-gov-east-1",
              "us-gov-west-1",
              "us-west-1",
              "us-west-2"
            ],
            "required": true,
            "description": "Your AWS Region"
          },
          {
            "name": "Access Key ID",
            "type": "string",
            "required": true,
            "description": "Your AWS Access Key ID"
          },
          {
            "name": "Secret Access Key",
            "type": "password",
            "required": true,
            "description": "Your AWS Secret Access Key"
          },
          {
            "name": "Temporary security credential",
            "type": "boolean",
            "required": false,
            "description": "Whether to use temporary security credential"
          },
          {
            "name": "Session token",
            "type": "string",
            "required": false,
            "description": "Your AWS Session token (if using temporary security credential)",
            "displayOptions": {
              "show": {
                "temporarySecurityCredential": [
                  true
                ]
              }
            }
          },
          {
            "name": "Custom Endpoints",
            "type": "json",
            "required": false,
            "description": "Custom endpoints for VPC connection",
            "displayOptions": {
              "show": {
                "temporarySecurityCredential": [
                  false
                ]
              }
            }
          }
        ]
      }
    }
  },
  "azureopenai": {
    "serviceName": "Azure OpenAI",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Resource Name",
            "type": "string",
            "required": true,
            "description": "Your Azure OpenAI Resource Name"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Azure OpenAI API Key"
          },
          {
            "name": "API Version",
            "type": "string",
            "required": true,
            "description": "Your Azure OpenAI API Version"
          }
        ]
      }
    }
  },
  "azurestorage": {
    "serviceName": "Azure Storage",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Azure Storage OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Azure Storage OAuth Client Secret"
          }
        ]
      },
      "sharedKey": {
        "type": "Shared Key",
        "parameters": [
          {
            "name": "Account",
            "type": "string",
            "required": true,
            "description": "Your Azure Storage Account Name"
          },
          {
            "name": "Key",
            "type": "password",
            "required": true,
            "description": "Your Azure Storage Shared Key"
          }
        ]
      }
    }
  },
  "bamboohr": {
    "serviceName": "BambooHR",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your BambooHR Subdomain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your BambooHR API Key"
          }
        ]
      }
    }
  },
  "bannerbear": {
    "serviceName": "Bannerbear",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Project API Key",
            "type": "string",
            "required": true,
            "description": "Your Bannerbear Project API Key"
          }
        ]
      }
    }
  },
  "baserow": {
    "serviceName": "Baserow",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your Baserow Host URL"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Baserow Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Baserow Password"
          }
        ]
      }
    }
  },
  "beeminder": {
    "serviceName": "Beeminder",
    "authenticationMethods": {
      "apiUserToken": {
        "type": "API user token",
        "parameters": [
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your Beeminder Username"
          },
          {
            "name": "Auth Token",
            "type": "password",
            "required": true,
            "description": "Your Beeminder Auth Token"
          }
        ]
      }
    }
  },
  "bitbucket": {
    "serviceName": "Bitbucket",
    "authenticationMethods": {
      "apiUsernameAppPassword": {
        "type": "API username/app password",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Bitbucket Username"
          },
          {
            "name": "App Password",
            "type": "password",
            "required": true,
            "description": "Your Bitbucket App Password"
          }
        ]
      }
    }
  },
  "bitly": {
    "serviceName": "Bitly",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Bitly Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Bitly OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Bitly OAuth Client Secret"
          }
        ]
      }
    }
  },
  "bitwarden": {
    "serviceName": "Bitwarden",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Cloud-hosted", "Self-hosted"],
            "required": true,
            "description": "Environment type of your Bitwarden instance"
          },
          {
            "name": "Self-hosted domain",
            "type": "string",
            "required": false,
            "description": "Your self-hosted Bitwarden domain",
            "displayOptions": {
              "show": {
                "environment": [
                  "Self-hosted"
                ]
              }
            }
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Bitwarden Organization API Key Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Bitwarden Organization API Key Client Secret"
          }
        ]
      }
    }
  },
  "box": {
    "serviceName": "Box",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Box OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Box OAuth Client Secret"
          }
        ]
      }
    }
  },
  "brandfetch": {
    "serviceName": "Brandfetch",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Brandfetch API Key"
          }
        ]
      }
    }
  },
  "brevo": {
    "serviceName": "Brevo",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Brevo API Key"
          }
        ]
      }
    }
  },
  "bubble": {
    "serviceName": "Bubble",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "App Name",
            "type": "string",
            "required": true,
            "description": "Your Bubble App Name"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Bubble API Token"
          },
          {
            "name": "Environment",
            "type": "options",
            "options": ["Development", "Live"],
            "required": true,
            "description": "Environment of your Bubble App"
          },
          {
            "name": "Hosting",
            "type": "options",
            "options": ["Bubble Hosting", "Self Hosted"],
            "required": true,
            "description": "Hosting type of your Bubble App"
          },
          {
            "name": "Domain",
            "type": "string",
            "required": false,
            "description": "Your custom domain for Bubble app",
            "displayOptions": {
              "show": {
                "hosting": [
                  "Self Hosted"
                ]
              }
            }
          }
        ]
      }
    }
  },
  "cal": {
    "serviceName": "Cal.com",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "default": "https://api.cal.com",
            "description": "Host URL for your Cal.com instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Cal.com API Key"
          }
        ]
      }
    }
  },
  "calendly": {
    "serviceName": "Calendly",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Calendly Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Calendly OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Calendly OAuth Client Secret"
          }
        ]
      }
    }
  },
  "carbonblack": {
    "serviceName": "Carbon Black",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Carbon Black Cloud console"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Carbon Black API Access Token"
          }
        ]
      }
    }
  },
  "chargebee": {
    "serviceName": "Chargebee",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Account Name",
            "type": "string",
            "required": true,
            "description": "Your Chargebee Account Name"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Chargebee API Key"
          }
        ]
      }
    }
  },
  "circleci": {
    "serviceName": "CircleCI",
    "authenticationMethods": {
      "personalApiToken": {
        "type": "Personal API token",
        "parameters": [
          {
            "name": "Personal API Token",
            "type": "password",
            "required": true,
            "description": "Your CircleCI Personal API Token"
          }
        ]
      }
    }
  },
  "ciscomeraki": {
    "serviceName": "Cisco Meraki",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Cisco Meraki API Key"
          }
        ]
      }
    }
  },
  "ciscosecureendpoint": {
    "serviceName": "Cisco Secure Endpoint",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Region",
            "type": "options",
            "options": [
              "Asia Pacific, Japan, and China",
              "Europe",
              "North America"
            ],
            "required": true,
            "description": "Your Cisco Secure Endpoint Region"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Cisco Secure Endpoint Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Cisco Secure Endpoint Client Secret"
          }
        ]
      }
    }
  },
  "ciscoumbrella": {
    "serviceName": "Cisco Umbrella",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Cisco Umbrella API Key"
          },
          {
            "name": "Secret",
            "type": "password",
            "required": true,
            "description": "Your Cisco Umbrella API Secret"
          }
        ]
      }
    }
  },
  "ciscowebex": {
    "serviceName": "Webex by Cisco",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Webex by Cisco OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Webex by Cisco OAuth Client Secret"
          }
        ]
      }
    }
  },
  "clearbit": {
    "serviceName": "Clearbit",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Clearbit API Key"
          }
        ]
      }
    }
  },
  "clickup": {
    "serviceName": "ClickUp",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your ClickUp Personal API Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your ClickUp OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your ClickUp OAuth Client Secret"
          }
        ]
      }
    }
  },
  "clockify": {
    "serviceName": "Clockify",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Clockify API Key"
          }
        ]
      }
    }
  },
  "cloudflare": {
    "serviceName": "Cloudflare",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Cloudflare API Key"
          }
        ]
      }
    }
  },
  "cockpit": {
    "serviceName": "Cockpit",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Cockpit URL",
            "type": "string",
            "required": true,
            "description": "URL of your Cockpit instance"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Cockpit API Access Token"
          }
        ]
      }
    }
  },
  "coda": {
    "serviceName": "Coda",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Coda API Access Token"
          }
        ]
      }
    }
  },
  "cohere": {
    "serviceName": "Cohere",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Cohere API Key"
          }
        ]
      }
    }
  },
  "contentful": {
    "serviceName": "Contentful",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Space ID",
            "type": "string",
            "required": true,
            "description": "Your Contentful Space ID"
          },
          {
            "name": "Content Delivery API Access Token",
            "type": "password",
            "required": false,
            "description": "Your Contentful Content Delivery API Access Token"
          },
          {
            "name": "Content Preview API Access Token",
            "type": "password",
            "required": false,
            "description": "Your Contentful Content Preview API Access Token"
          }
        ]
      }
    }
  },
  "convertapi": {
    "serviceName": "ConvertAPI",
    "authenticationMethods": {
      "apiToken": {
        "type": "API Token",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your ConvertAPI API Token"
          }
        ]
      }
    }
  },
  "convertkit": {
    "serviceName": "ConvertKit",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Secret",
            "type": "password",
            "required": true,
            "description": "Your ConvertKit API Secret"
          }
        ]
      }
    }
  },
  "copper": {
    "serviceName": "Copper",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Email address of the API key creator"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Copper API Key"
          }
        ]
      }
    }
  },
  "cortex": {
    "serviceName": "Cortex",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Cortex Instance",
            "type": "string",
            "required": true,
            "default": "http://<your_server_address>:9001/",
            "description": "URL/Server Address for your Cortex Instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Cortex API Key"
          }
        ]
      }
    }
  },
  "cratedb": {
    "serviceName": "CrateDB",
    "authenticationMethods": {
      "accountConnection": {
        "type": "Account connection",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your CrateDB Hostname"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "description": "Your CrateDB Port number"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your CrateDB Database name"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your CrateDB Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your CrateDB Password"
          },
          {
            "name": "SSL",
            "type": "options",
            "options": ["Allow", "Disable", "Require"],
            "required": true,
            "description": "SSL setting for CrateDB connection"
          }
        ]
      }
    }
  },
  "crowddev": {
    "serviceName": "crowd.dev",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "default": "https://app.crowd.dev",
            "description": "URL of your crowd.dev instance"
          },
          {
            "name": "Tenant ID",
            "type": "string",
            "required": true,
            "description": "Your crowd.dev Tenant ID"
          },
          {
            "name": "Token",
            "type": "password",
            "required": true,
            "description": "Your crowd.dev API Token"
          }
        ]
      }
    }
  },
  "crowdstrike": {
    "serviceName": "CrowdStrike",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your CrowdStrike instance"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your CrowdStrike Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your CrowdStrike Client Secret"
          }
        ]
      }
    }
  },
  "customerio": {
    "serviceName": "Customer.io",
    "authenticationMethods": {
      "apiKey": {
        "type": "API Key",
        "parameters": [
          {
            "name": "Region",
            "type": "options",
            "options": ["Global region", "EU region"],
            "required": true,
            "description": "Your Customer.io Region"
          },
          {
            "name": "Tracking API Key",
            "type": "password",
            "required": true,
            "description": "Your Customer.io Tracking API Key"
          },
          {
            "name": "Tracking Site ID",
            "type": "number",
            "required": true,
            "description": "Your Customer.io Tracking Site ID"
          },
          {
            "name": "App API Key",
            "type": "password",
            "required": true,
            "description": "Your Customer.io App API Key"
          }
        ]
      }
    }
  },
  "datadog": {
    "serviceName": "Datadog",
    "authenticationMethods": {
      "apiKey": {
        "type": "API Key",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your Datadog instance Host"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Datadog API Key"
          },
          {
            "name": "App Key",
            "type": "password",
            "required": true,
            "description": "Your Datadog App Key"
          }
        ]
      }
    }
  },
  "deepl": {
    "serviceName": "DeepL",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Plan",
            "type": "options",
            "options": ["Pro Plan", "Free Plan"],
            "required": true,
            "description": "Your DeepL API Plan type"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your DeepL API Key"
          }
        ]
      }
    }
  },
  "deepseek": {
    "serviceName": "DeepSeek",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your DeepSeek API Key"
          }
        ]
      }
    }
  },
  "demio": {
    "serviceName": "Demio",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Demio API Key"
          },
          {
            "name": "API Secret",
            "type": "password",
            "required": true,
            "description": "Your Demio API Secret"
          }
        ]
      }
    }
  },
  "dfiriris": {
    "serviceName": "DFIR-IRIS",
    "authenticationMethods": {
      "apiKey": {
        "type": "API Key",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your DFIR-IRIS instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your DFIR-IRIS API Key"
          }
        ]
      }
    }
  },
  "dhl": {
    "serviceName": "DHL",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your DHL API Key"
          }
        ]
      }
    }
  },
  "discord": {
    "serviceName": "Discord",
    "authenticationMethods": {
      "bot": {
        "type": "Bot",
        "parameters": [
          {
            "name": "Bot Token",
            "type": "password",
            "required": true,
            "description": "Your Discord Bot Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Discord OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Discord OAuth Client Secret"
          },
          {
            "name": "Authentication",
            "type": "options",
            "options": ["Header", "Body"],
            "required": true,
            "description": "Where to send authentication"
          },
          {
            "name": "Bot Token",
            "type": "password",
            "required": true,
            "description": "Your Discord Bot Token"
          }
        ]
      },
      "webhook": {
        "type": "Webhook",
        "parameters": [
          {
            "name": "Webhook URL",
            "type": "string",
            "required": true,
            "description": "Your Discord Webhook URL"
          }
        ]
      }
    }
  },
  "discourse": {
    "serviceName": "Discourse",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Discourse instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Discourse API Key"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Discourse Username"
          }
        ]
      }
    }
  },
  "disqus": {
    "serviceName": "Disqus",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Disqus API Access Token (API Key)"
          }
        ]
      }
    }
  },
  "drift": {
    "serviceName": "Drift",
    "authenticationMethods": {
      "apiPersonalAccessToken": {
        "type": "API personal access token",
        "parameters": [
          {
            "name": "Personal Access Token",
            "type": "password",
            "required": true,
            "description": "Your Drift Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Drift OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Drift OAuth Client Secret"
          }
        ]
      }
    }
  },
  "dropbox": {
    "serviceName": "Dropbox",
    "authenticationMethods": {
      "accessToken": {
        "type": "Access token",
        "parameters": [
          {
            "name": "App Access Type",
            "type": "options",
            "options": ["App Folder", "Full Dropbox"],
            "required": true,
            "description": "Type of access for your Dropbox App"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Dropbox API Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "App Access Type",
            "type": "options",
            "options": ["App Folder", "Full Dropbox"],
            "required": true,
            "description": "Type of access for your Dropbox App"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Dropbox OAuth Client ID (App key)"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Dropbox OAuth Client Secret (Secret)"
          }
        ]
      }
    }
  },
  "dropcontact": {
    "serviceName": "Dropcontact",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Dropcontact API Key"
          }
        ]
      }
    }
  },
  "dynatrace": {
    "serviceName": "Dynatrace",
    "authenticationMethods": {
      "accessToken": {
        "type": "Access Token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Dynatrace Access Token"
          }
        ]
      }
    }
  },
  "egoi": {
    "serviceName": "E-goi",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your E-goi API Key"
          }
        ]
      }
    }
  },
  "elasticsearch": {
    "serviceName": "Elasticsearch",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Elasticsearch application"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Elasticsearch Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Elasticsearch Password"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "elasticsecurity": {
    "serviceName": "Elastic Security",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Elasticsearch application"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Elasticsearch Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Elasticsearch Password"
          }
        ]
      },
      "apiKey": {
        "type": "API Key",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Elasticsearch application"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Elasticsearch API Key"
          }
        ]
      }
    }
  },
  "emelia": {
    "serviceName": "Emelia",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Emelia API Key"
          }
        ]
      }
    }
  },
  "erpnext": {
    "serviceName": "ERPNext",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Cloud-hosted", "Self-hosted"],
            "required": true,
            "description": "Environment type of your ERPNext instance"
          },
          {
            "name": "Subdomain",
            "type": "string",
            "required": false,
            "description": "Your ERPNext Subdomain (for Cloud-hosted)",
            "displayOptions": {
              "show": {
                "environment": [
                  "Cloud-hosted"
                ]
              }
            }
          },
          {
            "name": "Domain",
            "type": "options",
            "options": ["erpnext.com", "frappe.cloud"],
            "required": false,
            "description": "Your ERPNext Domain (for Cloud-hosted)",
            "displayOptions": {
              "show": {
                "environment": [
                  "Cloud-hosted"
                ]
              }
            }
          },
          {
            "name": "Domain",
            "type": "string",
            "required": false,
            "description": "Your ERPNext Domain (for Self-hosted)",
            "displayOptions": {
              "show": {
                "environment": [
                  "Self-hosted"
                ]
              }
            }
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your ERPNext API Key"
          },
          {
            "name": "API Secret",
            "type": "password",
            "required": true,
            "description": "Your ERPNext API Secret"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "eventbrite": {
    "serviceName": "Eventbrite",
    "authenticationMethods": {
      "apiPrivateKey": {
        "type": "API private key",
        "parameters": [
          {
            "name": "Private Key",
            "type": "password",
            "required": true,
            "description": "Your Eventbrite Private Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Eventbrite OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Eventbrite OAuth Client Secret"
          }
        ]
      }
    }
  },
  "f5bigip": {
    "serviceName": "F5 Big-IP",
    "authenticationMethods": {
      "accountLogin": {
        "type": "Account login",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your F5 Big-IP Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your F5 Big-IP Password"
          }
        ]
      }
    }
  },
  "facebookapp": {
    "serviceName": "Facebook App",
    "authenticationMethods": {
      "appAccessToken": {
        "type": "App access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Facebook App Access Token"
          },
          {
            "name": "App Secret",
            "type": "password",
            "required": false,
            "description": "Your Facebook App Secret (Optional)"
          }
        ]
      }
    }
  },
  "facebookgraph": {
    "serviceName": "Facebook Graph API",
    "authenticationMethods": {
      "appAccessToken": {
        "type": "App access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Facebook Graph API Access Token"
          }
        ]
      }
    }
  },
  "facebookleadads": {
    "serviceName": "Facebook Lead Ads",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Facebook Lead Ads OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Facebook Lead Ads OAuth Client Secret"
          }
        ]
      }
    }
  },
  "figma": {
    "serviceName": "Figma",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Figma Personal Access Token"
          }
        ]
      }
    }
  },
  "filemaker": {
    "serviceName": "FileMaker",
    "authenticationMethods": {
      "databaseConnection": {
        "type": "Database connection",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Hostname or IP address of your FileMaker Server"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Name of your FileMaker Database"
          },
          {
            "name": "Login",
            "type": "string",
            "required": true,
            "description": "Username for FileMaker Data API access"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for FileMaker Data API access"
          }
        ]
      }
    }
  },
  "filescan": {
    "serviceName": "Filescan",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Filescan API Key"
          }
        ]
      }
    }
  },
  "flow": {
    "serviceName": "Flow",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Organization ID",
            "type": "number",
            "required": true,
            "description": "Your Flow Organization ID"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Flow Access Token"
          }
        ]
      }
    }
  },
  "formiotrigger": {
    "serviceName": "Form.io Trigger",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Cloud hosted", "Self-hosted"],
            "required": true,
            "description": "Environment type of your Form.io instance"
          },
          {
            "name": "Self-Hosted Domain",
            "type": "string",
            "required": false,
            "description": "Your self-hosted Form.io Domain",
            "displayOptions": {
              "show": {
                "environment": [
                  "Self-hosted"
                ]
              }
            }
          },
          {
            "name": "Email address",
            "type": "email",
            "required": true,
            "description": "Your Form.io login email address"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Form.io login password"
          }
        ]
      }
    }
  },
  "formstacktrigger": {
    "serviceName": "Formstack Trigger",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Formstack API Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Formstack OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Formstack OAuth Client Secret"
          }
        ]
      }
    }
  },
  "fortigate": {
    "serviceName": "Fortinet FortiGate",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Fortinet FortiGate API Access Token"
          }
        ]
      }
    }
  },
  "freshdesk": {
    "serviceName": "Freshdesk",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Freshdesk Subdomain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Freshdesk API Key"
          }
        ]
      }
    }
  },
  "freshservice": {
    "serviceName": "Freshservice",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Freshservice Subdomain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Freshservice API Key"
          }
        ]
      }
    }
  },
  "freshworkscrm": {
    "serviceName": "Freshworks CRM",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Freshworks CRM Subdomain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Freshworks CRM API Key"
          }
        ]
      }
    }
  },
  "ftp": {
    "serviceName": "FTP",
    "authenticationMethods": {
      "ftpAccount": {
        "type": "FTP account",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Hostname or IP address of your FTP server"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "description": "Port number for FTP connection"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for FTP connection"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for FTP connection"
          }
        ]
      },
      "sftpAccount": {
        "type": "SFTP account",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Hostname or IP address of your SFTP server"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "description": "Port number for SFTP connection"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for SFTP connection"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for SFTP connection"
          },
          {
            "name": "Private Key",
            "type": "string",
            "required": false,
            "description": "Private key for SFTP connection"
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Private Key"
          }
        ]
      }
    }
  },
  "getresponse": {
    "serviceName": "GetResponse",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your GetResponse API Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your GetResponse OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your GetResponse OAuth Client Secret"
          }
        ]
      }
    }
  },
  "ghost": {
    "serviceName": "Ghost",
    "authenticationMethods": {
      "adminApiKey": {
        "type": "Admin API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Ghost admin domain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Ghost Admin API Key"
          }
        ]
      },
      "contentApiKey": {
        "type": "Content API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Ghost admin domain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Ghost Content API Key"
          }
        ]
      }
    }
  },
  "git": {
    "serviceName": "Git",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Git Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Git Password"
          }
        ]
      }
    }
  },
  "github": {
    "serviceName": "GitHub",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "GitHub server",
            "type": "string",
            "required": true,
            "default": "https://api.github.com",
            "description": "URL of your GitHub server"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your GitHub Username"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your GitHub Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "GitHub server",
            "type": "string",
            "required": true,
            "default": "https://api.github.com",
            "description": "URL of your GitHub server"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your GitHub OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your GitHub OAuth Client Secret"
          }
        ]
      }
    }
  },
  "gitlab": {
    "serviceName": "GitLab",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "GitLab Server",
            "type": "string",
            "required": true,
            "description": "URL of your GitLab Server"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your GitLab Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "GitLab Server",
            "type": "string",
            "required": true,
            "description": "URL of your GitLab Server"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your GitLab OAuth Application ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your GitLab OAuth Application Secret"
          }
        ]
      }
    }
  },
  "gong": {
    "serviceName": "Gong",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Key",
            "type": "string",
            "required": true,
            "description": "Your Gong API Access Key"
          },
          {
            "name": "Access Key Secret",
            "type": "password",
            "required": true,
            "description": "Your Gong API Access Key Secret"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Gong OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Gong OAuth Client Secret"
          }
        ]
      }
    }
  },
  "googleai": {
    "serviceName": "Google Gemini(PaLM)",
    "authenticationMethods": {
      "geminiPalmApiKey": {
        "type": "Gemini(PaLM) API key",
        "parameters": [
          {
            "name": "API Host",
            "type": "string",
            "required": true,
            "default": "https://generativelanguage.googleapis.com",
            "description": "Host URL for the Google Gemini/PaLM API"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Google Gemini/PaLM API Key"
          }
        ]
      }
    }
  },
  "gotify": {
    "serviceName": "Gotify",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Gotify host"
          },
          {
            "name": "App API Token",
            "type": "password",
            "required": false,
            "description": "Your Gotify App API Token (for creating messages)"
          },
          {
            "name": "Client API Token",
            "type": "password",
            "required": false,
            "description": "Your Gotify Client API Token (for other actions)"
          }
        ]
      }
    }
  },
  "gotowebinar": {
    "serviceName": "GoTo Webinar",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your GoToWebinar OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your GoToWebinar OAuth Client Secret"
          }
        ]
      }
    }
  },
  "grafana": {
    "serviceName": "Grafana",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL for your Grafana instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Grafana API Key"
          }
        ]
      }
    }
  },
  "grist": {
    "serviceName": "Grist",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Plan Type",
            "type": "options",
            "options": ["Free", "Paid", "Self-Hosted"],
            "required": true,
            "description": "Your Grist Plan Type"
          },
          {
            "name": "Custom Subdomain",
            "type": "string",
            "required": false,
            "description": "Your Grist Custom Subdomain (for Paid plan)",
            "displayOptions": {
              "show": {
                "planType": [
                  "Paid"
                ]
              }
            }
          },
          {
            "name": "Self-Hosted URL",
            "type": "string",
            "required": false,
            "description": "Your Grist Self-Hosted URL",
            "displayOptions": {
              "show": {
                "planType": [
                  "Self-Hosted"
                ]
              }
            }
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Grist API Key"
          }
        ]
      }
    }
  },
  "groq": {
    "serviceName": "Groq",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Groq API Key"
          }
        ]
      }
    }
  },
  "gumroad": {
    "serviceName": "Gumroad",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Gumroad API Access Token"
          }
        ]
      }
    }
  },
  "halopsa": {
    "serviceName": "HaloPSA",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Hosting Type",
            "type": "options",
            "options": ["On Premise Solution", "Hosted Solution Of Halo"],
            "required": true,
            "description": "Hosting type of your HaloPSA instance"
          },
          {
            "name": "Tenant",
            "type": "string",
            "required": false,
            "description": "Your HaloPSA Tenant name (for Hosted Solution)",
            "displayOptions": {
              "show": {
                "hostingType": [
                  "Hosted Solution Of Halo"
                ]
              }
            }
          },
          {
            "name": "HaloPSA Authorisation Server URL",
            "type": "string",
            "required": true,
            "description": "Your HaloPSA Authorisation Server URL"
          },
          {
            "name": "Resource Server",
            "type": "string",
            "required": true,
            "description": "Your HaloPSA Resource Server URL"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your HaloPSA API Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your HaloPSA API Client Secret"
          }
        ]
      }
    }
  },
  "harvest": {
    "serviceName": "Harvest",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API Access Token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Harvest Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Harvest OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Harvest OAuth Client Secret"
          }
        ]
      }
    }
  },
  "helpscout": {
    "serviceName": "Help Scout",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Help Scout OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Help Scout OAuth Client Secret"
          }
        ]
      }
    }
  },
  "highlevel": {
    "serviceName": "HighLevel",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your HighLevel API Key (for API v1)"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your HighLevel OAuth Client ID (for API v2)"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your HighLevel OAuth Client Secret (for API v2)"
          },
          {
            "name": "Scopes",
            "type": "string",
            "required": true,
            "description": "Your HighLevel OAuth Scopes (space-separated)"
          }
        ]
      }
    }
  },
  "homeassistant": {
    "serviceName": "Home Assistant",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Hostname or IP address of your Home Assistant"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 8123,
            "description": "Port number for Home Assistant connection"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Home Assistant Long-Lived Access Token"
          },
          {
            "name": "SSL",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSL for Home Assistant connection"
          }
        ]
      }
    }
  },
  "httprequest": {
    "serviceName": "HTTP Request",
    "authenticationMethods": {
      "predefinedCredentialType": {
        "type": "Predefined credential type",
        "parameters": []
      },
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for Basic Authentication"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for Basic Authentication"
          }
        ]
      },
      "digestAuth": {
        "type": "Digest auth",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for Digest Authentication"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for Digest Authentication"
          }
        ]
      },
      "headerAuth": {
        "type": "Header auth",
        "parameters": [
          {
            "name": "Name",
            "type": "string",
            "required": true,
            "description": "Header name for authentication"
          },
          {
            "name": "Value",
            "type": "string",
            "required": true,
            "description": "Header value for authentication"
          }
        ]
      },
      "oauth1": {
        "type": "OAuth1",
        "parameters": [
          {
            "name": "Authorization URL",
            "type": "string",
            "required": true,
            "description": "Authorization URL for OAuth1"
          },
          {
            "name": "Access Token URL",
            "type": "string",
            "required": true,
            "description": "Access Token URL for OAuth1"
          },
          {
            "name": "Consumer Key",
            "type": "string",
            "required": true,
            "description": "Consumer Key for OAuth1"
          },
          {
            "name": "Consumer Secret",
            "type": "password",
            "required": true,
            "description": "Consumer Secret for OAuth1"
          },
          {
            "name": "Request Token URL",
            "type": "string",
            "required": true,
            "description": "Request Token URL for OAuth1"
          },
          {
            "name": "Signature Method",
            "type": "options",
            "options": ["HMAC-SHA1", "HMAC-SHA256", "HMAC-SHA512"],
            "required": true,
            "description": "Signature method for OAuth1"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Grant Type",
            "type": "options",
            "options": ["Authorization Code", "Client Credentials", "PKCE"],
            "required": true,
            "description": "OAuth2 Grant Type"
          },
          {
            "name": "Authorization URL",
            "type": "string",
            "required": false,
            "description": "Authorization URL for OAuth2 (for Authorization Code and PKCE)",
            "displayOptions": {
              "show": {
                "grantType": [
                  "Authorization Code",
                  "PKCE"
                ]
              }
            }
          },
          {
            "name": "Access Token URL",
            "type": "string",
            "required": true,
            "description": "Access Token URL for OAuth2"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Client ID for OAuth2"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Client Secret for OAuth2"
          },
          {
            "name": "Scope",
            "type": "string",
            "required": false,
            "description": "Scopes for OAuth2 (space-separated)"
          },
          {
            "name": "Auth URI Query Parameters",
            "type": "json",
            "required": false,
            "description": "Additional query parameters for Auth URI"
          },
          {
            "name": "Authentication",
            "type": "options",
            "options": ["Header", "Body"],
            "required": true,
            "description": "Authentication method for OAuth2"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      },
      "queryAuth": {
        "type": "Query auth",
        "parameters": [
          {
            "name": "Name",
            "type": "string",
            "required": true,
            "description": "Query parameter name for authentication"
          },
          {
            "name": "Value",
            "type": "string",
            "required": true,
            "description": "Query parameter value for authentication"
          }
        ]
      },
      "customAuth": {
        "type": "Custom auth",
        "parameters": [
          {
            "name": "Custom Auth JSON",
            "type": "json",
            "required": true,
            "description": "Custom authentication JSON object"
          }
        ]
      }
    }
  },
  "hubspot": {
    "serviceName": "HubSpot",
    "authenticationMethods": {
      "appToken": {
        "type": "App token",
        "parameters": [
          {
            "name": "App Token",
            "type": "password",
            "required": true,
            "description": "Your HubSpot App Token"
          }
        ]
      },
      "developerApiKey": {
        "type": "Developer API key",
        "parameters": [
          {
            "name": "App ID",
            "type": "string",
            "required": true,
            "description": "Your HubSpot App ID"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your HubSpot OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your HubSpot OAuth Client Secret"
          },
          {
            "name": "Developer API Key",
            "type": "password",
            "required": true,
            "description": "Your HubSpot Developer API Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "App ID",
            "type": "string",
            "required": true,
            "description": "Your HubSpot App ID"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your HubSpot OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your HubSpot OAuth Client Secret"
          }
        ]
      }
    }
  },
  "huggingface": {
    "serviceName": "Hugging Face",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Hugging Face API Key (API token)"
          }
        ]
      }
    }
  },
  "humanticai": {
    "serviceName": "Humantic AI",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Humantic AI API Key"
          }
        ]
      }
    }
  },
  "hunter": {
    "serviceName": "Hunter",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Hunter API Key"
          }
        ]
      }
    }
  },
  "hybridanalysis": {
    "serviceName": "Hybrid Analysis",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Hybrid Analysis API Key"
          }
        ]
      }
    }
  },
  "impervawaf": {
    "serviceName": "Imperva WAF",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API ID",
            "type": "string",
            "required": true,
            "description": "Your Imperva WAF API ID"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Imperva WAF API Key"
          }
        ]
      }
    }
  },
  "index": {
    "serviceName": "Index",
    "authenticationMethods": {}
  },
  "intercom": {
    "serviceName": "Intercom",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Intercom API Key (Access Token)"
          }
        ]
      }
    }
  },
  "invoiceninja": {
    "serviceName": "Invoice Ninja",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "options",
            "options": ["https://app.invoiceninja.com", "https://invoiceninja.com"],
            "required": true,
            "description": "URL of your Invoice Ninja instance"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Invoice Ninja API Token"
          },
          {
            "name": "Secret",
            "type": "password",
            "required": false,
            "description": "Your Invoice Ninja API Secret (for v5 API users)"
          }
        ]
      }
    }
  },
  "iterable": {
    "serviceName": "Iterable",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Iterable API Key"
          }
        ]
      }
    }
  },
  "jenkins": {
    "serviceName": "Jenkins",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Jenkins Instance URL",
            "type": "string",
            "required": true,
            "description": "URL of your Jenkins instance"
          },
          {
            "name": "Jenkins Username",
            "type": "string",
            "required": true,
            "description": "Your Jenkins Username"
          },
          {
            "name": "Personal API Token",
            "type": "password",
            "required": true,
            "description": "Your Jenkins Personal API Token"
          }
        ]
      }
    }
  },
  "jira": {
    "serviceName": "Jira",
    "authenticationMethods": {
      "swCloudApiToken": {
        "type": "SW Cloud API token",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Jira Software Cloud Domain"
          },
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Email address associated with Jira account"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Jira Software Cloud API Token"
          }
        ]
      },
      "swServerAccount": {
        "type": "SW Server account",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Jira Software Server Domain"
          },
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Email address associated with Jira account"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Jira Software Server Password"
          }
        ]
      }
    }
  },
  "jotform": {
    "serviceName": "JotForm",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Domain",
            "type": "options",
            "options": ["api.jotform.com", "eu-api.jotform.com", "hipaa-api.jotform.com"],
            "required": true,
            "description": "Your JotForm API Domain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your JotForm API Key"
          }
        ]
      }
    }
  },
  "jwt": {
    "serviceName": "JWT",
    "authenticationMethods": {
      "passphrase": {
        "type": "Passphrase",
        "parameters": [
          {
            "name": "Secret",
            "type": "password",
            "required": true,
            "description": "Your JWT Passphrase Secret"
          },
          {
            "name": "Algorithm",
            "type": "options",
            "options": ["HS256", "HS384", "HS512"],
            "required": true,
            "description": "Algorithm for signing JWT with Passphrase"
          }
        ]
      },
      "privateKeyPemKey": {
        "type": "Private key (PEM key)",
        "parameters": [
          {
            "name": "Private Key",
            "type": "string",
            "required": true,
            "description": "Your JWT Private Key (PEM format)"
          },
          {
            "name": "Public Key",
            "type": "string",
            "required": true,
            "description": "Your JWT Public Key (PEM format)"
          },
          {
            "name": "Algorithm",
            "type": "options",
            "options": ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512"],
            "required": true,
            "description": "Algorithm for signing JWT with Private Key"
          }
        ]
      }
    }
  },
  "kafka": {
    "serviceName": "Kafka",
    "authenticationMethods": {
      "clientId": {
        "type": "Client ID",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Kafka Client ID"
          },
          {
            "name": "Brokers",
            "type": "string",
            "required": true,
            "description": "Comma-separated list of Kafka brokers"
          },
          {
            "name": "SSL",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSL for Kafka connection"
          },
          {
            "name": "Authentication",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SASL authentication"
          },
          {
            "name": "Username",
            "type": "string",
            "required": false,
            "description": "Username for SASL authentication",
            "displayOptions": {
              "show": {
                "authentication": [
                  true
                ]
              }
            }
          },
          {
            "name": "Password",
            "type": "password",
            "required": false,
            "description": "Password for SASL authentication",
            "displayOptions": {
              "show": {
                "authentication": [
                  true
                ]
              }
            }
          },
          {
            "name": "SASL Mechanism",
            "type": "options",
            "options": ["Plain", "scram-sha-256", "scram-sha-512"],
            "required": false,
            "description": "SASL mechanism for authentication",
            "displayOptions": {
              "show": {
                "authentication": [
                  true
                ]
              }
            }
          }
        ]
      }
    }
  },
  "keap": {
    "serviceName": "Keap",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Keap OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Keap OAuth Client Secret"
          }
        ]
      }
    }
  },
  "kibana": {
    "serviceName": "Kibana",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Kibana instance"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Kibana Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Kibana Password"
          }
        ]
      }
    }
  },
  "kitemaker": {
    "serviceName": "Kitemaker",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Kitemaker Personal Access Token"
          }
        ]
      }
    }
  },
  "kobotoolbox": {
    "serviceName": "KoboToolbox",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Root URL",
            "type": "options",
            "options": ["https://kf.kobotoolbox.org", "https://eu.kobotoolbox.org"],
            "required": true,
            "description": "Root URL of your KoboToolbox server"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your KoboToolbox API Token"
          }
        ]
      }
    }
  },
  "ldap": {
    "serviceName": "LDAP",
    "authenticationMethods": {
      "ldapServerDetails": {
        "type": "LDAP server details",
        "parameters": [
          {
            "name": "LDAP Server Address",
            "type": "string",
            "required": true,
            "description": "Address of your LDAP server"
          },
          {
            "name": "LDAP Server Port",
            "type": "number",
            "required": true,
            "description": "Port number for LDAP connection"
          },
          {
            "name": "Binding DN",
            "type": "string",
            "required": true,
            "description": "Binding Distinguished Name for LDAP server"
          },
          {
            "name": "Binding Password",
            "type": "password",
            "required": true,
            "description": "Password for LDAP Binding DN"
          },
          {
            "name": "Connection Security",
            "type": "options",
            "options": ["None", "TLS", "STARTTLS"],
            "required": true,
            "description": "Security protocol for LDAP connection"
          },
          {
            "name": "Connection Timeout",
            "type": "number",
            "required": false,
            "description": "Connection timeout in seconds"
          }
        ]
      }
    }
  },
  "lemlist": {
    "serviceName": "Lemlist",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Lemlist API Key"
          }
        ]
      }
    }
  },
  "line": {
    "serviceName": "Line",
    "authenticationMethods": {
      "notifyOAuth2": {
        "type": "Notify OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Line Notify OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Line Notify OAuth Client Secret"
          }
        ]
      }
    }
  },
  "linear": {
    "serviceName": "Linear",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Linear Personal API Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Actor",
            "type": "options",
            "options": ["User", "Application"],
            "required": true,
            "description": "Actor type for OAuth2 application"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Linear OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Linear OAuth Client Secret"
          },
          {
            "name": "Include Admin Scope",
            "type": "boolean",
            "required": false,
            "description": "Whether to include admin scope (required for Linear Trigger)"
          }
        ]
      }
    }
  },
  "lingvanex": {
    "serviceName": "LingvaNex",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your LingvaNex API Key"
          }
        ]
      }
    }
  },
  "linkedin": {
    "serviceName": "LinkedIn",
    "authenticationMethods": {
      "communityManagementOAuth2": {
        "type": "Community Management OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your LinkedIn OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your LinkedIn OAuth Client Secret"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your LinkedIn OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your LinkedIn OAuth Client Secret"
          },
          {
            "name": "Organization Support",
            "type": "boolean",
            "required": false,
            "description": "Whether to request permission to post as an organization"
          },
          {
            "name": "Legacy",
            "type": "boolean",
            "required": false,
            "description": "Whether to use legacy scopes (r_liteprofile and r_emailaddress)"
          }
        ]
      }
    }
  },
  "lonescale": {
    "serviceName": "LoneScale",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your LoneScale API Key"
          }
        ]
      }
    }
  },
  "magento2": {
    "serviceName": "Magento 2",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "URL of your Magento store"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Magento 2 API Access Token"
          }
        ]
      }
    }
  },
  "mailcheck": {
    "serviceName": "Mailcheck",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mailcheck API Key"
          }
        ]
      }
    }
  },
  "mailchimp": {
    "serviceName": "Mailchimp",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mailchimp API Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Mailchimp OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Mailchimp OAuth Client Secret"
          }
        ]
      }
    }
  },
  "mailerlite": {
    "serviceName": "MailerLite",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your MailerLite API Key"
          },
          {
            "name": "Classic API",
            "type": "boolean",
            "required": false,
            "description": "Whether API key is for MailerLite Classic account"
          }
        ]
      }
    }
  },
  "mailgun": {
    "serviceName": "Mailgun",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Domain",
            "type": "options",
            "options": ["api.mailgun.net", "api.eu.mailgun.net"],
            "required": true,
            "description": "Your Mailgun API Domain"
          },
          {
            "name": "Email Domain",
            "type": "string",
            "required": true,
            "description": "Your Mailgun Email Domain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mailgun API Key"
          }
        ]
      }
    }
  },
  "mailjet": {
    "serviceName": "Mailjet",
    "authenticationMethods": {
      "emailApiKey": {
        "type": "Email API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mailjet Email API Key"
          },
          {
            "name": "Secret Key",
            "type": "password",
            "required": true,
            "description": "Your Mailjet Email API Secret Key"
          },
          {
            "name": "Sandbox Mode",
            "type": "boolean",
            "required": false,
            "description": "Whether to use Mailjet Sandbox Mode"
          }
        ]
      },
      "smsToken": {
        "type": "SMS token",
        "parameters": [
          {
            "name": "Token",
            "type": "password",
            "required": true,
            "description": "Your Mailjet SMS API Token"
          }
        ]
      }
    }
  },
  "malcore": {
    "serviceName": "Malcore",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Malcore API Key"
          }
        ]
      }
    }
  },
  "mandrill": {
    "serviceName": "Mandrill",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mandrill API Key"
          }
        ]
      }
    }
  },
  "marketstack": {
    "serviceName": "Marketstack",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Use HTTPS",
            "type": "boolean",
            "required": true,
            "description": "Whether to use HTTPS for Marketstack API requests"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Marketstack API Key"
          }
        ]
      }
    }
  },
  "matrix": {
    "serviceName": "Matrix",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Homeserver URL",
            "type": "string",
            "required": true,
            "default": "https://matrix.org",
            "description": "URL of your Matrix Homeserver"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Matrix API Access Token"
          }
        ]
      }
    }
  },
  "mattermost": {
    "serviceName": "Mattermost",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Mattermost instance"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Mattermost Personal Access Token"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "mautic": {
    "serviceName": "Mautic",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Mautic instance"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Mautic Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Mautic Password"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Mautic instance"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Mautic OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Mautic OAuth Client Secret"
          }
        ]
      }
    }
  },
  "medium": {
    "serviceName": "Medium",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Medium API Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Medium OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Medium OAuth Client Secret"
          }
        ]
      }
    }
  },
  "messagebird": {
    "serviceName": "MessageBird",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your MessageBird API Key"
          }
        ]
      }
    }
  },
  "metabase": {
    "serviceName": "Metabase",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Metabase instance"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Metabase Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Metabase Password"
          }
        ]
      }
    }
  },
  "microsoft": {
    "serviceName": "Microsoft",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Scope",
            "type": "string",
            "required": false,
            "description": "Scopes for Microsoft services (space-separated)"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Microsoft OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Microsoft OAuth Client Secret"
          },
          {
            "name": "Dynamics Domain",
            "type": "string",
            "required": false,
            "description": "Your Dynamics Domain (for Dynamics services)"
          },
          {
            "name": "Region",
            "type": "options",
            "options": ["Americas", "Europe", "Asia Pacific", "Oceania", "Japan", "Canada", "India", "United Kingdom", "Africa"],
            "required": false,
            "description": "Your Dynamics data center Region (for Dynamics services)"
          },
          {
            "name": "Use Shared Inbox",
            "type": "boolean",
            "required": false,
            "description": "Whether to use a shared inbox (for Outlook)"
          },
          {
            "name": "User Principal Name",
            "type": "string",
            "required": false,
            "description": "User Principal Name of the shared inbox (for Outlook)",
            "displayOptions": {
              "show": {
                "useSharedInbox": [
                  true
                ]
              }
            }
          },
          {
            "name": "Subdomain",
            "type": "string",
            "required": false,
            "description": "Your SharePoint Subdomain (for SharePoint services)"
          }
        ]
      }
    }
  },
  "microsoftazuremonitor": {
    "serviceName": "Microsoft Azure Monitor",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Microsoft Azure Monitor OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Microsoft Azure Monitor OAuth Client Secret"
          },
          {
            "name": "Tenant ID",
            "type": "string",
            "required": true,
            "description": "Your Microsoft Azure Monitor Tenant ID"
          },
          {
            "name": "Resource",
            "type": "string",
            "required": true,
            "description": "Resource you plan to access"
          }
        ]
      }
    }
  },
  "microsoftentra": {
    "serviceName": "Microsoft Entra ID",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Microsoft Entra ID OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Microsoft Entra ID OAuth Client Secret"
          }
        ]
      }
    }
  },
  "microsoftsql": {
    "serviceName": "Microsoft SQL",
    "authenticationMethods": {
      "sqlDatabaseConnection": {
        "type": "SQL database connection",
        "parameters": [
          {
            "name": "Server",
            "type": "string",
            "required": true,
            "description": "Your Microsoft SQL Server Host Name"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your Microsoft SQL Database Name"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your Microsoft SQL Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Microsoft SQL Password"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 1433,
            "description": "Port number for SQL connection"
          },
          {
            "name": "Domain",
            "type": "string",
            "required": false,
            "description": "Your Microsoft SQL Domain Name (if applicable)"
          },
          {
            "name": "TLS",
            "type": "boolean",
            "required": false,
            "description": "Whether to use TLS for SQL connection"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          },
          {
            "name": "Connect Timeout",
            "type": "number",
            "required": false,
            "description": "Connection timeout in milliseconds"
          },
          {
            "name": "Request Timeout",
            "type": "number",
            "required": false,
            "description": "Request timeout in milliseconds"
          },
          {
            "name": "TDS Version",
            "type": "options",
            "options": ["7_4 (SQL Server 2012 ~ 2019)", "7_3_B (SQL Server 2008R2)", "7_3_A (SQL Server 2008)", "7_2 (SQL Server 2005)", "7_1 (SQL Server 2000)"],
            "required": false,
            "description": "TDS Version for SQL connection"
          }
        ]
      }
    }
  },
  "mindee": {
    "serviceName": "Mindee",
    "authenticationMethods": {
      "invoiceApiKey": {
        "type": "Invoice API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mindee Invoice OCR API Key"
          }
        ]
      },
      "receiptApiKey": {
        "type": "Receipt API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mindee Receipt OCR API Key"
          }
        ]
      }
    }
  },
  "miro": {
    "serviceName": "Miro",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Miro OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Miro OAuth Client Secret"
          }
        ]
      }
    }
  },
  "misp": {
    "serviceName": "MISP",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your MISP instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your MISP API Key (Automation key)"
          },
          {
            "name": "Allow Unauthorized Certificates",
            "type": "boolean",
            "required": false,
            "description": "Whether to allow unauthorized SSL certificates"
          }
        ]
      }
    }
  },
  "mist": {
    "serviceName": "Mist",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Region",
            "type": "options",
            "options": ["Europe", "Global"],
            "required": true,
            "description": "Your Mist cloud environment Region"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Mist API Token"
          }
        ]
      }
    }
  },
  "mistral": {
    "serviceName": "Mistral Cloud",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mistral Cloud API Key"
          }
        ]
      }
    }
  },
  "mocean": {
    "serviceName": "Mocean",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Mocean API Key"
          },
          {
            "name": "API Secret",
            "type": "password",
            "required": true,
            "description": "Your Mocean API Secret"
          }
        ]
      }
    }
  },
  "mondaycom": {
    "serviceName": "monday.com",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Token V2",
            "type": "password",
            "required": true,
            "description": "Your monday.com API Token V2"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your monday.com OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your monday.com OAuth Client Secret"
          }
        ]
      }
    }
  },
  "mongodb": {
    "serviceName": "MongoDB",
    "authenticationMethods": {
      "databaseConnectionConnectionString": {
        "type": "Database connection - Connection string",
        "parameters": [
          {
            "name": "Connection String",
            "type": "string",
            "required": true,
            "description": "Your MongoDB Connection String"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your MongoDB Database name"
          },
          {
            "name": "Use TLS",
            "type": "boolean",
            "required": false,
            "description": "Whether to use TLS for MongoDB connection"
          },
          {
            "name": "CA Certificate",
            "type": "string",
            "required": false,
            "description": "CA Certificate for TLS connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Public Client Certificate",
            "type": "string",
            "required": false,
            "description": "Public Client Certificate for TLS connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Private Client Key",
            "type": "string",
            "required": false,
            "description": "Private Client Key for TLS connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Private Client Key",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          }
        ]
      },
      "databaseConnectionValues": {
        "type": "Database connection - Values",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your MongoDB Hostname or IP address"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "description": "Port number for MongoDB connection"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your MongoDB Database name"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your MongoDB Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your MongoDB Password"
          },
          {
            "name": "Use TLS",
            "type": "boolean",
            "required": false,
            "description": "Whether to use TLS for MongoDB connection"
          },
          {
            "name": "CA Certificate",
            "type": "string",
            "required": false,
            "description": "CA Certificate for TLS connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Public Client Certificate",
            "type": "string",
            "required": false,
            "description": "Public Client Certificate for TLS connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Private Client Key",
            "type": "string",
            "required": false,
            "description": "Private Client Key for TLS connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Private Client Key",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          }
        ]
      }
    }
  },
  "monicacrm": {
    "serviceName": "Monica CRM",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Cloud-Hosted", "Self-Hosted"],
            "required": true,
            "description": "Environment type of your Monica instance"
          },
          {
            "name": "Self-Hosted Domain",
            "type": "string",
            "required": false,
            "description": "Your self-hosted Monica Domain",
            "displayOptions": {
              "show": {
                "environment": [
                  "Self-Hosted"
                ]
              }
            }
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Monica CRM API Token"
          }
        ]
      }
    }
  },
  "motorhead": {
    "serviceName": "Motorhead",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Host URL",
            "type": "string",
            "required": true,
            "description": "URL of your Motorhead instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Motorhead API Key"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Motorhead Client ID"
          }
        ]
      }
    }
  },
  "mqtt": {
    "serviceName": "MQTT",
    "authenticationMethods": {
      "brokerConnection": {
        "type": "Broker connection",
        "parameters": [
          {
            "name": "Protocol",
            "type": "options",
            "options": ["Mqtt", "Mqtts", "Ws"],
            "required": true,
            "description": "Protocol for MQTT connection"
          },
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Hostname or IP address of your MQTT broker"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "description": "Port number for MQTT connection"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for MQTT broker authentication"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for MQTT broker authentication"
          },
          {
            "name": "Clean Session",
            "type": "boolean",
            "required": false,
            "description": "Whether to use a clean session for MQTT connection"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": false,
            "description": "Client ID for MQTT connection"
          },
          {
            "name": "SSL",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSL for MQTT connection"
          },
          {
            "name": "Passwordless",
            "type": "boolean",
            "required": false,
            "description": "Whether to use passwordless connection with certificates",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Reject Unauthorized Certificate",
            "type": "boolean",
            "required": false,
            "description": "Whether to reject unauthorized SSL certificates",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  true
                ]
              }
            }
          },
          {
            "name": "Client Certificate",
            "type": "string",
            "required": false,
            "description": "Client certificate for passwordless SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  true
                ]
              }
            }
          },
          {
            "name": "Client Key",
            "type": "string",
            "required": false,
            "description": "Client key for passwordless SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  true
                ]
              }
            }
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Client Key",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  true
                ]
              }
            }
          },
          {
            "name": "CA Certificates",
            "type": "string",
            "required": false,
            "description": "CA certificates for SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  false
                ]
              }
            }
          }
        ]
      }
    }
  },
  "msg91": {
    "serviceName": "MSG91",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Authentication Key",
            "type": "password",
            "required": true,
            "description": "Your MSG91 Authentication Key"
          }
        ]
      }
    }
  },
  "mysql": {
    "serviceName": "MySQL",
    "authenticationMethods": {
      "databaseConnection": {
        "type": "Database connection",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your MySQL Hostname or IP address"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 3306,
            "description": "Port number for MySQL connection"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your MySQL Database name"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your MySQL Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your MySQL Password"
          },
          {
            "name": "Connect Timeout",
            "type": "number",
            "required": false,
            "default": 1000,
            "description": "Connection timeout in milliseconds"
          },
          {
            "name": "SSL",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSL for MySQL connection"
          },
          {
            "name": "SSH Tunnel",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSH tunnel for MySQL connection"
          },
          {
            "name": "SSH Authenticate with",
            "type": "options",
            "options": ["Password", "Private Key"],
            "required": false,
            "description": "Authentication method for SSH tunnel",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Host",
            "type": "string",
            "required": false,
            "description": "Hostname or IP address of your SSH server",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Port",
            "type": "number",
            "required": false,
            "default": 22,
            "description": "Port number for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Postgres Port",
            "type": "number",
            "required": false,
            "description": "Port number for Postgres server behind SSH tunnel",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH User",
            "type": "string",
            "required": false,
            "description": "Username for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Password",
            "type": "password",
            "required": false,
            "description": "Password for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ],
                "sshAuthenticateWith": [
                  "Password"
                ]
              }
            }
          },
          {
            "name": "Private Key",
            "type": "string",
            "required": false,
            "description": "Private key for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ],
                "sshAuthenticateWith": [
                  "Private Key"
                ]
              }
            }
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Private Key",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ],
                "sshAuthenticateWith": [
                  "Private Key"
                ]
              }
            }
          },
          {
            "name": "CA Certificate",
            "type": "string",
            "required": false,
            "description": "CA certificate for SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Client Private Key",
            "type": "string",
            "required": false,
            "description": "Client private key for SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Client Certificate",
            "type": "string",
            "required": false,
            "description": "Client certificate for SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          }
        ]
      }
    }
  },
  "nasa": {
    "serviceName": "NASA",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your NASA API Key"
          }
        ]
      }
    }
  },
  "netlify": {
    "serviceName": "Netlify",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Netlify API Access Token"
          }
        ]
      }
    }
  },
  "netscaleradc": {
    "serviceName": "Netscaler ADC",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your NetScaler/Citrix ADC instance"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your NetScaler/Citrix ADC Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your NetScaler/Citrix ADC Password"
          }
        ]
      }
    }
  },
  "nextcloud": {
    "serviceName": "Nextcloud",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Web DAV URL",
            "type": "string",
            "required": true,
            "description": "Your Nextcloud WebDAV URL"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your Nextcloud Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Nextcloud Password or App Password"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Nextcloud instance"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Nextcloud OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Nextcloud OAuth Client Secret"
          },
          {
            "name": "Web DAV URL",
            "type": "string",
            "required": true,
            "description": "Your Nextcloud WebDAV URL"
          }
        ]
      }
    }
  },
  "nocodb": {
    "serviceName": "NocoDB",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Host URL of your NocoDB instance"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your NocoDB API Token"
          }
        ]
      },
      "userAuthToken": {
        "type": "User auth token",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Host URL of your NocoDB instance"
          },
          {
            "name": "User Token",
            "type": "password",
            "required": true,
            "description": "Your NocoDB User Auth Token"
          }
        ]
      }
    }
  },
  "notion": {
    "serviceName": "Notion",
    "authenticationMethods": {
      "apiIntegrationToken": {
        "type": "API integration token",
        "parameters": [
          {
            "name": "Internal Integration Secret",
            "type": "password",
            "required": true,
            "description": "Your Notion Internal Integration Secret"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Notion OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Notion OAuth Client Secret"
          }
        ]
      }
    }
  },
  "npm": {
    "serviceName": "npm",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Registry URL",
            "type": "string",
            "required": true,
            "default": "https://registry.npmjs.org",
            "description": "URL of your npm registry"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your npm Access Token"
          }
        ]
      }
    }
  },
  "odoo": {
    "serviceName": "Odoo",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Site URL",
            "type": "string",
            "required": true,
            "description": "URL of your Odoo instance"
          },
          {
            "name": "Database name",
            "type": "string",
            "required": true,
            "description": "Your Odoo Database name"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Odoo Username"
          },
          {
            "name": "Password or API key",
            "type": "password",
            "required": true,
            "description": "Your Odoo Password or API Key"
          }
        ]
      },
      "password": {
        "type": "Password",
        "parameters": [
          {
            "name": "Site URL",
            "type": "string",
            "required": true,
            "description": "URL of your Odoo instance"
          },
          {
            "name": "Database name",
            "type": "string",
            "required": true,
            "description": "Your Odoo Database name"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Odoo Username"
          },
          {
            "name": "Password or API key",
            "type": "password",
            "required": true,
            "description": "Your Odoo Password or API Key"
          }
        ]
      }
    }
  },
  "okta": {
    "serviceName": "Okta",
    "authenticationMethods": {
      "sswsApiAccessToken": {
        "type": "SSWS API Access token",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Okta org"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Okta SSWS API Access Token"
          }
        ]
      }
    }
  },
  "ollama": {
    "serviceName": "Ollama",
    "authenticationMethods": {
      "instanceUrl": {
        "type": "Instance URL",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "default": "http://localhost:11434",
            "description": "Base URL of your Ollama instance"
          }
        ]
      }
    }
  },
  "onesimpleapi": {
    "serviceName": "One Simple API",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your One Simple API API Token"
          }
        ]
      }
    }
  },
  "onfleet": {
    "serviceName": "Onfleet",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Onfleet API Key"
          }
        ]
      }
    }
  },
  "openai": {
    "serviceName": "OpenAI",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your OpenAI API Key"
          },
          {
            "name": "Organization ID",
            "type": "string",
            "required": false,
            "description": "Your OpenAI Organization ID (Optional)"
          }
        ]
      }
    }
  },
  "opencti": {
    "serviceName": "OpenCTI",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your OpenCTI API Key"
          }
        ]
      }
    }
  },
  "openrouter": {
    "serviceName": "OpenRouter",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your OpenRouter API Key"
          }
        ]
      }
    }
  },
  "openweathermap": {
    "serviceName": "OpenWeatherMap",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your OpenWeatherMap API Access Token"
          }
        ]
      }
    }
  },
  "oura": {
    "serviceName": "Oura",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Personal Access Token",
            "type": "password",
            "required": true,
            "description": "Your Oura Personal Access Token"
          }
        ]
      }
    }
  },
  "paddle": {
    "serviceName": "Paddle",
    "authenticationMethods": {
      "apiAccessTokenClassic": {
        "type": "API access token (Classic)",
        "parameters": [
          {
            "name": "Vendor ID",
            "type": "number",
            "required": true,
            "description": "Your Paddle Vendor ID"
          },
          {
            "name": "Vendor Auth Code",
            "type": "password",
            "required": true,
            "description": "Your Paddle Vendor Auth Code"
          },
          {
            "name": "Use Sandbox Environment API",
            "type": "boolean",
            "required": false,
            "description": "Whether to use Paddle Sandbox Environment API"
          }
        ]
      }
    }
  },
  "pagerduty": {
    "serviceName": "PagerDuty",
    "authenticationMethods": {
      "apiKey": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your PagerDuty API Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your PagerDuty OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your PagerDuty OAuth Client Secret"
          }
        ]
      }
    }
  },
  "paypal": {
    "serviceName": "PayPal",
    "authenticationMethods": {
      "apiClientSecret": {
        "type": "API client and secret",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Live", "Sandbox"],
            "required": true,
            "description": "Environment type for PayPal connection"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your PayPal API Client ID"
          },
          {
            "name": "Secret",
            "type": "password",
            "required": true,
            "description": "Your PayPal API Secret"
          }
        ]
      }
    }
  },
  "peekalink": {
    "serviceName": "Peekalink",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Peekalink API Key"
          }
        ]
      }
    }
  },
  "phantombuster": {
    "serviceName": "PhantomBuster",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your PhantomBuster API Key"
          }
        ]
      }
    }
  },
  "philipshue": {
    "serviceName": "Philips Hue",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "App ID",
            "type": "string",
            "required": false,
            "description": "Your Philips Hue App ID (Optional for built-in OAuth)"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Philips Hue OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Philips Hue OAuth Client Secret"
          }
        ]
      }
    }
  },
  "pinecone": {
    "serviceName": "Pinecone",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Pinecone API Key"
          }
        ]
      }
    }
  },
  "pipedrive": {
    "serviceName": "Pipedrive",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Pipedrive Personal API Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Pipedrive OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Pipedrive OAuth Client Secret"
          }
        ]
      }
    }
  },
  "plivo": {
    "serviceName": "Plivo",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Auth ID",
            "type": "string",
            "required": true,
            "description": "Your Plivo Auth ID"
          },
          {
            "name": "Auth Token",
            "type": "password",
            "required": true,
            "description": "Your Plivo Auth Token"
          }
        ]
      }
    }
  },
  "postgres": {
    "serviceName": "Postgres",
    "authenticationMethods": {
      "databaseConnection": {
        "type": "Database connection",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your Postgres Hostname or IP address"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 5432,
            "description": "Port number for Postgres connection"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your Postgres Database name"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your Postgres Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Postgres Password"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          },
          {
            "name": "SSL",
            "type": "options",
            "options": ["Allow", "Disable", "Require"],
            "required": false,
            "description": "SSL setting for Postgres connection"
          },
          {
            "name": "SSH Tunnel",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSH tunnel for Postgres connection"
          },
          {
            "name": "SSH Authenticate with",
            "type": "options",
            "options": ["Password", "Private Key"],
            "required": false,
            "description": "Authentication method for SSH tunnel",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Host",
            "type": "string",
            "required": false,
            "description": "Hostname or IP address of your SSH server",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Port",
            "type": "number",
            "required": false,
            "default": 22,
            "description": "Port number for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Postgres Port",
            "type": "number",
            "required": false,
            "description": "Port number for Postgres server behind SSH tunnel",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH User",
            "type": "string",
            "required": false,
            "description": "Username for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ]
              }
            }
          },
          {
            "name": "SSH Password",
            "type": "password",
            "required": false,
            "description": "Password for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ],
                "sshAuthenticateWith": [
                  "Password"
                ]
              }
            }
          },
          {
            "name": "Private Key",
            "type": "string",
            "required": false,
            "description": "Private key for SSH connection",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ],
                "sshAuthenticateWith": [
                  "Private Key"
                ]
              }
            }
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Private Key",
            "displayOptions": {
              "show": {
                "sshTunnel": [
                  true
                ],
                "sshAuthenticateWith": [
                  "Private Key"
                ]
              }
            }
          }
        ]
      }
    }
  },
  "posthog": {
    "serviceName": "PostHog",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API URL",
            "type": "options",
            "options": ["https://us.i.posthog.com", "https://us.posthog.com", "https://eu.i.posthog.com", "https://eu.posthog.com", "Self-Hosted"],
            "required": true,
            "description": "URL of your PostHog API"
          },
          {
            "name": "Self-Hosted Domain",
            "type": "string",
            "required": false,
            "description": "Your self-hosted PostHog Domain",
            "displayOptions": {
              "show": {
                "apiUrl": [
                  "Self-Hosted"
                ]
              }
            }
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your PostHog API Key"
          }
        ]
      }
    }
  },
  "postmark": {
    "serviceName": "Postmark",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Server API Token",
            "type": "password",
            "required": true,
            "description": "Your Postmark Server API Token"
          }
        ]
      }
    }
  },
  "profitwell": {
    "serviceName": "ProfitWell",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your ProfitWell API Token"
          }
        ]
      }
    }
  },
  "pushbullet": {
    "serviceName": "Pushbullet",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Pushbullet OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Pushbullet OAuth Client Secret"
          }
        ]
      }
    }
  },
  "pushcut": {
    "serviceName": "Pushcut",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Pushcut API Key"
          }
        ]
      }
    }
  },
  "pushover": {
    "serviceName": "Pushover",
    "authenticationMethods": {
      "apiKey": {
        "type": "API Key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Pushover API Key"
          }
        ]
      }
    }
  },
  "qdrant": {
    "serviceName": "Qdrant",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Qdrant URL",
            "type": "string",
            "required": true,
            "description": "URL of your Qdrant cluster"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Qdrant API Key"
          }
        ]
      }
    }
  },
  "qradar": {
    "serviceName": "QRadar",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your QRadar API Key (Authorized service token)"
          }
        ]
      }
    }
  },
  "qualys": {
    "serviceName": "Qualys",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Qualys Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Qualys Password"
          },
          {
            "name": "Requested With",
            "type": "string",
            "required": false,
            "default": "n8n application",
            "description": "Value for X-Requested-With header"
          }
        ]
      }
    }
  },
  "questdb": {
    "serviceName": "QuestDB",
    "authenticationMethods": {
      "databaseConnection": {
        "type": "Database connection",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your QuestDB Hostname or IP address"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 8812,
            "description": "Port number for QuestDB connection"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "default": "qdb",
            "description": "Your QuestDB Database name"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "default": "admin",
            "description": "Your QuestDB Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "default": "quest",
            "description": "Your QuestDB Password"
          },
          {
            "name": "SSL",
            "type": "options",
            "options": ["Allow", "Disable", "Require"],
            "required": false,
            "description": "SSL setting for QuestDB connection"
          }
        ]
      }
    }
  },
  "quickbase": {
    "serviceName": "Quick Base",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Hostname",
            "type": "string",
            "required": true,
            "description": "Your Quick Base Hostname"
          },
          {
            "name": "User Token",
            "type": "password",
            "required": true,
            "description": "Your Quick Base User Token"
          }
        ]
      }
    }
  },
  "quickbooks": {
    "serviceName": "QuickBooks",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Production", "Sandbox"],
            "required": true,
            "description": "Environment type for QuickBooks connection"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your QuickBooks OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your QuickBooks OAuth Client Secret"
          }
        ]
      }
    }
  },
  "rabbitmq": {
    "serviceName": "RabbitMQ",
    "authenticationMethods": {
      "userConnection": {
        "type": "User connection",
        "parameters": [
          {
            "name": "Hostname",
            "type": "string",
            "required": true,
            "description": "Hostname of your RabbitMQ broker"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "description": "Port number for RabbitMQ connection"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "default": "guest",
            "description": "Username for RabbitMQ authentication"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "default": "guest",
            "description": "Password for RabbitMQ authentication"
          },
          {
            "name": "Vhost",
            "type": "string",
            "required": true,
            "default": "/",
            "description": "Virtual host for RabbitMQ connection"
          },
          {
            "name": "SSL",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSL for RabbitMQ connection"
          },
          {
            "name": "Passwordless",
            "type": "boolean",
            "required": false,
            "description": "Whether to use passwordless connection with certificates",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ]
              }
            }
          },
          {
            "name": "Client Certificate",
            "type": "string",
            "required": false,
            "description": "Client certificate for passwordless SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  true
                ]
              }
            }
          },
          {
            "name": "Client Key",
            "type": "string",
            "required": false,
            "description": "Client key for passwordless SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  true
                ]
              }
            }
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Client Key",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  true
                ]
              }
            }
          },
          {
            "name": "CA Certificates",
            "type": "string",
            "required": false,
            "description": "CA certificates for SSL connection",
            "displayOptions": {
              "show": {
                "ssl": [
                  true
                ],
                "passwordless": [
                  false
                ]
              }
            }
          }
        ]
      }
    }
  },
  "raindrop": {
    "serviceName": "Raindrop",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Raindrop OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Raindrop OAuth Client Secret"
          }
        ]
      }
    }
  },
  "rapid7insightvm": {
    "serviceName": "Rapid7 InsightVM",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "Your Rapid7 InsightVM API Endpoint URL"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Rapid7 InsightVM API Key"
          }
        ]
      }
    }
  },
  "recordedfuture": {
    "serviceName": "Recorded Future",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Recorded Future API Access Token"
          }
        ]
      }
    }
  },
  "reddit": {
    "serviceName": "Reddit",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Reddit OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Reddit OAuth Client Secret"
          }
        ]
      }
    }
  },
  "redis": {
    "serviceName": "Redis",
    "authenticationMethods": {
      "databaseConnection": {
        "type": "Database connection",
        "parameters": [
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Redis Password"
          },
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "default": "localhost",
            "description": "Your Redis Hostname or IP address"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 6379,
            "description": "Port number for Redis connection"
          },
          {
            "name": "Database Number",
            "type": "number",
            "required": true,
            "default": 0,
            "description": "Your Redis Database Number"
          },
          {
            "name": "SSL",
            "type": "boolean",
            "required": false,
            "description": "Whether to use SSL for Redis connection"
          }
        ]
      }
    }
  },
  "rocketchat": {
    "serviceName": "Rocket.Chat",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Rocket.Chat Domain"
          },
          {
            "name": "User ID",
            "type": "string",
            "required": true,
            "description": "Your Rocket.Chat User ID"
          },
          {
            "name": "Auth Key",
            "type": "password",
            "required": true,
            "description": "Your Rocket.Chat Personal Access Token"
          }
        ]
      }
    }
  },
  "rundeck": {
    "serviceName": "Rundeck",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Rundeck server"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Rundeck User API Token"
          }
        ]
      }
    }
  },
  "s3": {
    "serviceName": "S3",
    "authenticationMethods": {
      "s3Endpoint": {
        "type": "S3 endpoint",
        "parameters": [
          {
            "name": "S3 Endpoint",
            "type": "string",
            "required": true,
            "description": "URL endpoint for S3 storage backend"
          },
          {
            "name": "Region",
            "type": "string",
            "required": true,
            "description": "Region for your S3 storage"
          },
          {
            "name": "Access Key ID",
            "type": "string",
            "required": true,
            "description": "Your S3 Access Key ID"
          },
          {
            "name": "Secret Access Key",
            "type": "password",
            "required": true,
            "description": "Your S3 Secret Access Key"
          },
          {
            "name": "Force Path Style",
            "type": "boolean",
            "required": false,
            "description": "Whether to use path-style addressing for buckets"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "salesforce": {
    "serviceName": "Salesforce",
    "authenticationMethods": {
      "jwt": {
        "type": "JWT",
        "parameters": [
          {
            "name": "Environment Type",
            "type": "options",
            "options": ["Production", "Sandbox"],
            "required": true,
            "description": "Environment type of your Salesforce instance"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Salesforce OAuth Client ID (Consumer Key)"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Salesforce Username"
          },
          {
            "name": "Private Key",
            "type": "string",
            "required": true,
            "description": "Your Salesforce Private Key (PEM format)"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Environment Type",
            "type": "options",
            "options": ["Production", "Sandbox"],
            "required": true,
            "description": "Environment type of your Salesforce instance"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Salesforce OAuth Client ID (Consumer Key)"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Salesforce OAuth Client Secret (Consumer Secret)"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Salesforce Username"
          }
        ]
      }
    }
  },
  "salesmate": {
    "serviceName": "Salesmate",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "Your Salesmate domain name/base URL"
          },
          {
            "name": "Access Key",
            "type": "password",
            "required": true,
            "description": "Your Salesmate Access Key (Session Token)"
          }
        ]
      }
    }
  },
  "seatable": {
    "serviceName": "SeaTable",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Cloud-Hosted", "Self-Hosted"],
            "required": true,
            "description": "Environment type of your SeaTable instance"
          },
          {
            "name": "API Token (of a Base)",
            "type": "password",
            "required": true,
            "description": "Your SeaTable Base API Token"
          },
          {
            "name": "Timezone",
            "type": "string",
            "required": true,
            "description": "Timezone of your SeaTable server"
          }
        ]
      }
    }
  },
  "securityscorecard": {
    "serviceName": "SecurityScorecard",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your SecurityScorecard API Key"
          }
        ]
      }
    }
  },
  "segment": {
    "serviceName": "Segment",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Write Key",
            "type": "password",
            "required": true,
            "description": "Your Segment Write Key"
          }
        ]
      }
    }
  },
  "sekoia": {
    "serviceName": "Sekoia",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Sekoia API Key"
          }
        ]
      }
    }
  },
  "sendgrid": {
    "serviceName": "SendGrid",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your SendGrid API Key"
          }
        ]
      }
    }
  },
  "sendy": {
    "serviceName": "Sendy",
    "authenticationMethods": {
      "apiKey": {
        "type": "API Key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Sendy application"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Sendy API Key"
          }
        ]
      }
    }
  },
  "sentryio": {
    "serviceName": "Sentry.io",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Sentry.io User Auth Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Sentry.io OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Sentry.io OAuth Client Secret"
          }
        ]
      },
      "serverApiToken": {
        "type": "Server API token",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your self-hosted Sentry instance"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Sentry.io User Auth Token"
          }
        ]
      }
    }
  },
  "serp": {
    "serviceName": "Serp",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your SerpApi API Key"
          }
        ]
      }
    }
  },
  "servicenow": {
    "serviceName": "ServiceNow",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your ServiceNow Subdomain"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your ServiceNow Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your ServiceNow Password"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your ServiceNow Subdomain"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your ServiceNow OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your ServiceNow OAuth Client Secret"
          }
        ]
      }
    }
  },
  "shopify": {
    "serviceName": "Shopify",
    "authenticationMethods": {
      "accessToken": {
        "type": "Access token",
        "parameters": [
          {
            "name": "Shop Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Shopify Shop Subdomain"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Shopify Admin API Access Token"
          },
          {
            "name": "APP Secret Key",
            "type": "password",
            "required": true,
            "description": "Your Shopify App Secret Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Shop Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Shopify Shop Subdomain"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Shopify OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Shopify OAuth Client Secret"
          }
        ]
      },
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Shop Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Shopify Shop Subdomain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Shopify API Key"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Shopify Password"
          },
          {
            "name": "Shared Secret",
            "type": "password",
            "required": false,
            "description": "Your Shopify Shared Secret (Optional)"
          }
        ]
      }
    }
  },
  "shuffler": {
    "serviceName": "Shuffler",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Shuffler API Key"
          }
        ]
      }
    }
  },
  "signl4": {
    "serviceName": "SIGNL4",
    "authenticationMethods": {
      "webhookSecret": {
        "type": "Webhook secret",
        "parameters": [
          {
            "name": "Team Secret",
            "type": "string",
            "required": true,
            "description": "Your SIGNL4 Team Secret (part of webhook URL)"
          }
        ]
      }
    }
  },
  "slack": {
    "serviceName": "Slack",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Slack Bot User OAuth Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Slack OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Slack OAuth Client Secret"
          }
        ]
      }
    }
  },
  "sms77": {
    "serviceName": "seven",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your seven API Key"
          }
        ]
      }
    }
  },
  "snowflake": {
    "serviceName": "Snowflake",
    "authenticationMethods": {
      "databaseConnection": {
        "type": "Database connection",
        "parameters": [
          {
            "name": "Account",
            "type": "string",
            "required": true,
            "description": "Your Snowflake Account Name"
          },
          {
            "name": "Warehouse",
            "type": "string",
            "required": true,
            "description": "Your Snowflake Warehouse Name"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your Snowflake Database Name"
          },
          {
            "name": "Schema",
            "type": "string",
            "required": true,
            "description": "Your Snowflake Schema Name"
          },
          {
            "name": "Role",
            "type": "string",
            "required": true,
            "description": "Your Snowflake Role Name"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Snowflake Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Snowflake Password"
          },
          {
            "name": "Client Session Keep Alive",
            "type": "boolean",
            "required": false,
            "description": "Whether to keep client session alive indefinitely"
          }
        ]
      }
    }
  },
  "solarwindsipam": {
    "serviceName": "SolarWinds IPAM",
    "authenticationMethods": {
      "usernamePassword": {
        "type": "Username & Password",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your SolarWinds IPAM server"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your SolarWinds IPAM Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your SolarWinds IPAM Password"
          }
        ]
      }
    }
  },
  "solarwindsobservability": {
    "serviceName": "SolarWinds Observability SaaS",
    "authenticationMethods": {
      "apiToken": {
        "type": "API Token",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your SolarWinds Observability SaaS platform"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your SolarWinds Observability SaaS API Token"
          }
        ]
      }
    }
  },
  "splunk": {
    "serviceName": "Splunk",
    "authenticationMethods": {
      "apiAuthToken": {
        "type": "API auth token",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Splunk instance"
          },
          {
            "name": "Auth Token",
            "type": "password",
            "required": true,
            "description": "Your Splunk API Auth Token"
          },
          {
            "name": "Allow Self-Signed Certificates",
            "type": "boolean",
            "required": false,
            "description": "Whether to allow self-signed SSL certificates"
          }
        ]
      }
    }
  },
  "spontit": {
    "serviceName": "Spontit",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Spontit Username"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Spontit API Key"
          }
        ]
      }
    }
  },
  "spotify": {
    "serviceName": "Spotify",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Spotify OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Spotify OAuth Client Secret"
          }
        ]
      }
    }
  },
  "ssh": {
    "serviceName": "SSH",
    "authenticationMethods": {
      "password": {
        "type": "Password",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Hostname or IP address of your SSH server"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 22,
            "description": "Port number for SSH connection"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for SSH connection"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for SSH connection"
          }
        ]
      },
      "privateKey": {
        "type": "Private key",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Hostname or IP address of your SSH server"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 22,
            "description": "Port number for SSH connection"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for SSH connection"
          },
          {
            "name": "Private Key",
            "type": "string",
            "required": true,
            "description": "Private key for SSH connection"
          },
          {
            "name": "Passphrase",
            "type": "password",
            "required": false,
            "description": "Passphrase for encrypted Private Key"
          }
        ]
      }
    }
  },
  "stackby": {
    "serviceName": "Stackby",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Stackby API Key"
          }
        ]
      }
    }
  },
  "storyblok": {
    "serviceName": "Storyblok",
    "authenticationMethods": {
      "contentApiKey": {
        "type": "Content API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Storyblok Content API Key"
          }
        ]
      },
      "managementApiKey": {
        "type": "Management API key",
        "parameters": [
          {
            "name": "Personal Access Token",
            "type": "password",
            "required": true,
            "description": "Your Storyblok Personal Access Token"
          }
        ]
      }
    }
  },
  "strapi": {
    "serviceName": "Strapi",
    "authenticationMethods": {
      "apiUserAccount": {
        "type": "API user account",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Strapi server"
          },
          {
            "name": "API Version",
            "type": "options",
            "options": ["Version 3", "Version 4"],
            "required": true,
            "description": "Version of Strapi API"
          },
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Your Strapi user account Email"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Strapi user account Password"
          }
        ]
      },
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Strapi server"
          },
          {
            "name": "API Version",
            "type": "options",
            "options": ["Version 3", "Version 4"],
            "required": true,
            "description": "Version of Strapi API"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Strapi API Token"
          }
        ]
      }
    }
  },
  "strava": {
    "serviceName": "Strava",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Strava OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Strava OAuth Client Secret"
          }
        ]
      }
    }
  },
  "stripe": {
    "serviceName": "Stripe",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Secret Key",
            "type": "password",
            "required": true,
            "description": "Your Stripe API Secret Key"
          }
        ]
      }
    }
  },
  "supabase": {
    "serviceName": "Supabase",
    "authenticationMethods": {
      "accessToken": {
        "type": "Access token",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your Supabase Project URL"
          },
          {
            "name": "Service Role Secret",
            "type": "password",
            "required": true,
            "description": "Your Supabase Service Role Secret"
          }
        ]
      }
    }
  },
  "surveymonkey": {
    "serviceName": "SurveyMonkey",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your SurveyMonkey API Access Token"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your SurveyMonkey OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your SurveyMonkey OAuth Client Secret"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your SurveyMonkey OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your SurveyMonkey OAuth Client Secret"
          }
        ]
      }
    }
  },
  "syncromsp": {
    "serviceName": "SyncroMSP",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your SyncroMSP Subdomain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your SyncroMSP API Key (API token)"
          }
        ]
      }
    }
  },
  "sysdig": {
    "serviceName": "Sysdig",
    "authenticationMethods": {
      "accessKey": {
        "type": "Access Key",
        "parameters": [
          {
            "name": "Access Key",
            "type": "password",
            "required": true,
            "description": "Your Sysdig Access Key"
          }
        ]
      }
    }
  },
  "taiga": {
    "serviceName": "Taiga",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Cloud", "Self-Hosted"],
            "required": true,
            "description": "Environment type of your Taiga instance"
          },
          {
            "name": "URL",
            "type": "string",
            "required": false,
            "description": "URL of your Self-Hosted Taiga instance",
            "displayOptions": {
              "show": {
                "environment": [
                  "Self-Hosted"
                ]
              }
            }
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Taiga Username or Email"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Taiga Password"
          }
        ]
      }
    }
  },
  "tapfiliate": {
    "serviceName": "Tapfiliate",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Tapfiliate API Key"
          }
        ]
      }
    }
  },
  "telegram": {
    "serviceName": "Telegram",
    "authenticationMethods": {
      "apiBotAccessToken": {
        "type": "API bot access token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Telegram Bot Access Token"
          }
        ]
      }
    }
  },
  "thehive": {
    "serviceName": "TheHive",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your TheHive server"
          },
          {
            "name": "API Version",
            "type": "options",
            "options": ["TheHive 3 (api v0)", "TheHive 4 (api v1)"],
            "required": true,
            "description": "Version of TheHive API"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your TheHive API Key"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "thehive5": {
    "serviceName": "TheHive 5",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your TheHive 5 server"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your TheHive 5 API Key"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "timescaledb": {
    "serviceName": "TimescaleDB",
    "authenticationMethods": {
      "databaseConnection": {
        "type": "Database connection",
        "parameters": [
          {
            "name": "Host",
            "type": "string",
            "required": true,
            "description": "Your TimescaleDB Hostname or IP address"
          },
          {
            "name": "Port",
            "type": "number",
            "required": true,
            "default": 5432,
            "description": "Port number for TimescaleDB connection"
          },
          {
            "name": "Database",
            "type": "string",
            "required": true,
            "description": "Your TimescaleDB Database name"
          },
          {
            "name": "User",
            "type": "string",
            "required": true,
            "description": "Your TimescaleDB Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your TimescaleDB Password"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          },
          {
            "name": "SSL",
            "type": "options",
            "options": ["Allow", "Disable", "Require"],
            "required": false,
            "description": "SSL setting for TimescaleDB connection"
          }
        ]
      }
    }
  },
  "todoist": {
    "serviceName": "Todoist",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Todoist API Key"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Todoist OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Todoist OAuth Client Secret"
          }
        ]
      }
    }
  },
  "toggl": {
    "serviceName": "Toggl",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Username",
            "type": "email",
            "required": true,
            "description": "Your Toggl Username (Email Address)"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Toggl Password"
          }
        ]
      }
    }
  },
  "totp": {
    "serviceName": "TOTP",
    "authenticationMethods": {
      "secretAndLabel": {
        "type": "Secret and label",
        "parameters": [
          {
            "name": "Secret",
            "type": "string",
            "required": true,
            "description": "Your TOTP Secret Key (Base32 encoded)"
          },
          {
            "name": "Label",
            "type": "string",
            "required": true,
            "description": "Your TOTP Account Label"
          }
        ]
      }
    }
  },
  "travisci": {
    "serviceName": "Travis CI",
    "authenticationMethods": {
      "apiKey": {
        "type": "API token",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Travis CI API Token"
          }
        ]
      }
    }
  },
  "trellixepo": {
    "serviceName": "Trellix ePO",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Trellix ePO Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Trellix ePO Password"
          }
        ]
      }
    }
  },
  "trello": {
    "serviceName": "Trello",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "string",
            "required": true,
            "description": "Your Trello API Key"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Trello API Token"
          }
        ]
      }
    }
  },
  "twake": {
    "serviceName": "Twake",
    "authenticationMethods": {
      "cloudApiKey": {
        "type": "Cloud API key",
        "parameters": [
          {
            "name": "Workspace Key",
            "type": "password",
            "required": true,
            "description": "Your Twake Cloud Workspace Key"
          }
        ]
      },
      "serverApiKey": {
        "type": "Server API key",
        "parameters": [
          {
            "name": "Host URL",
            "type": "string",
            "required": true,
            "description": "URL of your self-hosted Twake instance"
          },
          {
            "name": "Public ID",
            "type": "string",
            "required": true,
            "description": "Your Twake Application Public ID"
          },
          {
            "name": "Private API Key",
            "type": "password",
            "required": true,
            "description": "Your Twake Application Private API Key"
          }
        ]
      }
    }
  },
  "twilio": {
    "serviceName": "Twilio",
    "authenticationMethods": {
      "authToken": {
        "type": "Auth token",
        "parameters": [
          {
            "name": "Account SID",
            "type": "string",
            "required": true,
            "description": "Your Twilio Account SID"
          },
          {
            "name": "Auth Token",
            "type": "password",
            "required": true,
            "description": "Your Twilio Auth Token"
          }
        ]
      },
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Account SID",
            "type": "string",
            "required": true,
            "description": "Your Twilio Account SID"
          },
          {
            "name": "API Key SID",
            "type": "string",
            "required": true,
            "description": "Your Twilio API Key SID"
          },
          {
            "name": "API Key Secret",
            "type": "password",
            "required": true,
            "description": "Your Twilio API Key Secret"
          }
        ]
      }
    }
  },
  "twist": {
    "serviceName": "Twist",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Twist OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Twist OAuth Client Secret"
          }
        ]
      }
    }
  },
  "twitter": {
    "serviceName": "X (formerly Twitter)",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your X OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your X OAuth Client Secret"
          }
        ]
      }
    }
  },
  "typeform": {
    "serviceName": "Typeform",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Typeform Personal Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Typeform OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Typeform OAuth Client Secret"
          }
        ]
      }
    }
  },
  "unleashedsoftware": {
    "serviceName": "Unleashed Software",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API ID",
            "type": "string",
            "required": true,
            "description": "Your Unleashed Software API ID"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Unleashed Software API Key"
          }
        ]
      }
    }
  },
  "uplead": {
    "serviceName": "UpLead",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your UpLead API Key"
          }
        ]
      }
    }
  },
  "uproc": {
    "serviceName": "uProc",
    "authenticationMethods": {
      "apiKey": {
        "type": "API Key",
        "parameters": [
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Your uProc login email address"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your uProc API Key"
          }
        ]
      }
    }
  },
  "uptimerobot": {
    "serviceName": "UptimeRobot",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your UptimeRobot API Key (Main API Key)"
          }
        ]
      }
    }
  },
  "urlscanio": {
    "serviceName": "urlscan.io",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your urlscan.io API Key"
          }
        ]
      }
    }
  },
  "venafitlsprotectcloud": {
    "serviceName": "Venafi TLS Protect Cloud",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Region",
            "type": "options",
            "options": ["US", "EU"],
            "required": true,
            "description": "Your Venafi TLS Protect Cloud Region"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Venafi TLS Protect Cloud API Key"
          }
        ]
      }
    }
  },
  "venafitlsprotectdatacenter": {
    "serviceName": "Venafi TLS Protect Datacenter",
    "authenticationMethods": {
      "apiIntegration": {
        "type": "API integration",
        "parameters": [
          {
            "name": "Domain",
            "type": "string",
            "required": true,
            "description": "Your Venafi TLS Protect Datacenter Domain"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Venafi TLS Protect Datacenter Client ID"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Venafi TLS Protect Datacenter Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Venafi TLS Protect Datacenter Password"
          },
          {
            "name": "Allow Self-Signed Certificates",
            "type": "boolean",
            "required": false,
            "description": "Whether to allow self-signed SSL certificates"
          }
        ]
      }
    }
  },
  "vero": {
    "serviceName": "Vero",
    "authenticationMethods": {
      "apiAuthToken": {
        "type": "API auth token",
        "parameters": [
          {
            "name": "Auth Token",
            "type": "password",
            "required": true,
            "description": "Your Vero Auth Token"
          }
        ]
      }
    }
  },
  "virustotal": {
    "serviceName": "VirusTotal",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your VirusTotal API Token"
          }
        ]
      }
    }
  },
  "vonage": {
    "serviceName": "Vonage",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Vonage API Key"
          },
          {
            "name": "API Secret",
            "type": "password",
            "required": true,
            "description": "Your Vonage API Secret"
          }
        ]
      }
    }
  },
  "webflow": {
    "serviceName": "Webflow",
    "authenticationMethods": {
      "apiAccessToken": {
        "type": "API access token",
        "parameters": [
          {
            "name": "Site Access Token",
            "type": "password",
            "required": true,
            "description": "Your Webflow Site Access Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Legacy",
            "type": "boolean",
            "required": false,
            "description": "Whether to use Legacy API version"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Webflow OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Webflow OAuth Client Secret"
          }
        ]
      }
    }
  },
  "webhook": {
    "serviceName": "Webhook",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Username for Webhook Basic Authentication"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Password for Webhook Basic Authentication"
          }
        ]
      },
      "headerAuth": {
        "type": "Header auth",
        "parameters": [
          {
            "name": "Name",
            "type": "string",
            "required": true,
            "description": "Header name for Webhook authentication"
          },
          {
            "name": "Value",
            "type": "string",
            "required": true,
            "description": "Header value for Webhook authentication"
          }
        ]
      },
      "jwtAuth": {
        "type": "JWT auth",
        "parameters": []
      },
      "none": {
        "type": "None",
        "parameters": []
      }
    }
  },
  "wekan": {
    "serviceName": "Wekan",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Wekan instance"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Wekan Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Wekan Password"
          }
        ]
      }
    }
  },
  "whatsapp": {
    "serviceName": "WhatsApp Business Cloud",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your WhatsApp Business Cloud API Access Token"
          },
          {
            "name": "Business Account ID",
            "type": "string",
            "required": true,
            "description": "Your WhatsApp Business Account ID"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your WhatsApp Business Cloud OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your WhatsApp Business Cloud OAuth Client Secret"
          }
        ]
      }
    }
  },
  "wise": {
    "serviceName": "Wise",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Environment",
            "type": "options",
            "options": ["Live", "Test"],
            "required": true,
            "description": "Environment type for Wise connection"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Wise API Token"
          },
          {
            "name": "Private Key (Optional)",
            "type": "string",
            "required": false,
            "description": "Private Key for SCA (Optional, for Live environment)"
          }
        ]
      }
    }
  },
  "wolframalpha": {
    "serviceName": "Wolfram|Alpha",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "App ID",
            "type": "string",
            "required": true,
            "description": "Your Wolfram|Alpha App ID"
          }
        ]
      }
    }
  },
  "woocommerce": {
    "serviceName": "WooCommerce",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "WooCommerce URL",
            "type": "string",
            "required": true,
            "description": "URL of your WordPress site with WooCommerce"
          },
          {
            "name": "Consumer Key",
            "type": "string",
            "required": true,
            "description": "Your WooCommerce API Consumer Key"
          },
          {
            "name": "Consumer Secret",
            "type": "password",
            "required": true,
            "description": "Your WooCommerce API Consumer Secret"
          },
          {
            "name": "Include Credentials in Query",
            "type": "boolean",
            "required": false,
            "description": "Whether to include credentials in query parameters"
          }
        ]
      }
    }
  },
  "wordpress": {
    "serviceName": "WordPress",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "WordPress URL",
            "type": "string",
            "required": true,
            "description": "URL of your WordPress site"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your WordPress Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your WordPress Application Password"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "workable": {
    "serviceName": "Workable",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Workable Subdomain"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Workable API Access Token"
          }
        ]
      }
    }
  },
  "wufoo": {
    "serviceName": "Wufoo",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Wufoo Subdomain"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Wufoo API Key"
          }
        ]
      }
    }
  },
  "xata": {
    "serviceName": "Xata",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Database Endpoint",
            "type": "string",
            "required": true,
            "description": "Your Xata Database Endpoint"
          },
          {
            "name": "Branch",
            "type": "string",
            "required": true,
            "description": "Your Xata Database Branch"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Xata API Key"
          }
        ]
      }
    }
  },
  "xero": {
    "serviceName": "Xero",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Access Token URL",
            "type": "options",
            "options": ["AU", "CN", "EU", "IN", "US"],
            "required": true,
            "description": "Your Xero data center region"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Xero OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Xero OAuth Client Secret"
          }
        ]
      }
    }
  },
  "yourls": {
    "serviceName": "Yourls",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Yourls instance"
          },
          {
            "name": "Signature",
            "type": "password",
            "required": true,
            "description": "Your Yourls Signature Token"
          }
        ]
      }
    }
  },
  "zabbix": {
    "serviceName": "Zabbix",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Zabbix server"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Zabbix API Token"
          }
        ]
      }
    }
  },
  "zammad": {
    "serviceName": "Zammad",
    "authenticationMethods": {
      "basicAuth": {
        "type": "Basic auth",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Zammad instance"
          },
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Your Zammad login email address"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Zammad login password"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      },
      "tokenAuth": {
        "type": "Token auth",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Zammad instance"
          },
          {
            "name": "Access Token",
            "type": "password",
            "required": true,
            "description": "Your Zammad API Access Token"
          },
          {
            "name": "Ignore SSL Issues",
            "type": "boolean",
            "required": false,
            "description": "Whether to ignore SSL certificate validation issues"
          }
        ]
      }
    }
  },
  "zendesk": {
    "serviceName": "Zendesk",
    "authenticationMethods": {
      "apiToken": {
        "type": "API token",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Zendesk Subdomain"
          },
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Your Zendesk login email address"
          },
          {
            "name": "API Token",
            "type": "password",
            "required": true,
            "description": "Your Zendesk API Token"
          }
        ]
      },
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Subdomain",
            "type": "string",
            "required": true,
            "description": "Your Zendesk Subdomain"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Zendesk OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Zendesk OAuth Client Secret"
          }
        ]
      }
    }
  },
  "zep": {
    "serviceName": "Zep",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "Cloud",
            "type": "boolean",
            "required": false,
            "description": "Whether using Zep Cloud"
          },
          {
            "name": "API URL",
            "type": "string",
            "required": true,
            "description": "URL of your Zep instance"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Zep API Key"
          }
        ]
      }
    }
  },
  "zoho": {
    "serviceName": "Zoho",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Access Token URL",
            "type": "options",
            "options": ["AU", "CN", "EU", "IN", "US"],
            "required": true,
            "description": "Your Zoho data center region"
          },
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Zoho OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Zoho OAuth Client Secret"
          }
        ]
      }
    }
  },
  "zoom": {
    "serviceName": "Zoom",
    "authenticationMethods": {
      "oauth2": {
        "type": "OAuth2",
        "parameters": [
          {
            "name": "Client ID",
            "type": "string",
            "required": true,
            "description": "Your Zoom OAuth Client ID"
          },
          {
            "name": "Client Secret",
            "type": "password",
            "required": true,
            "description": "Your Zoom OAuth Client Secret"
          }
        ]
      }
    }
  },
  "zscalerzia": {
    "serviceName": "Zscaler ZIA",
    "authenticationMethods": {
      "basicAuthAndApiKeyCombo": {
        "type": "Basic auth and API key combo",
        "parameters": [
          {
            "name": "Base URL",
            "type": "string",
            "required": true,
            "description": "Base URL of your Zscaler ZIA cloud name"
          },
          {
            "name": "Username",
            "type": "string",
            "required": true,
            "description": "Your Zscaler ZIA Admin Username"
          },
          {
            "name": "Password",
            "type": "password",
            "required": true,
            "description": "Your Zscaler ZIA Admin Password"
          },
          {
            "name": "Api Key",
            "type": "password",
            "required": true,
            "description": "Your Zscaler ZIA API Key"
          }
        ]
      }
    }
  },
  "zulip": {
    "serviceName": "Zulip",
    "authenticationMethods": {
      "apiKey": {
        "type": "API key",
        "parameters": [
          {
            "name": "URL",
            "type": "string",
            "required": true,
            "description": "URL of your Zulip domain"
          },
          {
            "name": "Email",
            "type": "email",
            "required": true,
            "description": "Your Zulip login email address"
          },
          {
            "name": "API Key",
            "type": "password",
            "required": true,
            "description": "Your Zulip API Key"
          }
        ]
      }
    }
  },
  "google": {
    "serviceName": "Google",
    "authenticationMethods": {}
  },
  "imap": {
    "serviceName": "IMAP",
    "authenticationMethods": {}
  },
  "sendemail": {
    "serviceName": "Send Email",
    "authenticationMethods": {}
  }
}



================================================
File: trigger-nodes.json
================================================
{
    "triggersLibrary": {
      "overview": "# Triggers library\n\nThis section provides information about [n8n's Triggers](/glossary.md#trigger-node-n8n)."
    },
    "activeCampaignTrigger": {
      "title": "ActiveCampaign Trigger node documentation",
      "description": "Learn how to use the ActiveCampaign Trigger node in n8n. Follow technical documentation to integrate ActiveCampaign Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/activecampaign.md",
      "examples": "https://n8n.io/integrations/activecampaign-trigger/"
    },
    "acuitySchedulingTrigger": {
      "title": "Acuity Scheduling Trigger node documentation",
      "description": "Learn how to use the Acuity Scheduling Trigger node in n8n. Follow technical documentation to integrate Acuity Scheduling Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/acuityscheduling.md",
      "examples": "https://n8n.io/integrations/acuity-scheduling-trigger/"
    },
    "affinityTrigger": {
      "title": "Affinity Trigger node documentation",
      "description": "Learn how to use the Affinity Trigger node in n8n. Follow technical documentation to integrate Affinity Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/affinity.md",
      "examples": "https://n8n.io/integrations/affinity-trigger/"
    },
    "airtableTrigger": {
      "title": "Airtable Trigger node documentation",
      "description": "Learn how to use the Airtable Trigger node in n8n. Follow technical documentation to integrate Airtable Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/airtable.md",
      "events": [
        "New Airtable event"
      ],
      "parameters": {
        "pollTimes": "Configures the querying frequency:\n\n* Every Minute\n* Every Hour\n* Every Day\n* Every Week\n* Every Month\n* Every X: Check for updates every given number of minutes or hours.\n* Custom: Customize the polling interval by providing a [cron expression](https://en.wikipedia.org/wiki/Cron).\n\nUse the **Add Poll Time** button to add more polling intervals.",
        "base": "The [Airtable base](https://support.airtable.com/docs/airtable-bases-overview) you want to check for updates on. You can provide your base's URL or [base ID](https://support.airtable.com/docs/finding-airtable-ids#finding-base-table-and-view-ids-from-urls).",
        "table": "The [Airtable table](https://support.airtable.com/docs/tables-overview) within the Airtable base that you want to check for updates on. You can provide the table's URL or [table ID](https://support.airtable.com/docs/finding-airtable-ids#finding-base-table-and-view-ids-from-urls).",
        "triggerField": "A created or last modified field in your table. The Airtable Trigger node uses this to determine what updates occurred since the previous check.",
        "downloadAttachments": "Whether to download attachments from the table. When enabled, the **Download Fields** parameter defines the attachment fields.",
        "downloadFields": "When you enable the **Download Attachments** toggle, this field defines which table fields to download. Field names are case sensitive. Use a comma to separate multiple field names.",
        "additionalFields": {
          "fields": "A comma-separated list of fields to include in the output. If you don't specify anything here, the output will contain only the **Trigger Field**.",
          "formula": "An [Airtable formula](https://support.airtable.com/docs/formula-field-reference) to further filter the results. You can use this to add further constraints to the events that trigger the workflow. Note that formula values aren't taken into account for manual executions, only for production polling.",
          "viewID": "The name or ID of a table view. When defined, only returns records available in the given view."
        }
      },
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.airtable/index.md",
        "examples": "https://n8n.io/integrations/airtable-trigger/",
        "api_docs": "https://airtable.com/developers/web/api/introduction"
      }
    },
    "amqpTrigger": {
      "title": "AMQP Trigger node documentation",
      "description": "Learn how to use the AMQP Trigger node in n8n. Follow technical documentation to integrate AMQP Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/amqp.md",
      "examples": "https://n8n.io/integrations/amqp-trigger/"
    },
    "asanaTrigger": {
      "title": "Asana Trigger node documentation",
      "description": "Learn how to use the Asana Trigger node in n8n. Follow technical documentation to integrate Asana Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/asana.md",
      "examples": "https://n8n.io/integrations/asana-trigger/"
    },
    "autopilotTrigger": {
      "title": "Autopilot Trigger node documentation",
      "description": "Learn how to use the Autopilot Trigger node in n8n. Follow technical documentation to integrate Autopilot Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/autopilot.md",
      "examples": "https://n8n.io/integrations/autopilot-trigger/",
      "events": [
        "Contact added",
        "Contact added to a list",
        "Contact entered to a segment",
        "Contact left a segment",
        "Contact removed from a list",
        "Contact unsubscribed",
        "Contact updated"
      ]
    },
    "awsSnsTrigger": {
      "title": "AWS SNS Trigger node documentation",
      "description": "Learn how to use the AWS SNS Trigger node in n8n. Follow technical documentation to integrate AWS SNS Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/aws.md",
      "examples": "https://n8n.io/integrations/aws-sns-trigger/"
    },
    "bitbucketTrigger": {
      "title": "Bitbucket Trigger node documentation",
      "description": "Learn how to use the Bitbucket Trigger node in n8n. Follow technical documentation to integrate Bitbucket Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/bitbucket.md",
      "examples": "https://n8n.io/integrations/bitbucket-trigger/"
    },
    "boxTrigger": {
      "title": "Box Trigger node documentation",
      "description": "Learn how to use the Box Trigger node in n8n. Follow technical documentation to integrate Box Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/box.md",
      "examples": "https://n8n.io/integrations/box-trigger/",
      "findTargetId": "To get your Target ID in Box:\n\n1. Open the file/folder that you would like to monitor.\n2. Copy the string of characters after folder/ in your URL. This is the target ID. For example, if the URL is https://app.box.com/folder/12345, then 12345 is the target ID.\n3. Paste it in the **Target ID** field in n8n."
    },
    "brevoTrigger": {
      "title": "Brevo Trigger node documentation",
      "description": "Learn how to use the Brevo Trigger node in n8n. Follow technical documentation to integrate Brevo Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/brevo.md",
      "examples": "https://n8n.io/integrations/brevo-trigger/"
    },
    "calendlyTrigger": {
      "title": "Calendly Trigger node documentation",
      "description": "Learn how to use the Calendly Trigger node in n8n. Follow technical documentation to integrate Calendly Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/calendly.md",
      "examples": "https://n8n.io/integrations/calendly-trigger/"
    },
    "calTrigger": {
      "title": "Cal Trigger node documentation",
      "description": "Learn how to use the Cal Trigger node in n8n. Follow technical documentation to integrate Cal Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/cal.md",
      "examples": "https://n8n.io/integrations/cal-trigger/"
    },
    "chargebeeTrigger": {
      "title": "Chargebee Trigger node documentation",
      "description": "Learn how to use the Chargebee Trigger node in n8n. Follow technical documentation to integrate Chargebee Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/chargebee.md",
      "examples": "https://n8n.io/integrations/chargebee-trigger/",
      "addWebhookUrl": "To add a Webhook URL in Chargebee:\n\n1. Open your Chargebee dashboard.\n2. Go to **Settings** > **Configure Chargebee**.\n4. Scroll down and select **Webhooks**.\n5. Select the **Add Webhook** button.\n6. Enter the **Webhook Name** and the **Webhook URL**.\n7. Select **Create**."
    },
    "ciscoWebexTrigger": {
      "title": "Webex by Cisco Trigger node documentation",
      "description": "Learn how to use the Webex by Cisco Trigger node in n8n. Follow technical documentation to integrate Webex by Cisco Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/ciscowebex.md",
      "examples": "https://n8n.io/integrations/webex-by-cisco-trigger/"
    },
    "clickUpTrigger": {
      "title": "ClickUp Trigger node documentation",
      "description": "Learn how to use the ClickUp Trigger node in n8n. Follow technical documentation to integrate ClickUp Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/clickup.md",
      "examples": "https://n8n.io/integrations/clickup-trigger/"
    },
    "clockifyTrigger": {
      "title": "Clockify Trigger node documentation",
      "description": "Learn how to use the Clockify Trigger node in n8n. Follow technical documentation to integrate Clockify Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/clockify.md",
      "examples": "https://n8n.io/integrations/clockify-trigger/",
      "timezoneNote": "This node uses the workflow timezone setting to specify the range of time entries starting time. Configure the timezone in your [Workflow Settings](/workflows/settings.md) if you want this trigger node to retrieve the right time entries."
    },
    "convertKitTrigger": {
      "title": "ConvertKit Trigger node documentation",
      "description": "Learn how to use the ConvertKit Trigger node in n8n. Follow technical documentation to integrate ConvertKit Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/convertkit.md",
      "examples": "https://n8n.io/integrations/convertkit-trigger/"
    },
    "copperTrigger": {
      "title": "Copper Trigger node documentation",
      "description": "Learn how to use the Copper Trigger node in n8n. Follow technical documentation to integrate Copper Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/copper.md",
      "examples": "https://n8n.io/integrations/copper-trigger/"
    },
    "crowdDevTrigger": {
      "title": "crowd.dev Trigger node documentation",
      "description": "Learn how to use the crowd.dev Trigger node in n8n. Follow technical documentation to integrate crowd.dev Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/crowddev.md",
      "examples": "https://n8n.io/integrations/crowddev-trigger/",
      "events": [
        "New Activity",
        "New Member"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.crowddev.md",
        "examples": "https://n8n.io/integrations/crowddev/",
        "api_docs": "https://docs.crowd.dev/reference/getting-started-with-crowd-dev-api"
      }
    },
    "customerIoTrigger": {
      "title": "Customer.io Trigger node documentation",
      "description": "Learn how to use the Customer.io Trigger node in n8n. Follow technical documentation to integrate Customer.io Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/customerio.md",
      "examples": "https://n8n.io/integrations/customerio-trigger/"
    },
    "emeliaTrigger": {
      "title": "Emelia Trigger node documentation",
      "description": "Learn how to use the Emelia Trigger node in n8n. Follow technical documentation to integrate Emelia Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/emelia.md",
      "examples": "https://n8n.io/integrations/emelia-trigger/",
      "events": [
        "Email Bounced",
        "Email Opened",
        "Email Replied",
        "Email Sent",
        "Link Clicked",
        "Unsubscribed Contact"
      ]
    },
    "eventbriteTrigger": {
      "title": "Eventbrite Trigger node documentation",
      "description": "Learn how to use the Eventbrite Trigger node in n8n. Follow technical documentation to integrate Eventbrite Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/eventbrite.md",
      "examples": "https://n8n.io/integrations/eventbrite-trigger/"
    },
    "facebookLeadAdsTrigger": {
      "title": "Facebook Lead Ads Trigger node documentation",
      "description": "Learn how to use the Facebook Lead Ads Trigger node in n8n. Follow technical documentation to integrate Facebook Lead Ads Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/facebookleadads.md",
      "examples": "https://n8n.io/integrations/facebook-lead-ads-trigger/",
      "events": [
        "New lead"
      ],
      "related_resources": {
        "examples": "https://n8n.io/integrations/facebook-lead-ads-trigger/",
        "api_docs": "https://developers.facebook.com/docs/marketing-api/guides/lead-ads/"
      },
      "common_issues": {
        "workflowOnlyWorksInTestingOrProduction": "Facebook Lead Ads only allows you to register a single webhook per app. This means that every time you switch from using the testing URL to the production URL (and vice versa), Facebook Lead Ads overwrites the registered webhook URL.\n\nYou may have trouble with this if you try to test a workflow that's also active in production. Facebook Lead Ads will only send events to one of the two webhook URLs, so the other will never receive event notifications.\n\nTo work around this, you can disable your workflow when testing:\n\n/// warning | Halts production traffic\nThis workaround temporarily disables your production workflow for testing. Your workflow will no longer receive production traffic while it's deactivated.\n///\n\n1. Go to your workflow page.\n2. Toggle the **Active** switch in the top panel to disable the workflow temporarily.\n3. Test your workflow using the test webhook URL.\n4. When you finish testing, toggle the **Inactive** toggle to enable the workflow again. The production webhook URL should resume working."
      }
    },
    "figmaTriggerBeta": {
      "title": "Figma Trigger (Beta) node documentation",
      "description": "Learn how to use the Figma Trigger node in n8n. Follow technical documentation to integrate Figma Trigger node into your workflows.",
      "warning": "Figma doesn't support webhooks on the free \"Starter\" plan. Your team needs to be on the \"Professional\" plan to use this node.",
      "credentials": "/integrations/builtin/credentials/figma.md",
      "examples": "https://n8n.io/integrations/figma-trigger-beta/",
      "events": [
        "File Commented",
        "File Deleted",
        "File Updated",
        "File Version Updated",
        "Library Publish"
      ]
    },
    "flowTrigger": {
      "title": "Flow Trigger node documentation",
      "description": "Learn how to use the Flow Trigger node in n8n. Follow technical documentation to integrate Flow Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/flow.md",
      "examples": "https://n8n.io/integrations/flow-trigger/"
    },
    "formIoTrigger": {
      "title": "Form.io Trigger node documentation",
      "description": "Learn how to use the Form.io Trigger node in n8n. Follow technical documentation to integrate Form.io Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/formiotrigger.md",
      "examples": "https://n8n.io/integrations/formio-trigger/"
    },
    "formstackTrigger": {
      "title": "Formstack Trigger node documentation",
      "description": "Learn how to use the Formstack Trigger node in n8n. Follow technical documentation to integrate Formstack Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/formstacktrigger.md",
      "examples": "https://n8n.io/integrations/formstack-trigger/"
    },
    "getResponseTrigger": {
      "title": "GetResponse Trigger node documentation",
      "description": "Learn how to use the GetResponse Trigger node in n8n. Follow technical documentation to integrate GetResponse Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/getresponse.md",
      "examples": "https://n8n.io/integrations/getresponse-trigger/",
      "events": [
        "Receive notifications when a customer is subscribed to a list",
        "Receive notifications when a customer is unsubscribed from a list",
        "Receive notifications when an email is opened",
        "Receive notifications when an email is clicked",
        "Receive notifications when a survey is submitted"
      ]
    },
    "gitHubTrigger": {
      "title": "GitHub Trigger node documentation",
      "description": "Learn how to use the GitHub Trigger node in n8n. Follow technical documentation to integrate GitHub Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/github.md",
      "examples": "https://n8n.io/integrations/github-trigger/"
    },
    "gitLabTrigger": {
      "title": "GitLab Trigger node documentation",
      "description": "Learn how to use the GitLab Trigger node in n8n. Follow technical documentation to integrate GitLab Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/gitlab.md",
      "examples": "https://n8n.io/integrations/gitlab-trigger/"
    },
    "googleBusinessProfileTrigger": {
      "title": "Google Business Profile Trigger node documentation",
      "description": "Learn how to use the Google Business Profile Trigger node in n8n. Follow technical documentation to integrate Google Business Profile Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/google/index.md",
      "examples": "https://n8n.io/integrations/google-business-profile-trigger/",
      "events": [
        "Review Added"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.googlebusinessprofile.md",
        "examples": "https://n8n.io/integrations/google-business-profile-trigger/",
        "api_docs": "https://developers.google.com/my-business/reference/rest"
      }
    },
    "googleCalendarTrigger": {
      "title": "Google Calendar Trigger node documentation",
      "description": "Learn how to use the Google Calendar Trigger node in n8n. Follow technical documentation to integrate Google Calendar Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/google/index.md",
      "examples": "https://n8n.io/integrations/google-calendar-trigger/",
      "events": [
        "Event Cancelled",
        "Event Created",
        "Event Ended",
        "Event Started",
        "Event Updated"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.googlecalendar/index.md",
        "examples": "https://n8n.io/integrations/google-calendar-trigger/",
        "api_docs": "https://developers.google.com/calendar/api/v3/reference"
      }
    },
    "gumroadTrigger": {
      "title": "Gumroad Trigger node documentation",
      "description": "Learn how to use the Gumroad Trigger node in n8n. Follow technical documentation to integrate Gumroad Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/gumroad.md",
      "examples": "https://n8n.io/integrations/gumroad-trigger/"
    },
    "helpScoutTrigger": {
      "title": "Help Scout Trigger node documentation",
      "description": "Learn how to use the Help Scout Trigger node in n8n. Follow technical documentation to integrate Help Scout Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/helpscout.md",
      "examples": "https://n8n.io/integrations/helpscout-trigger/"
    },
    "hubSpotTrigger": {
      "title": "HubSpot Trigger node documentation",
      "description": "Learn how to use the HubSpot Trigger node in n8n. Follow technical documentation to integrate HubSpot Trigger node into your workflows.",
      "warning": "If you activate a second trigger, the previous trigger stops working. This is because the trigger registers a new webhook with HubSpot when activated. HubSpot only allows one webhook at a time.",
      "credentials": "/integrations/builtin/credentials/hubspot.md",
      "examples": "https://n8n.io/integrations/hubspot-trigger/",
      "events": {
        "company": [
          "Created",
          "Deleted",
          "Property changed"
        ],
        "contact": [
          "Created",
          "Deleted",
          "Privacy deleted",
          "Property changed"
        ],
        "conversation": [
          "Created",
          "Deleted",
          "New message",
          "Privacy deletion",
          "Property changed"
        ],
        "deal": [
          "Created",
          "Deleted",
          "Property changed"
        ],
        "ticket": [
          "Created",
          "Deleted",
          "Property changed"
        ]
      },
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.hubspot.md",
        "examples": "https://n8n.io/integrations/hubspot-trigger/",
        "api_docs": "https://developers.hubspot.com/docs/api/overview"
      }
    },
    "invoiceNinjaTrigger": {
      "title": "Invoice Ninja Trigger node documentation",
      "description": "Learn how to use the Invoice Ninja Trigger node in n8n. Follow technical documentation to integrate Invoice Ninja Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/invoiceninja.md",
      "examples": "https://n8n.io/integrations/invoice-ninja-trigger/"
    },
    "jiraTrigger": {
      "title": "Jira Trigger node documentation",
      "description": "Learn how to use the Jira Trigger node in n8n. Follow technical documentation to integrate Jira Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/jira.md",
      "examples": "https://n8n.io/integrations/jira-trigger/"
    },
    "jotFormTrigger": {
      "title": "JotForm Trigger node documentation",
      "description": "Learn how to use the JotForm Trigger node in n8n. Follow technical documentation to integrate JotForm Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/jotform.md",
      "examples": "https://n8n.io/integrations/jotform-trigger/"
    },
    "kafkaTrigger": {
      "title": "Kafka Trigger node documentation",
      "description": "Learn how to use the Kafka Trigger node in n8n. Follow technical documentation to integrate Kafka Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/kafka.md",
      "examples": "https://n8n.io/integrations/kafka-trigger/"
    },
    "keapTrigger": {
      "title": "Keap Trigger node documentation",
      "description": "Learn how to use the Keap Trigger node in n8n. Follow technical documentation to integrate Keap Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/keap.md",
      "examples": "https://n8n.io/integrations/keap-trigger/"
    },
    "koboToolboxTrigger": {
      "title": "KoboToolbox Trigger node documentation",
      "description": "Learn how to use the KoboToolbox Trigger node in n8n. Follow technical documentation to integrate KoboToolbox Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/kobotoolbox.md",
      "examples": "https://n8n.io/integrations/kobotoolbox-trigger/",
      "note": "This node starts a workflow upon new submissions of a specified form. The trigger node handles the creation/deletion of the hook, so you don't need to do any setup in KoboToolbox.\n\nIt works the same way as the Get Submission operation in the [KoboToolbox](/integrations/builtin/app-nodes/n8n-nodes-base.kobotoolbox.md) node, including supporting the same reformatting options."
    },
    "lemlistTrigger": {
      "title": "Lemlist Trigger node documentation",
      "description": "Learn how to use the Lemlist Trigger node in n8n. Follow technical documentation to integrate Lemlist Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/lemlist.md",
      "examples": "https://n8n.io/integrations/lemlist-trigger/",
      "events": [
        "*",
        "Aircall Created",
        "Aircall Done",
        "Aircall Ended",
        "Aircall Interested",
        "Aircall Not Interested",
        "Api Done",
        "Api Failed",
        "Api Interested",
        "Api Not Interested",
        "Attracted",
        "Connection Issue",
        "Contacted",
        "Custom Domain Errors",
        "Emails Bounced",
        "Emails Clicked",
        "Emails Failed",
        "Emails Interested",
        "Emails Not Interested",
        "Emails Opened",
        "Emails Replied",
        "Emails Send Failed",
        "Emails Sent",
        "Emails Unsubscribed",
        "Hooked",
        "Interested",
        "Lemwarm Paused",
        "LinkedIn Interested",
        "LinkedIn Invite Accepted",
        "LinkedIn Invite Done",
        "LinkedIn Invite Failed",
        "LinkedIn Not Interested",
        "LinkedIn Replied",
        "LinkedIn Send Failed",
        "LinkedIn Sent",
        "LinkedIn Visit Done",
        "LinkedIn Visit Failed",
        "LinkedIn Voice Note Done",
        "LinkedIn Voice Note Failed",
        "Manual Interested",
        "Manual Not Interested",
        "Not Interested",
        "Opportunities Done",
        "Paused",
        "Resumed",
        "Send Limit Reached",
        "Skipped",
        "Warmed"
      ]
    },
    "linearTrigger": {
      "title": "Linear Trigger node documentation",
      "description": "Learn how to use the Linear Trigger node in n8n. Follow technical documentation to integrate Linear Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/linear.md",
      "examples": "https://n8n.io/integrations/linear-trigger/",
      "events": [
        "Comment Reaction",
        "Cycle",
        "Issue",
        "Issue Comment",
        "Issue Label",
        "Project"
      ]
    },
    "loneScaleTrigger": {
      "title": "LoneScale Trigger node documentation",
      "description": "Learn how to use the LoneScale Trigger node in n8n. Follow technical documentation to integrate LoneScale Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/lonescale.md",
      "examples": "https://n8n.io/integrations/lonescale-trigger/",
      "events": [
        "On new LoneScale event"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.lonescale.md",
        "examples": "https://n8n.io/integrations/lonescale-trigger/"
      }
    },
    "mailChimpTrigger": {
      "title": "Mailchimp Trigger node documentation",
      "description": "Learn how to use the Mailchimp Trigger node in n8n. Follow technical documentation to integrate Mailchimp Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/mailchimp.md",
      "examples": "https://n8n.io/integrations/mailchimp-trigger/"
    },
    "mailerLiteTrigger": {
      "title": "MailerLite Trigger node documentation",
      "description": "Learn how to use the MailerLite Trigger node in n8n. Follow technical documentation to integrate MailerLite Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/mailerlite.md",
      "examples": "https://n8n.io/integrations/mailerlite-trigger/",
      "events": [
        "Campaign Sent",
        "Subscriber Added to Group",
        "Subscriber Automation Completed",
        "Subscriber Automation Triggered",
        "Subscriber Bounced",
        "Subscriber Created",
        "Subscriber Complained",
        "Subscriber Removed from Group",
        "Subscriber Unsubscribe",
        "Subscriber Updated"
      ]
    },
    "mailJetTrigger": {
      "title": "Mailjet Trigger node documentation",
      "description": "Learn how to use the Mailjet Trigger node in n8n. Follow technical documentation to integrate Mailjet Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/mailjet.md",
      "examples": "https://n8n.io/integrations/mailjet-trigger/"
    },
    "mauticTrigger": {
      "title": "Mautic Trigger node documentation",
      "description": "Learn how to use the Mautic Trigger node in n8n. Follow technical documentation to integrate Mautic Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/mautic.md",
      "examples": "https://n8n.io/integrations/mautic-trigger/",
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.mautic.md",
        "examples": "https://n8n.io/integrations/mautic/"
      }
    },
    "microsoftOneDriveTrigger": {
      "title": "Microsoft OneDrive Trigger node documentation",
      "description": "Learn how to use the Microsoft OneDrive Trigger node in n8n. Follow technical documentation to integrate Microsoft OneDrive Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/microsoft.md",
      "examples": "https://n8n.io/integrations/microsoft-onedrive-trigger/",
      "events": [
        "On File Created",
        "On File Updated",
        "On Folder Created",
        "On Folder Updates"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.microsoftonedrive.md",
        "examples": "https://n8n.io/integrations/microsoft-onedrive-trigger/",
        "api_docs": "https://learn.microsoft.com/en-us/onedrive/developer/rest-api/"
      }
    },
    "microsoftOutlookTrigger": {
      "title": "Microsoft Outlook Trigger node documentation",
      "description": "Learn how to use the Microsoft Outlook Trigger node in n8n. Follow technical documentation to integrate Microsoft Outlook Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/microsoft.md",
      "examples": "https://n8n.io/integrations/microsoft-outlook-trigger/",
      "events": [
        "Message Received"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.microsoftoutlook.md",
        "examples": "https://n8n.io/integrations/microsoft-outlook-trigger/"
      }
    },
    "mqttTrigger": {
      "title": "MQTT Trigger node documentation",
      "description": "Learn how to use the MQTT Trigger node in n8n. Follow technical documentation to integrate MQTT Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/mqtt.md",
      "examples": "https://n8n.io/integrations/mqtt-trigger/"
    },
    "netlifyTrigger": {
      "title": "Netlify Trigger node documentation",
      "description": "Learn how to use the Netlify Trigger node in n8n. Follow technical documentation to integrate Netlify Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/netlify.md",
      "examples": "https://n8n.io/integrations/netlify-trigger/",
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.netlify.md",
        "examples": "https://n8n.io/integrations/netlify/"
      }
    },
    "notionTrigger": {
      "title": "Notion Trigger node documentation",
      "description": "Learn how to use the Notion Trigger node in n8n. Follow technical documentation to integrate Notion Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/notion.md",
      "examples": "https://n8n.io/integrations/notion-trigger-beta/",
      "events": [
        "Page added to database",
        "Page updated in database"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.notion/index.md",
        "examples": "https://n8n.io/integrations/notion-trigger/",
        "api_docs": "https://developers.notion.com/"
      }
    },
    "onfleetTrigger": {
      "title": "Onfleet Trigger node documentation",
      "description": "Learn how to use the Onfleet Trigger node in n8n. Follow technical documentation to integrate Onfleet Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/onfleet.md",
      "examples": "https://n8n.io/integrations/onfleet-trigger/",
      "events": [
        "SMS recipient opt out",
        "SMS recipient response missed",
        "Task arrival",
        "Task assigned",
        "Task cloned",
        "Task completed",
        "Task created",
        "Task delayed",
        "Task ETA",
        "Task failed",
        "Task started",
        "Task unassigned",
        "Task updated",
        "Worker created",
        "Worker deleted",
        "Worker duty"
      ]
    },
    "payPalTrigger": {
      "title": "PayPal Trigger node documentation",
      "description": "Learn how to use the PayPal Trigger node in n8n. Follow technical documentation to integrate PayPal Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/paypal.md",
      "examples": "https://n8n.io/integrations/paypal-trigger/"
    },
    "pipedriveTrigger": {
      "title": "Pipedrive Trigger node documentation",
      "description": "Learn how to use the Pipedrive Trigger node in n8n. Follow technical documentation to integrate Pipedrive Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/pipedrive.md",
      "examples": "https://n8n.io/integrations/pipedrive-trigger/"
    },
    "postgresTrigger": {
      "title": "Postgres Trigger node documentation",
      "description": "Learn how to use the Postgres Trigger node in n8n. Follow technical documentation to integrate Postgres Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/postgres.md",
      "examples": "https://n8n.io/integrations/postgres-trigger/",
      "events": {
        "listenAndCreateTriggerRule": {
          "description": "Select **Listen and Create Trigger Rule**, then choose the events to listen for:",
          "options": [
            "Insert",
            "Update",
            "Delete"
          ]
        },
        "listenToChannel": {
          "description": "Select **Listen to Channel**, then enter a channel name that the node should monitor."
        }
      },
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.postgres/index.md",
        "examples": "https://n8n.io/integrations/postgres-trigger/"
      }
    },
    "postmarkTrigger": {
      "title": "Postmark Trigger node documentation",
      "description": "Learn how to use the Postmark Trigger node in n8n. Follow technical documentation to integrate Postmark Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/postmark.md",
      "examples": "https://n8n.io/integrations/postmark-trigger/"
    },
    "pushcutTrigger": {
      "title": "Pushcut Trigger node documentation",
      "description": "Learn how to use the Pushcut Trigger node in n8n. Follow technical documentation to integrate Pushcut Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/pushcut.md",
      "examples": "https://n8n.io/integrations/pushcut-trigger/",
      "configureAction": "Follow these steps to configure your Pushcut Trigger node with your Pushcut app.\n\n1. In your Pushcut app, select a notification from the **Notifications** screen.\n2. Select the **Add Action** button.\n3. Enter an action name in the **Label** field.\n4. Select the **Server** tab.\n5. Select the **Integration** tab.\n6. Select **Integration Trigger**.\n7. In n8n, enter a name for the action and select **Test step**.\n8. Select this action under the **Select Integration Trigger** screen in your Pushcut app.\n9. Select **Done** in the top right to save the action."
    },
    "rabbitMqTrigger": {
      "title": "RabbitMQ Trigger node documentation",
      "description": "Learn how to use the RabbitMQ Trigger node in n8n. Follow technical documentation to integrate RabbitMQ Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/rabbitmq.md",
      "examples": "https://n8n.io/integrations/rabbitmq-trigger/",
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.rabbitmq.md",
        "examples": "https://n8n.io/integrations/rabbitmq-trigger/"
      }
    },
    "redisTrigger": {
      "title": "Redis Trigger node documentation",
      "description": "Learn how to use the Redis Trigger node in n8n. Follow technical documentation to integrate Redis Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/redis.md",
      "examples": "https://n8n.io/integrations/redis-trigger/",
      "description_extended": "Use the Redis Trigger node to subscribe to a Redis channel. The workflow starts whenever the channel receives a new message."
    },
    "salesforceTrigger": {
      "title": "Salesforce Trigger node documentation",
      "description": "Learn how to use the Salesforce Trigger node in n8n. Follow technical documentation to integrate Salesforce Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/salesforce.md",
      "examples": "https://n8n.io/integrations/salesforce-trigger/",
      "events": [
        "On Account Created",
        "On Account Updated",
        "On Attachment Created",
        "On Attachment Updated",
        "On Case Created",
        "On Case Updated",
        "On Contact Created",
        "On Contact Updated",
        "On Custom Object Created",
        "On Custom Object Updated",
        "On Lead Created",
        "On Lead Updated",
        "On Opportunity Created",
        "On Opportunity Updated",
        "On Task Created",
        "On Task Updated",
        "On User Created",
        "On User Updated"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.salesforce.md",
        "examples": "https://n8n.io/integrations/salesforce-trigger/"
      }
    },
    "seaTableTrigger": {
      "title": "SeaTable Trigger node documentation",
      "description": "Learn how to use the SeaTable Trigger node in n8n. Follow technical documentation to integrate SeaTable Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/seatable.md",
      "examples": "https://n8n.io/integrations/seatable-trigger/"
    },
    "shopifyTrigger": {
      "title": "Shopify Trigger node documentation",
      "description": "Learn how to use the Shopify Trigger node in n8n. Follow technical documentation to integrate Shopify Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/shopify.md",
      "examples": "https://n8n.io/integrations/shopify-trigger/"
    },
    "slackTrigger": {
      "title": "Slack Trigger node documentation",
      "description": "Learn how to use the Slack Trigger node in n8n. Follow technical documentation to integrate Slack Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/slack.md",
      "examples": "https://n8n.io/integrations/slack-trigger/",
      "events": [
        "Any Event",
        "Bot / App Mention",
        "File Made Public",
        "File Shared",
        "New Message Posted to Channel",
        "New Public Channel Created",
        "New User",
        "Reaction Added"
      ],
      "parameters": {
        "watchWholeWorkspace": "Whether the node should watch for the selected **Events** in all channels in the workspace (turned on) or not (turned off, default).\n\n///warning | Caution\nThis will use one execution for every event in any channel your bot or app is in. Use with caution!\n///",
        "channelToWatch": "Select the channel your node should watch for the selected **Events**. This parameter only appears if you don't turn on **Watch Whole Workspace**. You can select a channel:\n    * **From list**: The node uses your credential to look up a list of channels in the workspace so you can select the channel you want.\n    * **By ID**: Enter the ID of a channel you want to watch. Slack displays the channel ID at the bottom of the channel details with a one-click copy button.\n    * **By URL**: Enter the URL of the channel you want to watch, formatted as https://app.slack.com/client/<channel-address>.",
        "downloadFiles": "Whether to download files and use them in the node's output (turned on) or not (turned off, default). Use this parameter with the **File Made Public** and **File Shared** events."
      },
      "options": {
        "resolveIds": "Whether to resolve the IDs to their respective names and return them (turned on) or not (turned off, default).",
        "usernamesOrIdsToIgnore": "Select usernames or enter a comma-separated string of encoded user IDs to ignore events from. Choose from the list, or specify IDs using an [expression](/code/expressions.md)."
      },
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.slack.md",
        "examples": "https://n8n.io/integrations/slack-trigger/",
        "api_docs": "https://api.slack.com/apis/connections/events-api"
      },
      "required_scopes": "To use this node, you need to create an application in Slack and enable event subscriptions. Refer to [Slack credentials | Slack Trigger configuration](/integrations/builtin/credentials/slack.md#slack-trigger-configuration) for more information.\n\nYou must add the appropriate scopes to your Slack app for this trigger node to work.\n\nThe node requires scopes for the [conversations.list](https://api.slack.com/methods/conversations.list){:target=blank .external-link} and [users.list](https://api.slack.com/methods/users.list){:target=blank .external-link} methods at minimum. Check out the [Scopes | Slack credentials](/integrations/builtin/credentials/slack.md#scopes) list for a more complete list of scopes.",
      "common_issues": {
        "workflowOnlyWorksInTestingOrProduction": "Slack only allows you to register a single webhook per app. This means that you can't switch from using the testing URL to the production URL (and vice versa) without reconfiguring the registered webhook URL.\n\nYou may have trouble with this if you try to test a workflow that's also active in production. Slack will only send events to one of the two webhook URLs, so the other will never receive event notifications.\n\nTo work around this, you can disable your workflow when testing:\n\n/// warning | Halts production traffic\nThis temporarily disables your production workflow for testing. Your workflow will no longer receive production traffic while it's deactivated.\n///\n\n1. Go to your workflow page.\n2. Toggle the **Active** switch in the top panel to disable the workflow temporarily.\n3. Edit the **Request URL** in your the [Slack Trigger configuration](/integrations/builtin/credentials/slack.md#slack-trigger-configuration) to use the testing webhook URL instead of the production webhook URL.\n4. Test your workflow using the test webhook URL.\n5. When you finish testing, edit the **Request URL** in your the [Slack Trigger configuration](/integrations/builtin/credentials/slack.md#slack-trigger-configuration) to use the production webhook URL instead of the testing webhook URL.\n6. Toggle the **Inactive** toggle to enable the workflow again. The production webhook URL should resume working.",
        "tokenExpired": "--8<-- \"_snippets/integrations/builtin/credentials/slack/token-rotation.md\""
      }
    },
    "stravaTrigger": {
      "title": "Strava Trigger node documentation",
      "description": "Learn how to use the Strava Trigger node in n8n. Follow technical documentation to integrate Strava Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/strava.md",
      "examples": "https://n8n.io/integrations/strava-trigger/",
      "events": {
        "all": [
          "[All]",
          "Created",
          "Deleted",
          "Updated"
        ],
        "activity": [
          "[All]",
          "Created",
          "Deleted",
          "Updated"
        ],
        "athlete": [
          "[All]",
          "Created",
          "Deleted",
          "Updated"
        ]
      }
    },
    "stripeTrigger": {
      "title": "Stripe Trigger node documentation",
      "description": "Learn how to use the Stripe Trigger node in n8n. Follow technical documentation to integrate Stripe Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/stripe.md",
      "examples": "https://n8n.io/integrations/stripe-trigger/"
    },
    "surveyMonkeyTrigger": {
      "title": "SurveyMonkey Trigger node documentation",
      "description": "Learn how to use the SurveyMonkey Trigger node in n8n. Follow technical documentation to integrate SurveyMonkey Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/surveymonkey.md",
      "examples": "https://n8n.io/integrations/surveymonkey-trigger/"
    },
    "taigaTrigger": {
      "title": "Taiga Trigger node documentation",
      "description": "Learn how to use the Taiga Trigger node in n8n. Follow technical documentation to integrate Taiga Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/taiga.md",
      "examples": "https://n8n.io/integrations/taiga-trigger/"
    },
    "theHive5Trigger": {
      "title": "TheHive 5 Trigger node documentation",
      "description": "Learn how to use the TheHive 5 Trigger node in n8n. Follow technical documentation to integrate TheHive 5 Trigger node into your workflows.",
      "note": "n8n provides two nodes for TheHive. Use this node (TheHive 5 Trigger) if you want to use TheHive's version 5 API. If you want to use version 3 or 4, use [TheHive Trigger](/integrations/builtin/trigger-nodes/n8n-nodes-base.thehivetrigger.md).",
      "examples": "https://n8n.io/integrations/thehive-5-trigger/",
      "events": {
        "alert": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "case": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "comment": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "observable": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "page": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "task": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "taskLog": [
          "Created",
          "Deleted",
          "Updated"
        ]
      },
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.thehive5.md",
        "api_docs": "https://docs.strangebee.com/"
      },
      "configureWebhook": "To configure the webhook for your TheHive instance:\n\n1. Copy the testing and production webhook URLs from TheHive Trigger node.\n2. Add the following lines to the application.conf file. This is TheHive configuration file:\n\n\nnotification.webhook.endpoints = [\n\t\t{\n\t\t\tname: TESTING_WEBHOOK_NAME\n\t\t\turl: TESTING_WEBHOOK_URL\n\t\t\tversion: 0\n\t\t\twsConfig: {}\n\t\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\t\texcludedTheHiveOrganisations: []\n\t\t},\n\t\t{\n\t\t\tname: PRODUCTION_WEBHOOK_NAME\n\t\t\turl: PRODUCTION_WEBHOOK_URL\n\t\t\tversion: 0\n\t\t\twsConfig: {}\n\t\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\t\texcludedTheHiveOrganisations: []\n\t\t}\n\t]\n\n\n3. Replace TESTING_WEBHOOK_URL and PRODUCTION_WEBHOOK_URL with the URLs you copied in the previous step.\n4. Replace TESTING_WEBHOOK_NAME and PRODUCTION_WEBHOOK_NAME with your preferred endpoint names.\n5. Replace ORGANIZATION_NAME with your organization name.\n6. Execute the following cURL command to enable notifications:\n\nsh\n\tcurl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d '\n\t{\n\t\t\"value\": [\n\t\t\t{\n\t\t\t\"delegate\": false,\n\t\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"TESTING_WEBHOOK_NAME\" }\n\t\t\t},\n\t\t\t{\n\t\t\t\"delegate\": false,\n\t\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"PRODUCTION_WEBHOOK_NAME\" }\n\t\t\t}\n\t\t]\n\t}'"
    },
    "theHiveTrigger": {
      "title": "TheHive Trigger node documentation",
      "description": "On this page, you'll find a list of events the TheHive Trigger node can respond to and links to more resources.",
      "note": "n8n provides two nodes for TheHive. Use this node (TheHive Trigger) if you want to use TheHive's version 3 or 4 API. If you want to use version 5, use [TheHive 5 Trigger](/integrations/builtin/trigger-nodes/n8n-nodes-base.thehive5trigger.md).",
      "examples": "https://n8n.io/integrations/thehive-trigger/",
      "events": {
        "alert": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "case": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "log": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "observable": [
          "Created",
          "Deleted",
          "Updated"
        ],
        "task": [
          "Created",
          "Deleted",
          "Updated"
        ]
      },
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.thehive.md",
        "examples": "https://n8n.io/integrations/thehive-trigger/",
        "api_docs_v3": "https://docs.thehive-project.org/thehive/legacy/thehive3/api/",
        "api_docs_v4": "https://docs.thehive-project.org/cortex/api/api-guide/"
      },
      "configureWebhook": "To configure the webhook for your TheHive instance:\n\n1. Copy the testing and production webhook URLs from TheHive Trigger node.\n2. Add the following lines to the application.conf file. This is TheHive configuration file:\n\n\nnotification.webhook.endpoints = [\n\t\t{\n\t\t\tname: TESTING_WEBHOOK_NAME\n\t\t\turl: TESTING_WEBHOOK_URL\n\t\t\tversion: 0\n\t\t\twsConfig: {}\n\t\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\t\texcludedTheHiveOrganisations: []\n\t\t},\n\t\t{\n\t\t\tname: PRODUCTION_WEBHOOK_NAME\n\t\t\turl: PRODUCTION_WEBHOOK_URL\n\t\t\tversion: 0\n\t\t\twsConfig: {}\n\t\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\t\texcludedTheHiveOrganisations: []\n\t\t}\n\t]\n\n\n3. Replace TESTING_WEBHOOK_URL and PRODUCTION_WEBHOOK_URL with the URLs you copied in the previous step.\n4. Replace TESTING_WEBHOOK_NAME and PRODUCTION_WEBHOOK_NAME with your preferred endpoint names.\n5. Replace ORGANIZATION_NAME with your organization name.\n6. Execute the following cURL command to enable notifications:\n\nsh\n\tcurl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d '\n\t{\n\t\t\"value\": [\n\t\t\t{\n\t\t\t\"delegate\": false,\n\t\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"TESTING_WEBHOOK_NAME\" }\n\t\t\t},\n\t\t\t{\n\t\t\t\"delegate\": false,\n\t\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"PRODUCTION_WEBHOOK_NAME\" }\n\t\t\t}\n\t\t]\n\t}'"
    },
    "togglTrigger": {
      "title": "Toggl Trigger node documentation",
      "description": "Learn how to use the Toggl Trigger node in n8n. Follow technical documentation to integrate Toggl Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/toggl.md",
      "examples": "https://n8n.io/integrations/toggl-trigger/"
    },
    "trelloTrigger": {
      "title": "Trello Trigger node documentation",
      "description": "Learn how to use the Trello Trigger node in n8n. Follow technical documentation to integrate Trello Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/trello.md",
      "examples": "https://n8n.io/integrations/trello-trigger/",
      "findModelId": "The model ID is the ID of any model in Trello. Depending on the use-case, it could be the User ID, List ID, and so on.\n\nFor this specific example, the List ID would be the Model ID:\n\n1. Open the Trello board that contains the list.\n2. If the list doesn't have any cards, add a card to the list.\n3. Open the card, add .json at the end of the URL, and press enter.\n4. In the JSON file, you will see a field called idList.\n5. Copy idListand paste it in the **Model ID** field in n8n."
    },
    "twilioTrigger": {
      "title": "Twilio Trigger node documentation",
      "description": "Use the Twilio Trigger node to respond to events in [Twilio](https://www.twilio.com){:target=_blank .external-link} and integrate Twilio with other applications. n8n has built-in support for a wide range of Twilio events, including new SMS and calls.",
      "credentials": "/integrations/builtin/credentials/twilio.md",
      "examples": "https://n8n.io/integrations/twilio-trigger/",
      "events": [
        "On New SMS",
        "On New Call"
      ],
      "note": "It can take Twilio up to thirty minutes to generate a summary for a completed call.",
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.twilio.md",
        "examples": "https://n8n.io/integrations/twilio/",
        "api_docs": "https://www.twilio.com/docs"
      }
    },
    "typeFormTrigger": {
      "title": "Typeform Trigger node documentation",
      "description": "Learn how to use the Typeform Trigger node in n8n. Follow technical documentation to integrate Typeform Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/typeform.md",
      "examples": "https://n8n.io/integrations/typeform-trigger/"
    },
    "venafiTlsProtectCloudTrigger": {
      "title": "Venafi TLS Protect Cloud Trigger node documentation",
      "description": "Learn how to use the Venafi TLS Protect Cloud Trigger node in n8n. Follow technical documentation to integrate Venafi TLS Protect Cloud Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/venafitlsprotectcloud.md",
      "examples": "https://n8n.io/integrations/venafi-tls-protect-cloud-trigger/",
      "description_extended": "Use the n8n Venafi TLS Protect Cloud Trigger node to start a workflow in n8n in response to events in the [cloud-based Venafi TLS Protect](https://vaas.venafi.com/){:target=_blank} service."
    },
    "webflowTrigger": {
      "title": "Webflow Trigger node documentation",
      "description": "Learn how to use the Webflow Trigger node in n8n. Follow technical documentation to integrate Webflow Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/webflow.md",
      "examples": "https://n8n.io/integrations/webflow-trigger/"
    },
    "whatsAppTrigger": {
      "title": "WhatsApp Trigger node documentation",
      "description": "Use the WhatsApp Trigger node to respond to events in WhatsApp and integrate WhatsApp with other applications. n8n has built-in support for a wide range of WhatsApp events, including account, message, and phone number events.",
      "credentials": "/integrations/builtin/credentials/whatsapp.md",
      "examples": "https://n8n.io/integrations/whatsapp-trigger/",
      "events": [
        "Account Review Update",
        "Account Update",
        "Business Capability Update",
        "Message Template Quality Update",
        "Message Template Status Update",
        "Messages",
        "Phone Number Name Update",
        "Phone Number Quality Update",
        "Security",
        "Template Category Update"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/index.md",
        "examples": "https://n8n.io/integrations/whatsapp-trigger/",
        "api_docs": "https://developers.facebook.com/docs/whatsapp/cloud-api"
      },
      "common_issues": {
        "workflowOnlyWorksInTestingOrProduction": "WhatsApp only allows you to register a single webhook per app. This means that every time you switch from using the testing URL to the production URL (and vice versa), WhatsApp overwrites the registered webhook URL.\n\nYou may have trouble with this if you try to test a workflow that's also active in production. WhatsApp will only send events to one of the two webhook URLs, so the other will never receive event notifications.\n\nTo work around this, you can disable your workflow when testing:\n\n/// warning | Halts production traffic\nThis workaround temporarily disables your production workflow for testing. Your workflow will no longer receive production traffic while it's deactivated.\n///\n\n1. Go to your workflow page.\n2. Toggle the **Active** switch in the top panel to disable the workflow temporarily.\n3. Test your workflow using the test webhook URL.\n4. When you finish testing, toggle the **Inactive** toggle to enable the workflow again. The production webhook URL should resume working."
      }
    },
    "wiseTrigger": {
      "title": "Wise Trigger node documentation",
      "description": "Learn how to use the Wise Trigger node in n8n. Follow technical documentation to integrate Wise Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/wise.md",
      "examples": "https://n8n.io/integrations/wise-trigger/",
      "events": [
        "Triggered every time a balance account is credited",
        "Triggered every time a balance account is credited or debited",
        "Triggered every time a transfer's list of active cases is updated",
        "Triggered every time a transfer's status is updated"
      ]
    },
    "wooCommerceTrigger": {
      "title": "WooCommerce Trigger node documentation",
      "description": "Learn how to use the WooCommerce Trigger node in n8n. Follow technical documentation to integrate WooCommerce Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/woocommerce.md",
      "examples": "https://n8n.io/integrations/woocommerce-trigger/",
      "events": [
        "coupon.created",
        "coupon.updated",
        "coupon.deleted",
        "customer.created",
        "customer.updated",
        "customer.deleted",
        "order.created",
        "order.updated",
        "order.deleted",
        "product.created",
        "product.updated",
        "product.deleted"
      ]
    },
    "workableTrigger": {
      "title": "Workable Trigger node documentation",
      "description": "Use the Workable Trigger node to respond to events in the [Workable](https://www.workable.com/){:target=_blank .external-link} recruiting platform and integrate Workable with other applications. n8n has built-in support for a wide range of Workable events, including candidate created and moved.",
      "credentials": "/integrations/builtin/credentials/workable.md",
      "examples": "https://n8n.io/integrations/workable-trigger/",
      "events": [
        "Candidate Created",
        "Candidate Moved"
      ],
      "related_resources": {
        "examples": "https://n8n.io/integrations/workable-trigger/",
        "api_docs": "https://developers.workable.com/"
      }
    },
    "wufooTrigger": {
      "title": "Wufoo Trigger node documentation",
      "description": "Learn how to use the Wufoo Trigger node in n8n. Follow technical documentation to integrate Wufoo Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/wufoo.md",
      "examples": "https://n8n.io/integrations/wufoo-trigger/"
    },
    "zendeskTrigger": {
      "title": "Zendesk Trigger node documentation",
      "description": "Learn how to use the Zendesk Trigger node in n8n. Follow technical documentation to integrate Zendesk Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/zendesk.md",
      "examples": "https://n8n.io/integrations/zendesk-trigger/"
    },
    "facebookTrigger": {
      "title": "Facebook Trigger",
      "description": "Use the Facebook Trigger node to trigger a workflow when events occur in Facebook.",
      "credentials": "/integrations/builtin/credentials/facebookapp.md",
      "examples": "https://n8n.io/integrations/facebook-trigger/",
      "objects": {
        "adAccount": {
          "title": "Facebook Trigger Ad Account object documentation",
          "description": "Learn how to use the Ad Account object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Ad Account object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Ad Account** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available Ad Account events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in. Options include:\n    * **In Process Ad Objects**: Notifies you when a campaign, ad set, or ad exits the IN_PROCESS status. Refer to Meta's [Post-processing for Ad Creation and Edits](https://developers.facebook.com/docs/marketing-api/using-the-api/post-processing/){:target=_blank .external-link} for more information.\n    * **With Issues Ad Objects**: Notifies you when a campaign, ad set, or ad under the ad account receives the WITH_ISSUES status.\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_webhooks": "https://developers.facebook.com/docs/graph-api/webhooks/getting-started/webhooks-for-ad-accounts",
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/ad-account/"
          }
        },
        "application": {
          "title": "Facebook Trigger Application object documentation",
          "description": "Learn how to use the Application object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Application object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Application** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in. Options include:\n    * **Add Account**\n    * **Ads Rules Engine**\n    * **Async Requests**\n    * **Async Sessions**    \n    * **Group Install**\n    * **Oe Reseller Onboarding Request Created**\n    * **Plugin Comment**\n    * **Plugin Comment Reply**\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/application/"
          }
        },
        "certificateTransparency": {
          "title": "Facebook Trigger Certificate Transparency object documentation",
          "description": "Learn how to use the Certificate Transparency object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Certificate Transparency object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Certificate Transparency** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in. Options include:\n    * **Certificate**: Notifies you when someone issues a new certificate for your subscribed domains. You'll need to subscribe your domain for certificate alerts.\n    * **Phishing**: Notifies you when someone issues a new certificate that may be phishing one of your legitimate subscribed domains.\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.\n\nFor these alerts, you'll need to subscribe your domain to the relevant alerts:\n\n* Refer to [Certificate Alerts](https://developers.facebook.com/docs/certificate-transparency-api#certificate-alerts-subscribing){:target=_blank .external-link} for Certificate Alerts subscriptions.\n* Refer to [Phishing Alerts](https://developers.facebook.com/docs/certificate-transparency-api#phishing-alerts-subscribing){:target=_blank .external-link} for Phishing Alerts subscriptions.",
          "related_resources": {
            "api_docs_webhooks": "https://developers.facebook.com/docs/graph-api/webhooks/getting-started/webhooks-for-certificate-transparency",
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/certificate-transparency/"
          }
        },
        "group": {
          "title": "Facebook Trigger Group object documentation",
          "description": "Learn how to use the Group object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Group object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Group** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in.\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_reference": "https://developers.facebook.com/docs/workplace/reference/webhooks/#groups"
          }
        },
        "instagram": {
          "title": "Facebook Trigger Instagram object documentation",
          "description": "Learn how to use the Instagram object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Instagram object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Instagram** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in. Options include:\n    * **Comments**: Notifies you when anyone comments on an IG Media owned by your app's Instagram user.\n    * **Messaging Handover**\n    * **Mentions**: Notifies you whenever an Instagram user @mentions an Instagram Business or Creator Account in a comment or caption.\n    * **Messages**: Notifies you when anyone messages your app's Instagram user.\n    * **Messaging Seen**: Notifies you when someone sees a message sent by your app's Instagram user.\n    * **Standby**\n    * **Story Insights**: Notifies you one hour after a story expires with metrics describing interactions on a story.\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_webhooks": "https://developers.facebook.com/docs/graph-api/webhooks/getting-started/webhooks-for-instagram",
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/instagram/"
          }
        },
        "link": {
          "title": "Facebook Trigger Link object documentation",
          "description": "Learn how to use the Link object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Link object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Link** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in.\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_reference": "https://developers.facebook.com/docs/workplace/reference/webhooks/#links"
          }
        },
        "page": {
          "title": "Facebook Trigger Page object documentation",
          "description": "Learn how to use the Page object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Page object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "prerequisites": "This Object requires some configuration in your app and page before you can use the trigger:\n\n1. At least one page admin needs to grant the manage_pages permission to your app.\n2. The page admin needs to have at least moderator privileges. If they don't, they won't receive all content.\n3. You'll also need to add the app to your page, and you may need to go to the [Graph API explorer](https://developers.facebook.com/tools/explorer/){:target=_blank .external-link} and execute this call with your app token:\n\n    \n{page-id}/subscribed_apps?subscribed_fields=feed\n",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Page** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in. Options include individual profile fields, as well as:\n    * **Feed**: Describes most changes to a page's feed, including posts, likes, shares, and so on.\n    * **Leadgen**: Notifies you when a page's lead generation settings change.\n    * **Live Videos**: Notifies you when a page's live video status changes.\n    * **Mention**: Notifies you when new mentions in pages, comments, and so on occur.\n    * **Merchant Review**: Notifies you when a page's merchant review settings change.\n    * **Page Change Proposal**: Notifies you when Facebook suggests proposed changes for your Facebook Page.\n    * **Page Upcoming Change**: Notifies you about upcoming changes that will occur on your Facebook Page. Facebook has suggested these changes and they may have a deadline to accept or reject before automatically taking effect.\n    * **Product Review**: Notifies you when a page's product review settings change.\n    * **Ratings**: Notifies you when a page's ratings change, including new ratings or when a user comments on or reacts to a rating.\n    * **Videos**: Notifies you when the encoding status of a video on a page changes.\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_webhooks": "https://developers.facebook.com/docs/graph-api/webhooks/getting-started/webhooks-for-pages",
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/page/"
          }
        },
        "permissions": {
          "title": "Facebook Trigger Permissions object documentation",
          "description": "Learn how to use the Permissions object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Permissions object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Permissions** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in.\n5. In **Options**, choose whether to turn on the toggle to **Include Values**. When turned on, the node includes the new values for the changes.",
          "related_resources": {
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/permissions/"
          }
        },
        "user": {
          "title": "Facebook Trigger User object documentation",
          "description": "Learn how to use the User object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's User object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **User** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in.\n5. In **Options**, choose whether to turn on the toggle to **Include Values**. When turned on, the node includes the new values for the changes.",
          "related_resources": {
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/user/"
          }
        },
        "whatsAppBusinessAccount": {
          "title": "Facebook Trigger WhatsApp Business Account object documentation",
          "description": "Learn how to use the WhatsApp Business Account object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's WhatsApp Business Account object into your workflows.",
          "warning": "n8n recommends using the [WhatsApp Trigger node](/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger.md) with the [WhatsApp credentials](/integrations/builtin/credentials/whatsapp.md) instead of the Facebook Trigger node. That trigger node includes twice the events to subscribe to.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "prerequisites": "This Object requires some configuration in your app and WhatsApp account before you can use the trigger:\n\n1. Subscribe your app under your WhatsApp business account. You must subscribe an app owned by your business. Apps shared with your business can't receive webhook notifications.\n2. If you are working as a Solution Partner, make sure your app has completed App Review and requested the whatsapp_business_management permission.",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **WhatsApp Business Account** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in. Options include:\n    * **Message Template Status Update**\n    * **Phone Number Name Update**\n    * **Phone Number Quality Update**\n    * **Account Review Update**\n    * **Account Update**\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_webhooks": "https://developers.facebook.com/docs/graph-api/webhooks/getting-started/webhooks-for-whatsapp",
            "api_docs_reference": "https://developers.facebook.com/docs/graph-api/webhooks/reference/whatsapp-business-account/"
          }
        },
        "workplaceSecurity": {
          "title": "Facebook Trigger Workplace Security object documentation",
          "description": "Learn how to use the Workplace Security object of the Facebook Trigger node in n8n. Follow technical documentation to integrate the Facebook Trigger node's Workplace Security object into your workflows.",
          "credentials": "/integrations/builtin/credentials/facebookapp.md",
          "examples": "https://n8n.io/integrations/facebook-trigger/",
          "triggerConfiguration": "To configure the trigger with this Object:\n\n1. Select the **Credential to connect with**. Select an existing or create a new [Facebook App credential](/integrations/builtin/credentials/facebookapp.md).\n2. Enter the **APP ID** of the app connected to your credential. Refer to the [Facebook App credential](/integrations/builtin/credentials/facebookapp.md) documentation for more information.\n3. Select **Workplace Security** as the **Object**.\n4. **Field Names or IDs**: By default, the node will trigger on all the available events using the * wildcard filter. If you'd like to limit the events, use the X to remove the star and use the dropdown or an expression to select the updates you're interested in.\n5. In **Options**, turn on the toggle to **Include Values**. This Object type fails without the option enabled.",
          "related_resources": {
            "api_docs_reference": "https://developers.facebook.com/docs/workplace/reference/webhooks/#security"
          }
        }
      },
      "related_resources_main": {
        "examples": "https://n8n.io/integrations/facebook-trigger/",
        "api_docs": "https://developers.facebook.com/docs/graph-api/webhooks/reference"
      }
    },
    "gmailTrigger": {
      "title": "Gmail Trigger node documentation",
      "description": "Learn how to use the Gmail Trigger node in n8n. Follow technical documentation to integrate Gmail Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/google/index.md",
      "examples": "https://n8n.io/integrations/gmail-trigger/",
      "events": [
        "Message Received"
      ],
      "parameters": {
        "credentialToConnectWith": "Select or create a new Google credential to use for the trigger. Refer to [Google credentials](/integrations/builtin/credentials/google/index.md) for more information on setting up a new credential.",
        "pollTimes": "Select a poll **Mode** to set how often to trigger the poll. Your **Mode** selection will add or remove relevant fields. Refer to [Poll Mode options](/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger/poll-mode-options.md) to configure the parameters for each mode type.",
        "simplify": "Choose whether to return a simplified version of the response (turned on, default) or the raw data (turned off).\n    * The simplified version returns email message IDs, labels, and email headers, including: From, To, CC, BCC, and Subject."
      },
      "nodeFilters": {
        "includeSpamAndTrash": "Select whether the node should trigger on new messages in the Spam and Trash folders (turned on) or not (turned off).",
        "labelNamesOrIds": "Only trigger on messages with the selected labels added to them. Select the Label names you want to apply or enter an expression to specify IDs. The dropdown populates based on the **Credential** you selected.",
        "search": "Enter Gmail search refine filters, like from:, to trigger the node on the filtered conditions only. Refer to [Refine searches in Gmail](https://support.google.com/mail/answer/7190?hl=en){:target=_blank .external-link} for more information.",
        "readStatus": "Choose whether to receive **Unread and read emails**, **Unread emails only** (default), or **Read emails only**.",
        "sender": "Enter an email or a part of a sender name to trigger only on messages from that sender."
      },
      "related_resources": {
        "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.gmail/index.md",
        "examples": "https://n8n.io/integrations/gmail-trigger/",
        "api_docs": "https://developers.google.com/gmail/api/guides"
      },
      "common_issues": "/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger/common-issues.md",
      "pollModeOptions": "/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger/poll-mode-options.md"
    },
    "googleDriveTrigger": {
      "title": "Google Drive Trigger node documentation",
      "description": "Learn how to use the Google Drive Trigger node in n8n. Follow technical documentation to integrate Google Drive Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/google/index.md",
      "examples": "https://n8n.io/integrations/google-drive-trigger/",
      "note": "On manual executions this node will return the last event matching its search criteria. If no event matches the criteria (for example because you are watching for files to be created but no files have been created so far), an error is thrown. Once saved and activated, the node will regularly check for any matching events and will trigger your workflow for each event found.",
      "common_issues": "/integrations/builtin/trigger-nodes/n8n-nodes-base.googledrivetrigger/common-issues.md"
    },
    "googleSheetsTrigger": {
      "title": "Google Sheets Trigger node documentation",
      "description": "Learn how to use the Google Sheets Trigger node in n8n. Follow technical documentation to integrate Google Sheets Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/google/index.md",
      "examples": "https://n8n.io/integrations/google-sheets-trigger/",
      "events": [
        "Row added",
        "Row updated",
        "Row added or updated"
      ],
      "related_resources": {
        "api_docs": "https://developers.google.com/sheets/api"
      },
      "app_node": "/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets/index.md",
      "common_issues": "/integrations/builtin/trigger-nodes/n8n-nodes-base.googlesheetstrigger/common-issues.md"
    },
    "telegramTrigger": {
      "title": "Telegram Trigger node documentation",
      "description": "Learn how to use the Telegram Trigger node in n8n. Follow technical documentation to integrate Telegram Trigger node into your workflows.",
      "credentials": "/integrations/builtin/credentials/telegram.md",
      "examples": "https://n8n.io/integrations/telegram-trigger/",
      "events": [
        "*****",
        "Business Connection",
        "Business Message",
        "Callback Query",
        "Channel Post",
        "Chat Boost",
        "Chat Join Request",
        "Chat Member",
        "Chosen Inline Result",
        "Deleted Business Messages",
        "Edited Business Message",
        "Edited Channel Post",
        "Edited Message",
        "Inline Query",
        "Message",
        "Message Reaction",
        "Message Reaction Count",
        "My Chat Member",
        "Poll",
        "Poll Answer",
        "Pre-Checkout Query",
        "Purchased Paid Media",
        "Removed Chat Boost",
        "Shipping Query"
      ],
      "related_resources": {
        "app_node": "/integrations/builtin/credentials/telegram.md",
        "examples": "https://n8n.io/integrations/telegram-trigger/",
        "api_docs": "https://core.telegram.org/bots/api"
      },
      "common_issues": "/integrations/builtin/trigger-nodes/n8n-nodes-base.telegramtrigger/common-issues.md"
    }
  }


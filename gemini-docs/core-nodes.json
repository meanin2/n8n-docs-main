{
  "core-nodes": {
    "index": {
      "contentType": "overview",
      "title": "Core nodes library",
      "description": "This section provides information about n8n's core nodes."
    },
    "n8n-nodes-base.activationtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "Activation Trigger node",
      "description": "The Activation Trigger node gets triggered when an event gets fired by n8n or a workflow.",
      "deprecated": true,
      "warning": "n8n has deprecated the Activation Trigger node and replaced it with two new nodes: the [n8n Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.n8ntrigger.md) and the [Workflow Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.workflowtrigger.md). For more details, check out the entry in the [breaking changes](https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#01170) page.",
      "note": "If you want to use the Activation Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow.",
      "parameters": {
        "Events": {
          "type": "select",
          "options": [
            "Activation",
            "Start",
            "Update"
          ],
          "description": "Events to trigger on",
          "details": {
            "Activation": "Run when the workflow gets activated",
            "Start": "Run when n8n starts or restarts",
            "Update": "Run when the workflow gets saved while it's active"
          }
        }
      }
    },
    "n8n-nodes-base.aggregate": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Aggregate",
      "description": "Use the Aggregate node to take separate items, or portions of them, and group them together into individual items.",
      "parameters": {
        "Aggregate": {
          "type": "select",
          "options": [
            "Individual Fields",
            "All Item Data"
          ],
          "description": "Aggregation type"
        },
        "Individual Fields": {
          "parameters": {
            "Input Field Name": {
              "type": "string",
              "description": "Name of the field in the input data to aggregate"
            },
            "Rename Field": {
              "type": "boolean",
              "description": "Toggle to rename the field in the aggregated output",
              "parameters": {
                "Output Field Name": {
                  "type": "string",
                  "description": "Field name for the aggregated output data"
                }
              }
            }
          }
        },
        "All Item Data": {
          "parameters": {
            "Put Output in Field": {
              "type": "string",
              "description": "Name of the field to output the data in"
            },
            "Include": {
              "type": "select",
              "options": [
                "All fields",
                "Specified Fields",
                "All Fields Except"
              ],
              "description": "Fields to include in output",
              "details": {
                "Specified Fields": {
                  "parameters": {
                    "Fields To Include": {
                      "type": "string",
                      "description": "Comma-separated list of fields to include"
                    }
                  }
                },
                "All Fields Except": {
                  "parameters": {
                    "Fields To Exclude": {
                      "type": "string",
                      "description": "Comma-separated list of fields to exclude"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "options": {
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disallow referencing child fields using parent.child (Individual Fields Aggregate only)"
        },
        "Merge Lists": {
          "type": "boolean",
          "description": "Output a single flat list rather than a list of lists (Individual Fields Aggregate only)"
        },
        "Include Binaries": {
          "type": "boolean",
          "description": "Include binary data from the input in the new output"
        },
        "Keep Missing And Null Values": {
          "type": "boolean",
          "description": "Add a null entry in the output list for null/missing input values (Individual Fields Aggregate only)"
        }
      }
    },
    "n8n-nodes-base.aitransform": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "AI Transform",
      "description": "Use the AI Transform node to generate code snippets based on your prompt. The AI is context-aware, understanding the workflowâ€™s nodes and their data types.",
      "featureAvailability": "Available only on Cloud plans.",
      "parameters": {
        "Instructions": {
          "type": "string",
          "description": "Prompt for the AI (max 500 characters)"
        },
        "Transformation Code": {
          "type": "code",
          "description": "Generated code snippet (read-only)"
        }
      }
    },
    "n8n-nodes-base.comparedatasets": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Compare Datasets",
      "description": "The Compare Datasets node helps you compare data from two input streams.",
      "parameters": {
        "Input A Field": {
          "type": "string",
          "description": "Field from input stream A to compare"
        },
        "Input B Field": {
          "type": "string",
          "description": "Field from input stream B to compare"
        },
        "Add Fields to Match": {
          "type": "repeatable",
          "description": "Add more fields to compare",
          "template": {
            "Input A Field": {
              "type": "string",
              "description": "Field from input stream A to compare"
            },
            "Input B Field": {
              "type": "string",
              "description": "Field from input stream B to compare"
            }
          }
        },
        "When There Are Differences": {
          "type": "select",
          "options": [
            "Use Input A Version",
            "Use Input B Version",
            "Use a Mix of Versions",
            "Include Both Versions"
          ],
          "description": "How to handle differences between datasets",
          "details": {
            "Use a Mix of Versions": {
              "parameters": {
                "Prefer": {
                  "type": "select",
                  "options": [
                    "Input A Version",
                    "Input B Version"
                  ],
                  "description": "Main source of truth"
                },
                "For Everything Except": {
                  "type": "string",
                  "description": "Comma-separated list of input fields to pull from the other input source"
                }
              }
            }
          }
        },
        "Fuzzy Compare": {
          "type": "boolean",
          "description": "Tolerate small type differences when comparing fields"
        }
      },
      "options": {
        "Fields to Skip Comparing": {
          "type": "string",
          "description": "Comma-separated list of field names to ignore in comparison"
        },
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disallow referencing child fields using parent.child"
        },
        "Multiple Matches": {
          "type": "select",
          "options": [
            "Include All Matches",
            "Include First Match Only"
          ],
          "description": "How to handle duplicate data"
        }
      },
      "output": {
        "In A only Branch": "Data only in input A",
        "Same Branch": "Data same in both inputs",
        "Different Branch": "Data different between inputs",
        "In B only Branch": "Data only in input B"
      }
    },
    "n8n-nodes-base.compression": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Compression",
      "description": "Use the Compression node to compress and decompress files. Supports Zip and Gzip formats.",
      "parameters": {
        "Operation": {
          "type": "select",
          "options": [
            "Compress",
            "Decompress"
          ],
          "description": "Operation to perform"
        },
        "Compress": {
          "parameters": {
            "Input Binary Field(s)": {
              "type": "string",
              "description": "Comma-separated list of binary fields to compress"
            },
            "Output Format": {
              "type": "select",
              "options": [
                "Zip",
                "Gzip"
              ],
              "description": "Format of the compressed output"
            },
            "File Name": {
              "type": "string",
              "description": "Name of the zip file"
            },
            "Put Output File in Field": {
              "type": "string",
              "description": "Field in the output data to contain the file"
            }
          }
        },
        "Decompress": {
          "parameters": {
            "Put Output File in Field": {
              "type": "string",
              "description": "Comma-separated list of binary fields to decompress"
            },
            "Output Prefix": {
              "type": "string",
              "description": "Prefix to add to the output file name"
            }
          }
        }
      }
    },
    "n8n-nodes-base.converttofile": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Convert to File",
      "description": "Use the Convert to File node to take input data and output it as a file. This converts the input JSON data into a binary format.",
      "note": "To extract data from a file and convert it to JSON, use the [Extract from File](/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile.md) node.",
      "operations": [
        "Convert to CSV",
        "Convert to HTML",
        "Convert to ICS",
        "Convert to JSON",
        "Convert to ODS",
        "Convert to RTF",
        "Convert to Text File",
        "Convert to XLS",
        "Convert to XLSX",
        "Move Base64 String to File"
      ],
      "Convert to CSV": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          }
        }
      },
      "Convert to HTML": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          }
        }
      },
      "Convert to ICS": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          },
          "Event Title": {
            "type": "string",
            "description": "Title for the event"
          },
          "Start": {
            "type": "datetime",
            "description": "Date and time event will start"
          },
          "End": {
            "type": "datetime",
            "description": "Date and time event will end (uses start date if unset)"
          },
          "All Day": {
            "type": "boolean",
            "description": "Event is all day event"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Attendees": {
            "type": "repeatable",
            "description": "Add attendees to the event",
            "template": {
              "Name": {
                "type": "string",
                "description": "Attendee name"
              },
              "Email": {
                "type": "email",
                "description": "Attendee email"
              },
              "RSVP": {
                "type": "boolean",
                "description": "Attendee needs to confirm attendance"
              }
            }
          },
          "Busy Status": {
            "type": "select",
            "options": [
              "Busy",
              "Tentative"
            ],
            "description": "Busy status for Microsoft applications"
          },
          "Calendar Name": {
            "type": "string",
            "description": "Calendar name for Apple and Microsoft calendars"
          },
          "Description": {
            "type": "string",
            "description": "Event description"
          },
          "Geolocation": {
            "type": "group",
            "description": "Event's location geolocation",
            "parameters": {
              "Latitude": {
                "type": "number",
                "description": "Latitude"
              },
              "Longitude": {
                "type": "number",
                "description": "Longitude"
              }
            }
          },
          "Location": {
            "type": "string",
            "description": "Event's intended venue/location"
          },
          "Recurrence Rule": {
            "type": "string",
            "description": "Rule to define the repeat pattern of the event (RRULE)"
          },
          "Organizer": {
            "type": "group",
            "description": "Event organizer",
            "parameters": {
              "Name": {
                "type": "string",
                "description": "Organizer name"
              },
              "Email": {
                "type": "email",
                "description": "Organizer email"
              }
            }
          },
          "Sequence": {
            "type": "number",
            "description": "Revision sequence number for event updates"
          },
          "Status": {
            "type": "select",
            "options": [
              "Confirmed",
              "Cancelled",
              "Tentative"
            ],
            "description": "Status of the event"
          },
          "UID": {
            "type": "string",
            "description": "Universally unique ID (UID) for the event (auto-generated if empty)"
          },
          "URL": {
            "type": "string",
            "description": "URL associated with the event"
          },
          "Use Workflow Timezone": {
            "type": "boolean",
            "description": "Use workflow timezone instead of UTC"
          }
        }
      },
      "Convert to JSON": {
        "parameters": {
          "Mode": {
            "type": "select",
            "options": [
              "All Items to One File",
              "Each Item to Separate File"
            ],
            "description": "Output mode"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Format": {
            "type": "boolean",
            "description": "Format JSON for easier reading"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "utf8"
            ],
            "description": "Character set to use to encode the data",
            "default": "utf8"
          }
        }
      },
      "Convert to ODS": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Compression": {
            "type": "boolean",
            "description": "Compress and reduce file size"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          },
          "Sheet Name": {
            "type": "string",
            "description": "Sheet Name to create in the spreadsheet"
          }
        }
      },
      "Convert to RTF": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          }
        }
      },
      "Convert to Text File": {
        "parameters": {
          "Text Input Field": {
            "type": "string",
            "description": "Field containing string to convert to file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "utf8"
            ],
            "description": "Character set to use to encode the data",
            "default": "utf8"
          }
        }
      },
      "Convert to XLS": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          },
          "Sheet Name": {
            "type": "string",
            "description": "Sheet Name to create in the spreadsheet"
          }
        }
      },
      "Convert to XLSX": {
        "parameters": {
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "Compression": {
            "type": "boolean",
            "description": "Compress and reduce file size"
          },
          "Header Row": {
            "type": "boolean",
            "description": "First row contains header names"
          },
          "Sheet Name": {
            "type": "string",
            "description": "Sheet Name to create in the spreadsheet"
          }
        }
      },
      "Move Base64 String to File": {
        "parameters": {
          "Base64 Input Field": {
            "type": "string",
            "description": "Field containing Base64 string to convert to file"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "File name for the generated output file"
          },
          "MIME Type": {
            "type": "string",
            "description": "MIME type of the output file"
          }
        }
      }
    },
    "n8n-nodes-base.crypto": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Crypto",
      "description": "Use the Crypto node to encrypt data in workflows.",
      "actions": [
        "Generate",
        "Hash",
        "Hmac",
        "Sign"
      ],
      "Generate": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Property to write the random string to"
          },
          "Type": {
            "type": "select",
            "options": [
              "ASCII",
              "BASE64",
              "HEX",
              "UUID"
            ],
            "description": "Encoding type to use"
          }
        }
      },
      "Hash": {
        "parameters": {
          "Type": {
            "type": "select",
            "options": [
              "MD5",
              "SHA256",
              "SHA3-256",
              "SHA3-384",
              "SHA3-512",
              "SHA385",
              "SHA512"
            ],
            "description": "Hash type to use"
          },
          "Binary File": {
            "type": "boolean",
            "description": "Data to hash is from a binary file",
            "parameters": {
              "Binary Property Name": {
                "type": "string",
                "description": "Binary property containing data to hash"
              }
            },
            "alternativeParameters": {
              "Value": {
                "type": "string",
                "description": "Value to hash"
              }
            }
          },
          "Property Name": {
            "type": "string",
            "description": "Property to write the hash to"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "BASE64",
              "HEX"
            ],
            "description": "Encoding type to use"
          }
        }
      },
      "Hmac": {
        "parameters": {
          "Binary File": {
            "type": "boolean",
            "description": "Data to encrypt is from a binary file",
            "parameters": {
              "Binary Property Name": {
                "type": "string",
                "description": "Binary property containing data to encrypt"
              }
            },
            "alternativeParameters": {
              "Value": {
                "type": "string",
                "description": "Value to encrypt"
              }
            }
          },
          "Type": {
            "type": "select",
            "options": [
              "MD5",
              "SHA256",
              "SHA3-256",
              "SHA3-384",
              "SHA3-512",
              "SHA385",
              "SHA512"
            ],
            "description": "Encryption type to use"
          },
          "Property Name": {
            "type": "string",
            "description": "Property to write the hash to"
          },
          "Secret": {
            "type": "string",
            "description": "Secret or secret key used for decoding"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "BASE64",
              "HEX"
            ],
            "description": "Encoding type to use"
          }
        }
      },
      "Sign": {
        "parameters": {
          "Value": {
            "type": "string",
            "description": "Value to sign"
          },
          "Property Name": {
            "type": "string",
            "description": "Property to write the signed value to"
          },
          "Algorithm Name or ID": {
            "type": "string",
            "description": "Algorithm name or ID"
          },
          "Encoding": {
            "type": "select",
            "options": [
              "BASE64",
              "HEX"
            ],
            "description": "Encoding type to use"
          },
          "Private Key": {
            "type": "string",
            "description": "Private key to use when signing"
          }
        }
      }
    },
    "n8n-nodes-base.datetime": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Date & Time",
      "description": "The Date & Time node manipulates date and time data and convert it to different formats.",
      "note": "You can work with data and time in the Code node, and in expressions in any node. n8n supports Luxon to help work with date and time in JavaScript. Refer to [Date and time with Luxon](/code/cookbook/luxon.md) for more information.",
      "operations": [
        "Add to a Date",
        "Extract Part of a Date",
        "Format a Date",
        "Get Current Date",
        "Get Time Between Dates",
        "Round a Date",
        "Subtract From a Date"
      ],
      "Add to a Date": {
        "parameters": {
          "Date to Add To": {
            "type": "datetime",
            "description": "Date to change"
          },
          "Time Unit to Add": {
            "type": "select",
            "options": [
              "years",
              "months",
              "weeks",
              "days",
              "hours",
              "minutes",
              "seconds"
            ],
            "description": "Time unit for the duration"
          },
          "Duration": {
            "type": "number",
            "description": "Number of time units to add"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the new date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      },
      "Extract Part of a Date": {
        "parameters": {
          "Date": {
            "type": "datetime",
            "description": "Date to extract part of"
          },
          "Part": {
            "type": "select",
            "options": [
              "Year",
              "Month",
              "Week",
              "Day",
              "Hour",
              "Minute",
              "Second"
            ],
            "description": "Part of the date to extract"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the extracted date part to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      },
      "Format a Date": {
        "parameters": {
          "Date": {
            "type": "datetime",
            "description": "Date to format"
          },
          "Format": {
            "type": "select",
            "options": [
              "Custom Format",
              "MM/DD/YYYY",
              "YYYY/MM/DD",
              "MMMM DD YYYY",
              "MM-DD-YYYY",
              "YYYY-MM-DD"
            ],
            "description": "Format to change the date to",
            "details": {
              "Custom Format": {
                "parameters": {
                  "Custom Format Expression": {
                    "type": "string",
                    "description": "Custom format using Luxon's special tokens"
                  }
                }
              }
            }
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the formatted date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          },
          "From Date Format": {
            "type": "string",
            "description": "Format of the input date (Luxon tokens)"
          },
          "Use Workflow Timezone": {
            "type": "boolean",
            "description": "Use workflow timezone instead of input's timezone"
          }
        }
      },
      "Get Current Date": {
        "parameters": {
          "Include Current Time": {
            "type": "boolean",
            "description": "Include current time or set time to midnight"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the current date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          },
          "Timezone": {
            "type": "timezone",
            "description": "Timezone to use (defaults to n8n instance's timezone)"
          }
        }
      },
      "Get Time Between Dates": {
        "parameters": {
          "Start Date": {
            "type": "datetime",
            "description": "Earlier date to compare"
          },
          "End Date": {
            "type": "datetime",
            "description": "Later date to compare"
          },
          "Units": {
            "type": "multiOptions",
            "options": [
              "Year",
              "Month",
              "Week",
              "Day",
              "Hour",
              "Minute",
              "Second",
              "Millisecond"
            ],
            "description": "Units to calculate time between"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the calculated time between to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          },
          "Output as ISO String": {
            "type": "boolean",
            "description": "Format output as a single ISO duration string"
          }
        }
      },
      "Round a Date": {
        "parameters": {
          "Date": {
            "type": "datetime",
            "description": "Date to round"
          },
          "Mode": {
            "type": "select",
            "options": [
              "Round Down",
              "Round Up"
            ],
            "description": "Rounding mode"
          },
          "To Nearest": {
            "type": "select",
            "options": [
              "Year",
              "Month",
              "Week",
              "Day",
              "Hour",
              "Minute",
              "Second"
            ],
            "description": "Unit to round to"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the rounded date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      },
      "Subtract From a Date": {
        "parameters": {
          "Date to Subtract From": {
            "type": "datetime",
            "description": "Date to subtract from"
          },
          "Time Unit to Subtract": {
            "type": "select",
            "options": [
              "years",
              "months",
              "weeks",
              "days",
              "hours",
              "minutes",
              "seconds"
            ],
            "description": "Time unit for the duration"
          },
          "Duration": {
            "type": "number",
            "description": "Amount of time units to subtract"
          },
          "Output Field Name": {
            "type": "string",
            "description": "Field to output the rounded date to"
          }
        },
        "options": {
          "Include Input Fields": {
            "type": "boolean",
            "description": "Include all input fields in the output"
          }
        }
      }
    },
    "n8n-nodes-base.debughelper": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Debug Helper",
      "description": "Use the Debug Helper node to trigger different error types or generate random datasets to help test n8n workflows.",
      "operations": [
        "Do Nothing",
        "Throw Error",
        "Out Of Memory",
        "Generate Random Data"
      ],
      "Throw Error": {
        "parameters": {
          "Error Type": {
            "type": "select",
            "options": [
              "NodeApiError",
              "NodeOperationError",
              "Error"
            ],
            "description": "Type of error to throw"
          },
          "Error Message": {
            "type": "string",
            "description": "Error message to throw"
          }
        }
      },
      "Out Of Memory": {
        "parameters": {
          "Memory Size to Generate": {
            "type": "string",
            "description": "Approximate amount of memory to generate"
          }
        }
      },
      "Generate Random Data": {
        "parameters": {
          "Data Type": {
            "type": "select",
            "options": [
              "Address",
              "Coordinates",
              "Credit Card",
              "Email",
              "IPv4",
              "IPv6",
              "MAC",
              "Nanoids",
              "URL",
              "User Data",
              "UUID",
              "Version"
            ],
            "description": "Type of random data to generate",
            "details": {
              "Nanoids": {
                "parameters": {
                  "Nanoid Alphabet": {
                    "type": "string",
                    "description": "Alphabet the generator will use"
                  },
                  "Nanoid Length": {
                    "type": "number",
                    "description": "Length of each nanoid"
                  }
                }
              }
            }
          },
          "Seed": {
            "type": "string",
            "description": "Specific seed for data generation (leave empty for random)"
          },
          "Number of Items to Generate": {
            "type": "number",
            "description": "Number of random items to generate"
          },
          "Output as Single Array": {
            "type": "boolean",
            "description": "Generate data as a single array"
          }
        }
      }
    },
    "n8n-nodes-base.editimage": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Edit Image",
      "description": "Use the Edit Image node to manipulate and edit images.",
      "note": "1. If you aren't running n8n on Docker, you need to install [GraphicsMagick](http://www.graphicsmagick.org/README.html){:target=_blank .external-link}.\n2. You need to use a node such as the [Read/Write Files from Disk](/integrations/builtin/core-nodes/n8n-nodes-base.readwritefile.md) node or the [HTTP Request](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) node to pass the image file as a data property to the Edit Image node.",
      "operations": [
        "Blur",
        "Border",
        "Composite",
        "Create",
        "Crop",
        "Draw",
        "Get Information",
        "Multi Step",
        "Resize",
        "Rotate",
        "Shear",
        "Text",
        "Transparent"
      ],
      "Blur": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Blur": {
            "type": "number",
            "description": "Blur strength (0-1000)"
          },
          "Sigma": {
            "type": "number",
            "description": "Stigma for the blur (0-1000)"
          }
        }
      },
      "Border": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Border Width": {
            "type": "number",
            "description": "Width of the border"
          },
          "Border Height": {
            "type": "number",
            "description": "Height of the border"
          },
          "Border Color": {
            "type": "color",
            "description": "Color for the border"
          }
        }
      },
      "Composite": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing base image data"
          },
          "Composite Image Property": {
            "type": "string",
            "description": "Binary property storing image to composite"
          },
          "Operator": {
            "type": "select",
            "options": [
              "Add",
              "Atop",
              "Bumpmap",
              "Copy",
              "Copy Black",
              "Copy Blue",
              "Copy Cyan",
              "Copy Green",
              "Copy Magenta",
              "Copy Opacity",
              "Copy Red",
              "Copy Yellow",
              "Difference",
              "Divide",
              "In",
              "Minus",
              "Multiply",
              "Out",
              "Over",
              "Plus",
              "Subtract",
              "Xor"
            ],
            "description": "Composite operator"
          },
          "Position X": {
            "type": "number",
            "description": "X axis position of composite image (horizontal)"
          },
          "Position Y": {
            "type": "number",
            "description": "Y axis position of composite image (vertical)"
          }
        }
      },
      "Create": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property to store created image data"
          },
          "Background Color": {
            "type": "color",
            "description": "Background color for the image"
          },
          "Image Width": {
            "type": "number",
            "description": "Width of the image"
          },
          "Image Height": {
            "type": "number",
            "description": "Height of the image"
          }
        }
      },
      "Crop": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Width": {
            "type": "number",
            "description": "Width to crop to"
          },
          "Height": {
            "type": "number",
            "description": "Height to crop to"
          },
          "Position X": {
            "type": "number",
            "description": "X axis position to start crop from (horizontal)"
          },
          "Position Y": {
            "type": "number",
            "description": "Y axis position to start crop from (vertical)"
          }
        }
      },
      "Draw": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Primitive": {
            "type": "select",
            "options": [
              "Circle",
              "Line",
              "Rectangle"
            ],
            "description": "Primitive shape to draw"
          },
          "Color": {
            "type": "color",
            "description": "Color for the primitive"
          },
          "Start Position X": {
            "type": "number",
            "description": "X axis start position (horizontal)"
          },
          "Start Position Y": {
            "type": "number",
            "description": "Y axis start position (vertical)"
          },
          "End Position X": {
            "type": "number",
            "description": "X axis end position (horizontal)"
          },
          "End Position Y": {
            "type": "number",
            "description": "Y axis end position (vertical)"
          },
          "Corner Radius": {
            "type": "number",
            "description": "Corner radius for rounded corners"
          }
        }
      },
      "Get Information": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          }
        }
      },
      "Multi Step": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Operations": {
            "type": "repeatable",
            "description": "Operations to perform in multi step",
            "template": {
              "operation": {
                "type": "nodeOperation",
                "nodeType": "n8n-nodes-base.editimage"
              }
            }
          }
        }
      },
      "Resize": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Width": {
            "type": "number",
            "description": "New width for the image"
          },
          "Height": {
            "type": "number",
            "description": "New height for the image"
          },
          "Option": {
            "type": "select",
            "options": [
              "Ignore Aspect Ratio",
              "Maximum Area",
              "Minimum Area",
              "Only if Larger",
              "Only if Smaller",
              "Percent"
            ],
            "description": "Resize option"
          }
        }
      },
      "Rotate": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Rotate": {
            "type": "number",
            "description": "Degrees to rotate (-360 to 360)"
          },
          "Background Color": {
            "type": "color",
            "description": "Background color for rotation"
          }
        }
      },
      "Shear": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Degrees X": {
            "type": "number",
            "description": "Degrees to shear from x axis"
          },
          "Degrees Y": {
            "type": "number",
            "description": "Degrees to shear from y axis"
          }
        }
      },
      "Text": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Text": {
            "type": "string",
            "description": "Text to write on the image"
          },
          "Font Size": {
            "type": "select",
            "options": [
              "8",
              "10",
              "12",
              "14",
              "16",
              "18",
              "20",
              "24",
              "32",
              "48",
              "64",
              "72",
              "96",
              "144",
              "288"
            ],
            "description": "Font size for the text"
          },
          "Font Color": {
            "type": "color",
            "description": "Font color"
          },
          "Position X": {
            "type": "number",
            "description": "X axis position to begin text at (horizontal)"
          },
          "Position Y": {
            "type": "number",
            "description": "Y axis position to begin text at (vertical)"
          },
          "Max Line Length": {
            "type": "number",
            "description": "Maximum characters in a line before line break"
          }
        }
      },
      "Transparent": {
        "parameters": {
          "Property Name": {
            "type": "string",
            "description": "Binary property storing image data"
          },
          "Color": {
            "type": "color",
            "description": "Color to make transparent"
          }
        }
      },
      "options": {
        "File Name": {
          "type": "string",
          "description": "Filename of the output file"
        },
        "Format": {
          "type": "select",
          "options": [
            "bmp",
            "gif",
            "jpeg",
            "png",
            "tiff",
            "WebP"
          ],
          "description": "Image format of the output file"
        },
        "Font Name or ID": {
          "type": "string",
          "description": "Text font"
        }
      }
    },
    "n8n-nodes-base.emailimap": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Email Trigger (IMAP) node",
      "description": "Use the IMAP Email node to receive emails using an IMAP email server. This node is a trigger node.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/imap/index.md).",
      "operations": [
        "Receive an email"
      ],
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "imap",
          "description": "IMAP credential to connect with"
        },
        "Mailbox Name": {
          "type": "string",
          "description": "Mailbox to receive emails from"
        },
        "Action": {
          "type": "select",
          "options": [
            "None",
            "Mark as Read"
          ],
          "description": "Action after receiving email"
        },
        "Download Attachments": {
          "type": "boolean",
          "description": "Download email attachments"
        },
        "Format": {
          "type": "select",
          "options": [
            "RAW",
            "Resolved",
            "Simple"
          ],
          "description": "Format to return the message in"
        }
      },
      "options": {
        "Custom Email Rules": {
          "type": "string",
          "description": "Custom email fetching rules (node-imap search criteria)"
        },
        "Force Reconnect Every Minutes": {
          "type": "number",
          "description": "Interval in minutes to force reconnection"
        }
      }
    },
    "n8n-nodes-base.errortrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Error Trigger node",
      "description": "You can use the Error Trigger node to create error workflows. When another linked workflow fails, this node gets details about the failed workflow and the errors, and runs the error workflow.",
      "usage": "If a workflow uses the Error Trigger node, you don't have to activate the workflow.\nIf a workflow contains the Error Trigger node, by default, the workflow uses itself as the error workflow.\nYou can't test error workflows when running workflows manually. The Error Trigger only runs when an automatic workflow errors.",
      "relatedResources": "You can use the [Stop And Error](/integrations/builtin/core-nodes/n8n-nodes-base.stopanderror.md) node to send custom messages to the Error Trigger.\nRead more about [Error workflows](/flow-logic/error-handling.md) in n8n workflows.",
      "errorData": "The Error Trigger node outputs the following data from the workflow that errored:\n\n*   `workflowId`: The ID of the workflow that errored.\n*   `workflowName`: The name of the workflow that errored.\n*   `executionId`: The ID of the execution that errored.\n*   `error`: The error message and stacktrace."
    },
    "n8n-nodes-base.executeworkflow": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Execute Sub-workflow",
      "description": "Use the Execute Sub-workflow node to run a different workflow on the host machine that runs n8n.",
      "parameters": {
        "Source": {
          "type": "select",
          "options": [
            "Database",
            "Local File",
            "Parameter",
            "URL"
          ],
          "description": "Source of the sub-workflow information",
          "details": {
            "Database": {
              "parameters": {
                "From list": {
                  "type": "selectWorkflow",
                  "description": "Select workflow from list"
                },
                "Workflow ID": {
                  "type": "string",
                  "description": "Enter Workflow ID"
                }
              }
            },
            "Local File": {
              "parameters": {
                "Workflow Path": {
                  "type": "string",
                  "description": "Path to the local JSON workflow file"
                }
              }
            },
            "Parameter": {
              "parameters": {
                "Workflow JSON": {
                  "type": "json",
                  "description": "JSON code of the workflow to execute"
                }
              }
            },
            "URL": {
              "parameters": {
                "Workflow URL": {
                  "type": "string",
                  "description": "URL to load the workflow from"
                }
              }
            }
          }
        },
        "Workflow Inputs": {
          "type": "workflowInputs",
          "description": "Input items of the sub-workflow (auto-populated from selected workflow)"
        },
        "Mode": {
          "type": "select",
          "options": [
            "Run once with all items",
            "Run once for each item"
          ],
          "description": "Execution mode for the node"
        }
      },
      "options": {
        "Wait for Sub-Workflow Completion": {
          "type": "boolean",
          "description": "Wait for sub-workflow to complete before continuing"
        }
      }
    },
    "n8n-nodes-base.executeworkflowtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Execute Sub-workflow Trigger node",
      "description": "Use this node to start a workflow in response to another workflow. It should be the first node in the workflow.",
      "usage": "This node runs in response to a call from the [Execute Workflow](/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow.md) node.",
      "templatesAndExamples": "<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'execute-workflow-trigger') ]]",
      "dataPassage": "<!-- --8<-- \"_snippets/flow-logic/subworkflow-data-flow.md\" -->"
    },
    "n8n-nodes-base.executiondata": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Execution Data",
      "description": "Use this node to save metadata for workflow executions. You can then search by this data in the **Executions** list.",
      "featureAvailability": "Available on Pro and Enterprise plans.",
      "operations": [
        "Save Execution Data for Search"
      ],
      "parameters": {
        "Data to Save": {
          "type": "repeatable",
          "description": "Add metadata key/value pairs to save",
          "template": {
            "Saved Field": {
              "type": "keyValuePair",
              "keys": {},
              "values": {}
            }
          }
        }
      },
      "limitations": {
        "key": "limited to 50 characters",
        "value": "limited to 512 characters"
      }
    },
    "n8n-nodes-base.extractfromfile": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Extract From File",
      "description": "A common pattern in n8n workflows is to receive a file, either from and [HTTP Request node][] (for files you are fetching from a website), a [Webhook Node][] (for files which are sent to your workflow from elsewhere), or from a local source. Data obtained in this way is often in a binary format, for example a spreadsheet or PDF.\n\nThe Extract From File node extracts data from a binary format file and converts it to JSON, which can then be easily manipulated by the rest of your workflow. For converting JSON back into a binary file type, please see the [Convert to File](/integrations/builtin/core-nodes/n8n-nodes-base.converttofile.md) node.",
      "operations": [
        "Extract From CSV",
        "Extract From HTML",
        "Extract From JSON",
        "Extract From ICS",
        "Extract From ODS",
        "Extract From PDF",
        "Extract From RTF",
        "Extract From Text File",
        "Extract From XLS",
        "Extract From XLSX",
        "Move File to Base64 String"
      ],
      "parameters": {
        "Input Binary Field": {
          "type": "string",
          "description": "Field from the node input data that contains the binary file",
          "default": "data"
        },
        "Destination Output Field": {
          "type": "string",
          "description": "Field in the node output that will contain the extracted data",
          "operations": [
            "Extract From JSON",
            "Extract From ICS",
            "Extract From Text File",
            "Move File to Base64 String"
          ]
        }
      }
    },
    "n8n-nodes-base.filter": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Filter",
      "description": "Filter items based on a condition. If the item meets the condition, the Filter node passes it on to the next node in the Filter node output. If the item doesn't meet the condition, the Filter node omits the item from its output.",
      "parameters": {
        "Conditions": {
          "type": "group",
          "description": "Filter comparison conditions",
          "repeatable": true,
          "template": {
            "DataType": {
              "type": "selectDataType",
              "description": "Data type and comparison operation type"
            }
          }
        },
        "Condition Combination": {
          "type": "select",
          "options": [
            "AND",
            "OR"
          ],
          "description": "Combine multiple conditions"
        }
      },
      "options": {
        "Ignore Case": {
          "type": "boolean",
          "description": "Ignore letter case in comparison"
        },
        "Less Strict Type Validation": {
          "type": "boolean",
          "description": "Attempt to convert value types based on operator"
        }
      }
    },
    "n8n-nodes-base.form": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "n8n Form node",
      "description": "Use the n8n Form node to create user-facing forms with multiple steps. You can add other nodes with custom logic between to process user input. You must start the workflow with the [n8n Form Trigger](/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger.md).",
      "settingUpNode": {
        "setDefaultsWithQueryParameters": {
          "note": "Query parameters are only available when using the form in production mode. n8n won't populate field values from query parameters in testing mode."
        },
        "displayingCustomHTML": {
          "note": "The HTML field doesn't support <script>, <style>, or <input> elements."
        },
        "definingFormUsingJSON": {
          "keys": [
            "fieldLabel",
            "fieldType",
            "placeholder",
            "requiredField"
          ],
          "fieldTypes": [
            "date",
            "dropdown",
            "email",
            "file",
            "number",
            "password",
            "text",
            "textarea"
          ]
        },
        "formEnding": {
          "options": [
            "Show Completion Screen",
            "Redirect to URL",
            "Show Text"
          ],
          "onN8nFormSubmission": {
            "Show Completion Screen": {
              "parameters": [
                "Completion Title",
                "Completion Message",
                "Completion Page Title"
              ]
            },
            "Redirect to URL": {
              "parameters": [
                "URL"
              ]
            },
            "Show Text": {
              "parameters": [
                "Text"
              ]
            }
          }
        },
        "formsWithBranches": {
          "workflowsWithMutuallyExclusiveBranches": "Form workflows containing mutually exclusive branches work as expected.",
          "workflowsThatMayExecuteMultipleBranches": "Form workflows that send data to multiple branches at the same time require more care."
        }
      },
      "options": {
        "Form Title": {
          "type": "string",
          "description": "Title for the form (webpage and main h1 title)"
        },
        "Form Description": {
          "type": "string",
          "description": "Description for the form (subtitle, HTML meta description)"
        },
        "Button Label": {
          "type": "string",
          "description": "Label for the form's submit button"
        }
      },
      "runningNode": {
        "buildAndTestWorkflows": {
          "testingModes": [
            "Test Step",
            "Test Workflow"
          ]
        },
        "productionWorkflows": "When your workflow is ready, switch to using the n8n Form Trigger's **Production URL** by opening the trigger node and selecting the **Production URL** in the **From URLS** selector. You can then activate your workflow, and n8n runs it automatically when a user submits the form.\n\nWhen working with a production URL, ensure that you have saved and activated the workflow. Data flowing through the Form trigger isn't visible in the editor UI with the production URL."
      }
    },
    "n8n-nodes-base.formtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "n8n Form Trigger node",
      "description": "Use the n8n Form trigger to start a workflow when a user submits a form, taking the input data from the form. The node generates the form web page for you to use.",
      "usage": "You can add more pages to continue the form with the [n8n Form](/integrations/builtin/core-nodes/n8n-nodes-base.form.md) node.",
      "buildAndTestWorkflows": "While building or testing a workflow, use the **Test URL**. Using a test URL ensures that you can view the incoming data in the editor UI, which is useful for debugging.\n\nThere are two ways to test:\n\n- Select **Test Step**. n8n opens the form. When you submit the form, n8n runs the node, but not the rest of the workflow.\n- Select **Test Workflow**. n8n opens the form. When you submit the form, n8n runs the workflow.",
      "productionWorkflows": "When your workflow is ready, switch to using the **Production URL**. You can then activate your workflow, and n8n runs it automatically when a user submits the form.\n\nWhen working with a production URL, ensure that you have saved and activated the workflow. Data flowing through the Form trigger isn't visible in the editor UI with the production URL.",
      "setDefaultsWithQueryParameters": {
        "note": "Query parameters are only available when using the form in production mode. n8n won't populate field values from query parameters in testing mode."
      },
      "parameters": {
        "Authentication": {
          "type": "select",
          "options": [
            "Basic Auth",
            "None"
          ],
          "description": "Authentication type for the form"
        },
        "Basic Auth": {
          "parameters": {
            "Credential for Basic Auth": {
              "type": "credential",
              "credentialType": "httpBasicAuth",
              "description": "Basic authentication credential"
            }
          }
        },
        "Form URLs": {
          "type": "urls",
          "description": "Test and Production URLs"
        },
        "Form Path": {
          "type": "string",
          "description": "Custom slug for the form"
        },
        "Form Title": {
          "type": "string",
          "description": "Title for the form (webpage and main h1 title)"
        },
        "Form Description": {
          "type": "string",
          "description": "Description for the form (subtitle)"
        },
        "Form Elements": {
          "type": "repeatable",
          "description": "Question fields for your form",
          "template": {
            "Field Label": {
              "type": "string",
              "description": "Label that appears above the input field"
            },
            "Element Type": {
              "type": "select",
              "options": [
                "Custom HTML",
                "Date",
                "Dropdown List",
                "Email",
                "File",
                "Hidden Field",
                "Number",
                "Password",
                "Text",
                "Textarea"
              ],
              "description": "Type of form element"
            },
            "Custom HTML": {
              "parameters": {
                "Element Name": {
                  "type": "string",
                  "description": "Name to include Custom HTML content in output"
                }
              }
            },
            "Dropdown List": {
              "parameters": {
                "Multiple Choice": {
                  "type": "boolean",
                  "description": "Allow multiple choices in dropdown"
                },
                "Field Options": {
                  "type": "repeatable",
                  "description": "Dropdown options",
                  "template": {
                    "Field Option": {
                      "type": "string",
                      "description": "Option for the dropdown list"
                    }
                  }
                }
              }
            },
            "Hidden Field": {
              "parameters": {
                "Field Value": {
                  "type": "string",
                  "description": "Default value for the hidden field"
                }
              }
            },
            "Required Field": {
              "type": "boolean",
              "description": "Require users to complete this field"
            }
          }
        },
        "Respond When": {
          "type": "select",
          "options": [
            "Form Is Submitted",
            "Workflow Finishes"
          ],
          "description": "When to send a response to form submission"
        }
      },
      "options": {
        "Append n8n Attribution": {
          "type": "boolean",
          "description": "Hide 'Form automated with n8n' attribute"
        },
        "Form Response": {
          "type": "select",
          "options": [
            "Form Submitted Text",
            "Redirect URL"
          ],
          "description": "How to respond when user submits form",
          "details": {
            "Form Submitted Text": {
              "parameters": {
                "Form Submitted Text Message": {
                  "type": "string",
                  "description": "Message to show to the user after form submission"
                }
              }
            },
            "Redirect URL": {
              "parameters": {
                "Redirect URL": {
                  "type": "string",
                  "description": "URL to redirect user to after form submission"
                }
              }
            }
          }
        },
        "Ignore Bots": {
          "type": "boolean",
          "description": "Ignore requests from bots"
        },
        "Use Workflow Timezone": {
          "type": "boolean",
          "description": "Use workflow timezone instead of UTC"
        }
      }
    },
    "n8n-nodes-base.ftp": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "FTP",
      "description": "The FTP node is useful to access and upload files to an FTP or SFTP server.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/ftp.md).",
      "operations": [
        "Delete",
        "Download",
        "List",
        "Rename",
        "Upload"
      ],
      "Delete": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          }
        },
        "options": {
          "Folder": {
            "type": "boolean",
            "description": "Delete folders and files",
            "parameters": {
              "Recursive": {
                "type": "boolean",
                "description": "Recursively delete all files and directories within the target directory"
              }
            }
          }
        }
      },
      "Download": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          },
          "Put Output File in Field": {
            "type": "string",
            "description": "Output binary field to put the file in"
          }
        }
      },
      "List": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          },
          "Recursive": {
            "type": "boolean",
            "description": "Return all directories/objects recursively"
          }
        }
      },
      "Rename": {
        "parameters": {
          "Old Path": {
            "type": "string",
            "description": "Existing path of the file to rename"
          },
          "New Path": {
            "type": "string",
            "description": "New path for the renamed file"
          }
        },
        "options": {
          "Create Directories": {
            "type": "boolean",
            "description": "Recursively create destination directory when renaming"
          }
        }
      },
      "Upload": {
        "parameters": {
          "Path": {
            "type": "string",
            "description": "Remote path to connect to"
          },
          "Binary File": {
            "type": "boolean",
            "description": "Upload a binary file",
            "parameters": {
              "Input Binary Field": {
                "type": "string",
                "description": "Input binary field containing file to upload"
              }
            },
            "alternativeParameters": {
              "File Content": {
                "type": "string",
                "description": "Text content of the file to upload"
              }
            }
          }
        }
      }
    },
    "n8n-nodes-base.git": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "Git",
      "description": "[Git](https://git-scm.com/) is a free and open-source distributed version control system designed to handle everything from small to large projects with speed and efficiency.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/git.md).",
      "operations": [
        "Add",
        "Add Config",
        "Clone",
        "Commit",
        "Fetch",
        "List Config",
        "Log",
        "Pull",
        "Push",
        "Push Tags",
        "Status",
        "Tag",
        "User Setup"
      ],
      "Add": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Paths to Add": {
            "type": "string",
            "description": "Comma-separated list of paths of files/folders to add"
          }
        }
      },
      "Add Config": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Key": {
            "type": "string",
            "description": "Name of the key to set"
          },
          "Value": {
            "type": "string",
            "description": "Value of the key to set"
          }
        },
        "options": {
          "Mode": {
            "type": "select",
            "options": [
              "Set",
              "Append"
            ],
            "description": "Config mode"
          }
        }
      },
      "Clone": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Authentication": {
            "type": "select",
            "options": [
              "Authenticate",
              "None"
            ],
            "description": "Authentication method",
            "details": {
              "Authenticate": {
                "parameters": {
                  "Credential for Git": {
                    "type": "credential",
                    "credentialType": "git",
                    "description": "Git credential to connect with"
                  }
                }
              }
            }
          },
          "New Repository Path": {
            "type": "string",
            "description": "Local path for the cloned repository"
          },
          "Source Repository": {
            "type": "string",
            "description": "URL or path of the repository to clone"
          }
        }
      },
      "Commit": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Message": {
            "type": "string",
            "description": "Commit message"
          }
        },
        "options": {
          "Paths to Add": {
            "type": "string",
            "description": "Comma-separated list of paths of files/folders to commit (leave blank for all added)"
          }
        }
      },
      "Fetch": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "List Config": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Log": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Return All": {
            "type": "boolean",
            "description": "Return all results"
          },
          "Limit": {
            "type": "number",
            "description": "Maximum number of results to return (if Return All is off)"
          }
        },
        "options": {
          "File": {
            "type": "string",
            "description": "Path of a file or folder to get history of"
          }
        }
      },
      "Pull": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Push": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Authentication": {
            "type": "select",
            "options": [
              "Authenticate",
              "None"
            ],
            "description": "Authentication method",
            "details": {
              "Authenticate": {
                "parameters": {
                  "Credential for Git": {
                    "type": "credential",
                    "credentialType": "git",
                    "description": "Git credential to connect with"
                  }
                }
              }
            }
          }
        },
        "options": {
          "Target Repository": {
            "type": "string",
            "description": "URL or path of the repository to push to"
          }
        }
      },
      "Push Tags": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Status": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      },
      "Tag": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          },
          "Name": {
            "type": "string",
            "description": "Name of the tag to create"
          }
        }
      },
      "User Setup": {
        "parameters": {
          "Repository Path": {
            "type": "string",
            "description": "Local path of the git repository"
          }
        }
      }
    },
    "n8n-nodes-base.graphql": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "GraphQL",
      "description": "[GraphQL](https://graphql.org/){:target=_blank .external-link} is an open-source data query and manipulation language for APIs, and a runtime for fulfilling queries with existing data. Use the GraphQL node to query a GraphQL endpoint.",
      "parameters": {
        "Authentication": {
          "type": "selectAuthentication",
          "description": "Type of authentication to use"
        },
        "HTTP Request Method": {
          "type": "select",
          "options": [
            "GET",
            "POST"
          ],
          "description": "Underlying HTTP Request method",
          "details": {
            "POST": {
              "parameters": {
                "Request Format": {
                  "type": "select",
                  "options": [
                    "GraphQL (Raw)",
                    "JSON"
                  ],
                  "description": "Request Format for POST method"
                }
              }
            }
          }
        },
        "Endpoint": {
          "type": "string",
          "description": "GraphQL Endpoint to hit"
        },
        "Ignore SSL Issues": {
          "type": "boolean",
          "description": "Ignore SSL certificate validation failure"
        },
        "Query": {
          "type": "string",
          "description": "GraphQL query to execute"
        },
        "Response Format": {
          "type": "select",
          "options": [
            "JSON",
            "String"
          ],
          "description": "Format to receive query results in",
          "details": {
            "String": {
              "parameters": {
                "Response Data Property Name": {
                  "type": "string",
                  "description": "Property to write the string response to"
                }
              }
            }
          }
        }
      },
      "headers": {
        "Headers": {
          "type": "keyValuePair",
          "description": "Headers to pass as part of the query"
        }
      }
    },
    "n8n-nodes-base.html": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "HTML",
      "description": "The HTML node provides operations to help you work with HTML in n8n.",
      "note": "The HTML node replaces the HTML Extract node from version 0.213.0 on. If you're using an older version of n8n, you can still view the [HTML Extract node documentation](https://github.com/n8n-io/n8n-docs/blob/86fe33b681621e618e3adcab9a27e8605dbc23ad/docs/integrations/builtin/core-nodes/n8n-nodes-base.htmlextract.md){:target=_blank .external-link}.",
      "warning": "When using the HTML node to generate an HTML template you can introduce [XSS (cross-site scripting)](https://owasp.org/www-community/attacks/xss/){:target=_blank .external-link}. This is a security risk. Be careful with un-trusted inputs.",
      "operations": [
        "Generate HTML template",
        "Extract HTML content",
        "Convert to HTML Table"
      ],
      "Generate HTML template": {
        "description": "Create an HTML template from workflow data. Supports HTML, CSS, JavaScript (not executed), and Expressions."
      },
      "Extract HTML Content": {
        "parameters": {
          "Source Data": {
            "type": "select",
            "options": [
              "JSON",
              "Binary"
            ],
            "description": "Source type for HTML content",
            "details": {
              "JSON": {
                "parameters": {
                  "JSON Property": {
                    "type": "string",
                    "description": "Input containing HTML to extract"
                  }
                }
              },
              "Binary": {
                "parameters": {
                  "Input Binary Field": {
                    "type": "string",
                    "description": "Input containing HTML to extract (binary)"
                  }
                }
              }
            }
          },
          "Extraction Values": {
            "type": "repeatable",
            "description": "Values to extract from HTML content",
            "template": {
              "Key": {
                "type": "string",
                "description": "Key to save extracted value under"
              },
              "CSS Selector": {
                "type": "string",
                "description": "CSS selector to search for"
              },
              "Return Value": {
                "type": "select",
                "options": [
                  "Attribute",
                  "HTML",
                  "Text",
                  "Value"
                ],
                "description": "Type of data to return",
                "details": {
                  "Attribute": {
                    "parameters": {
                      "Attribute": {
                        "type": "string",
                        "description": "Attribute to return the value of"
                      }
                    }
                  },
                  "Text": {
                    "parameters": {
                      "Skip Selectors": {
                        "type": "string",
                        "description": "Comma-separated list of selectors to skip"
                      }
                    }
                  }
                }
              },
              "Return Array": {
                "type": "boolean",
                "description": "Return multiple extraction values as an array"
              }
            }
          }
        },
        "options": {
          "Trim Values": {
            "type": "boolean",
            "description": "Remove spaces/newlines from value start/end"
          },
          "Clean Up Text": {
            "type": "boolean",
            "description": "Clean up text content (whitespaces, line breaks)"
          }
        }
      },
      "Convert to HTML Table": {
        "description": "Convert input content to an HTML table.",
        "options": {
          "Capitalize Headers": {
            "type": "boolean",
            "description": "Capitalize table headers"
          },
          "Custom Styling": {
            "type": "boolean",
            "description": "Use custom styling"
          },
          "Caption": {
            "type": "string",
            "description": "Caption for the table"
          },
          "Table Attributes": {
            "type": "string",
            "description": "Attributes for the <table> tag"
          },
          "Header Attributes": {
            "type": "string",
            "description": "Attributes for the <th> tags"
          },
          "Row Attributes": {
            "type": "string",
            "description": "Attributes for the <tr> tags"
          },
          "Cell Attributes": {
            "type": "string",
            "description": "Attributes for the <td> tags"
          }
        }
      }
    },
    "n8n-nodes-base.if": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "If",
      "description": "Use the If node to split a workflow conditionally based on comparison operations.",
      "parameters": {
        "Conditions": {
          "type": "group",
          "description": "Comparison conditions",
          "repeatable": true,
          "template": {
            "DataType": {
              "type": "selectDataType",
              "description": "Data type and comparison operation type"
            }
          }
        },
        "Condition Combination": {
          "type": "select",
          "options": [
            "AND",
            "OR"
          ],
          "description": "Combine multiple conditions"
        }
      },
      "templatesAndExamples": "<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'if') ]]",
      "branchExecution": "<!-- --8<-- \"_snippets/integrations/builtin/core-nodes/merge/if-merge-branch-execution.md\" -->",
      "relatedResources": "Refer to [Splitting with conditionals](/flow-logic/splitting.md) for more information on using conditionals to create complex logic in n8n.\n\nIf you need more than two conditional outputs, use the [Switch node](/integrations/builtin/core-nodes/n8n-nodes-base.switch.md)."
    },
    "n8n-nodes-base.itemlists": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "Item Lists",
      "description": "/// warning | Removed in 1.21.0\nn8n removed the Item Lists node in version 1.21.0. Use the following nodes instead:\n\n* [Aggregate](/integrations/builtin/core-nodes/n8n-nodes-base.aggregate.md): take separate items, or portions of them, and group them together into individual items.\n* [Limit](/integrations/builtin/core-nodes/n8n-nodes-base.aggregate.md): remove items beyond a defined maximum number.\n* [Remove Duplicates](/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/index.md): identify items that are identical across all fields or a subset of fields.\n* [Sort](/integrations/builtin/core-nodes/n8n-nodes-base.sort.md): organize lists of in a desired ordering, or generate a random selection.\n* [Split Out](/integrations/builtin/core-nodes/n8n-nodes-base.splitout.md): separate a single data item containing a list into multiple items.\n* [Summarize](/integrations/builtin/core-nodes/n8n-nodes-base.summarize.md): aggregate items together, in a manner similar to Excel pivot tables. \n///\n\nThe Item Lists node simplifies working with returned data that contain lists (arrays), enabling you to change the structure for further processing without the need to use [Code](/integrations/builtin/core-nodes/n8n-nodes-base.code/index.md) nodes or write custom JavaScript.",
      "operations": [
        "Concatenate Items",
        "Limit",
        "Remove Duplicates",
        "Sort",
        "Split Out Items",
        "Summarize"
      ],
      "Split Out Items": {
        "parameters": {
          "Field to Split Out": {
            "type": "string",
            "description": "Field containing list to separate out into individual items"
          },
          "Include": {
            "type": "select",
            "options": [
              "No Other Fields",
              "All Other Fields",
              "Selected Other Fields"
            ],
            "description": "Fields to include from input data",
            "details": {
              "Selected Other Fields": {
                "parameters": {
                  "Fields to Include": {
                    "type": "string",
                    "description": "Comma separated list of desired fields"
                  }
                }
              }
            }
          }
        },
        "options": {
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          },
          "Destination Field Name": {
            "type": "string",
            "description": "Field name to put new split contents under"
          },
          "Include Binary": {
            "type": "boolean",
            "description": "Include binary data from input"
          }
        }
      },
      "Concatenate Items": {
        "parameters": {
          "Aggregate": {
            "type": "select",
            "options": [
              "Individual Fields",
              "All Item Data"
            ],
            "description": "Aggregation type"
          },
          "Individual Fields": {
            "parameters": {
              "Field To Aggregate": {
                "type": "string",
                "description": "Field in input data to be aggregated"
              },
              "Rename Field": {
                "type": "boolean",
                "description": "Enable to enter a field name for aggregated output",
                "parameters": {
                  "Output Field Name": {
                    "type": "string",
                    "description": "Field name for the aggregated output data"
                  }
                }
              }
            },
            "options": {
              "Disable Dot Notation": {
                "type": "boolean",
                "description": "Disable dot notation for child fields"
              },
              "Include Binaries": {
                "type": "boolean",
                "description": "Include binary data from input"
              }
            }
          },
          "All Item Data": {
            "parameters": {
              "Put Output in Field": {
                "type": "string",
                "description": "Name of the output field"
              },
              "Include": {
                "type": "select",
                "options": [
                  "All fields",
                  "Specified Fields",
                  "All Fields Except"
                ],
                "description": "Choose fields to include in output"
              }
            }
          }
        }
      },
      "Remove Duplicates": {
        "parameters": {
          "Compare": {
            "type": "select",
            "options": [
              "All Fields",
              "All Fields Except",
              "Selected Fields"
            ],
            "description": "Fields of input data to compare"
          },
          "All Fields Except": {
            "parameters": {
              "Fields to Exclude": {
                "type": "string",
                "description": "Fields to exclude from comparison (comma-separated)"
              }
            }
          },
          "Selected Fields": {
            "parameters": {
              "Fields to Include": {
                "type": "string",
                "description": "Fields to include in comparison (comma-separated)"
              }
            }
          }
        },
        "options": {
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          }
        }
      },
      "Sort": {
        "parameters": {
          "Type": {
            "type": "select",
            "options": [
              "Simple",
              "Random",
              "Code"
            ],
            "description": "Type of sorting input"
          },
          "Simple": {
            "parameters": {
              "Add Field To Sort By": {
                "type": "repeatable",
                "description": "Fields to sort by",
                "template": {
                  "Field Name": {
                    "type": "string",
                    "description": "Field name to sort by"
                  },
                  "Order": {
                    "type": "select",
                    "options": [
                      "Ascending",
                      "Descending"
                    ],
                    "description": "Sort order"
                  }
                }
              }
            }
          },
          "Code": {
            "parameters": {
              "Code": {
                "type": "code",
                "description": "Custom JavaScript code for sorting"
              }
            }
          }
        },
        "options": {
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          }
        }
      },
      "Limit": {
        "parameters": {
          "Max Items": {
            "type": "number",
            "description": "Maximum number of items to keep"
          },
          "Keep": {
            "type": "select",
            "options": [
              "First Items",
              "Last Items"
            ],
            "description": "Items to keep from input data"
          }
        }
      },
      "Summarize": {
        "parameters": {
          "Fields to Summarize": {
            "type": "repeatable",
            "description": "Fields to summarize",
            "template": {
              "Aggregation": {
                "type": "select",
                "options": [
                  "Append",
                  "Average",
                  "Concatenate",
                  "Count",
                  "Count Unique",
                  "Max",
                  "Min",
                  "Sum"
                ],
                "description": "Aggregation method"
              },
              "Field": {
                "type": "string",
                "description": "Field to perform aggregation on"
              },
              "Include Empty Values": {
                "type": "boolean",
                "description": "Include empty values in aggregation (for Append and Concatenate)"
              },
              "Separator": {
                "type": "select",
                "options": [
                  "Comma",
                  "Newline",
                  "Space",
                  "Tab"
                ],
                "description": "Separator for concatenation"
              }
            }
          },
          "Fields to Split By": {
            "type": "string",
            "description": "Fields to split the summary by (comma-separated)"
          }
        },
        "options": {
          "Continue if Field Not Found": {
            "type": "boolean",
            "description": "Continue and return empty item if field not found"
          },
          "Disable Dot Notation": {
            "type": "boolean",
            "description": "Disable dot notation for child fields"
          },
          "Output Format": {
            "type": "select",
            "options": [
              "Each Split in a Separate Item",
              "All Splits in a Single Item"
            ],
            "description": "Output format for splits"
          },
          "Ignore items without valid fields to group by": {
            "type": "boolean",
            "description": "Ignore input items without Fields to Split By"
          }
        }
      }
    },
    "n8n-nodes-base.jwt": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "JWT",
      "description": "Work with JSON web tokens in your n8n workflows.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/jwt.md).",
      "operations": [
        "Decode",
        "Sign",
        "Verify"
      ],
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "jwt",
          "description": "JWT credential to connect with"
        },
        "Token": {
          "type": "string",
          "description": "Token to Verify or Decode"
        },
        "Sign": {
          "parameters": {
            "Use JSON to Build Payload": {
              "type": "boolean",
              "description": "Build payload claims using JSON"
            },
            "Payload Claims": {
              "type": "group",
              "description": "Payload claims for signing",
              "parameters": {
                "Audience": {
                  "type": "string",
                  "description": "Audience (aud) claim"
                },
                "Expires In": {
                  "type": "number",
                  "description": "Expiration Time (exp) claim in seconds"
                },
                "Issuer": {
                  "type": "string",
                  "description": "Issuer (iss) claim"
                },
                "JWT ID": {
                  "type": "string",
                  "description": "JWT ID (jti) claim"
                },
                "Not Before": {
                  "type": "number",
                  "description": "Not Before (nbf) claim in seconds"
                },
                "Subject": {
                  "type": "string",
                  "description": "Subject (sub) claim"
                }
              }
            },
            "JSON Payload Claims": {
              "type": "json",
              "description": "JSON payload claims for signing"
            }
          }
        }
      },
      "options": {
        "Decode": {
          "options": {
            "Return Additional Info": {
              "type": "boolean",
              "description": "Return complete decoded token with header and signature"
            }
          }
        },
        "Sign": {
          "options": {
            "Override Algorithm": {
              "type": "select",
              "options": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512"
              ],
              "description": "Algorithm to override credential setting"
            }
          }
        },
        "Verify": {
          "options": {
            "Return Additional Info": {
              "type": "boolean",
              "description": "Return complete decoded token with header and signature"
            },
            "Ignore Expiration": {
              "type": "boolean",
              "description": "Ignore token's expiration time claim (exp)"
            },
            "Ignore Not Before Claim": {
              "type": "boolean",
              "description": "Ignore token's not before claim (nbf)"
            },
            "Clock Tolerance": {
              "type": "number",
              "description": "Clock tolerance in seconds for nbf and exp claims"
            },
            "Override Algorithm": {
              "type": "select",
              "options": [
                "HS256",
                "HS384",
                "HS512",
                "RS256",
                "RS384",
                "RS512"
              ],
              "description": "Algorithm to override credential setting"
            }
          }
        }
      }
    },
    "n8n-nodes-base.ldap": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "LDAP",
      "description": "This node allows you to interact with your LDAP servers to create, find, and update objects.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/ldap.md).",
      "operations": [
        "Compare",
        "Create",
        "Delete",
        "Rename",
        "Search",
        "Update"
      ],
      "Compare": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to compare"
          },
          "Attribute ID": {
            "type": "string",
            "description": "ID of the attribute to compare"
          },
          "Value": {
            "type": "string",
            "description": "Value to compare"
          }
        }
      },
      "Create": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to create"
          },
          "Attributes": {
            "type": "repeatable",
            "description": "Attribute ID/Value pairs to create",
            "template": {
              "Attribute ID": {
                "type": "string",
                "description": "Attribute ID"
              },
              "Value": {
                "type": "string",
                "description": "Attribute Value"
              }
            }
          }
        }
      },
      "Delete": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to delete"
          }
        }
      },
      "Rename": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Current Distinguished Name (DN) of the entry"
          },
          "New DN": {
            "type": "string",
            "description": "New Distinguished Name (DN) for the entry"
          }
        }
      },
      "Search": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "Base DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of subtree to search in"
          },
          "Search For": {
            "type": "string",
            "description": "Directory object class to search for"
          },
          "Attribute": {
            "type": "string",
            "description": "Attribute to search for"
          },
          "Search Text": {
            "type": "string",
            "description": "Text to search for (use * for wildcard)"
          },
          "Return All": {
            "type": "boolean",
            "description": "Return all results"
          },
          "Limit": {
            "type": "number",
            "description": "Maximum number of results to return (if Return All is off)"
          }
        },
        "options": {
          "Attribute Names or IDs": {
            "type": "string",
            "description": "Comma-separated list of attributes to return"
          },
          "Page Size": {
            "type": "number",
            "description": "Maximum number of results to request at one time (0 to disable paging)"
          },
          "Scopes": {
            "type": "select",
            "options": [
              "Base Tree",
              "Single Level",
              "Whole Subtree"
            ],
            "description": "Search scope relative to Base DN"
          }
        }
      },
      "Update": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ldap",
            "description": "LDAP credential to connect with"
          },
          "DN": {
            "type": "string",
            "description": "Distinguished Name (DN) of the entry to update"
          },
          "Update Attributes": {
            "type": "select",
            "options": [
              "Add",
              "Remove",
              "Replace"
            ],
            "description": "Type of attribute update"
          },
          "Attribute ID": {
            "type": "string",
            "description": "Attribute ID to update"
          },
          "Value": {
            "type": "string",
            "description": "New value for the attribute"
          }
        }
      }
    },
    "n8n-nodes-base.limit": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Limit",
      "description": "Use the Limit node to remove items beyond a defined maximum number. You can choose whether n8n takes the items from the beginning or end of the input data.",
      "parameters": {
        "Max Items": {
          "type": "number",
          "description": "Maximum number of items to keep"
        },
        "Keep": {
          "type": "select",
          "options": [
            "First Items",
            "Last Items"
          ],
          "description": "Items to keep from input data"
        }
      }
    },
    "n8n-nodes-base.localfiletrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Local File Trigger node",
      "description": "The Local File Trigger node starts a workflow when it detects changes on the file system. These changes involve a file or folder getting added, changed, or deleted.",
      "note": "This node isn't available on n8n Cloud.",
      "parameters": {
        "Trigger On": {
          "type": "select",
          "options": [
            "Specific File Changes",
            "Specific Folder Changes"
          ],
          "description": "Event to watch for"
        },
        "Specific File Changes": {
          "parameters": {
            "File to Watch": {
              "type": "string",
              "description": "Path to the file to watch"
            }
          }
        },
        "Specific Folder Changes": {
          "parameters": {
            "Folder to Watch": {
              "type": "string",
              "description": "Path to the folder to watch"
            },
            "Watch for": {
              "type": "multiOptions",
              "options": [
                "Add",
                "Change",
                "Delete"
              ],
              "description": "Types of changes to watch for"
            }
          }
        }
      },
      "options": {
        "Include Linked Files/Folders": {
          "type": "boolean",
          "description": "Watch for changes to linked files/folders"
        },
        "Ignore": {
          "type": "string",
          "description": "Files or paths to ignore (Anymatch syntax)"
        },
        "Max Folder Depth": {
          "type": "number",
          "description": "Maximum folder depth to watch for changes"
        }
      }
    },
    "n8n-nodes-base.manualworkflowtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Manual Trigger node",
      "description": "Use this node if you want to start a workflow by selecting **Test Workflow** and don't want any option for the workflow to run automatically.",
      "usage": "Workflows always need a trigger, or start point. Most workflows start with a trigger node firing in response to an external event or the [Schedule Trigger](/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/index.md) firing on a set schedule.\n\nThe Manual Trigger node serves as the workflow trigger for workflows that don't have an automatic trigger.\n\nUse this trigger:\n\n* To test your workflow before you add an automatic trigger of some kind.\n* When you don't want the workflow to run automatically.",
      "commonIssues": {
        "onlyOneManualTriggerAllowed": "This error displays if you try to add a Manual Trigger node to a workflow which already includes a Manual Trigger node."
      }
    },
    "n8n-nodes-base.markdown": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Markdown",
      "description": "The Markdown node converts between Markdown and HTML formats.",
      "operations": [
        "Markdown to HTML",
        "HTML to Markdown"
      ],
      "parameters": {
        "Markdown to HTML": {
          "parameters": {
            "Markdown": {
              "type": "string",
              "description": "Markdown data to convert"
            }
          },
          "options": {
            "Add Blank To Links": {
              "type": "boolean",
              "description": "Open links in a new window"
            },
            "Automatic Linking To URLs": {
              "type": "boolean",
              "description": "Automatically link URLs"
            },
            "Backslash Escapes HTML Tags": {
              "type": "boolean",
              "description": "Allow backslash escaping of HTML tags"
            },
            "Complete HTML Document": {
              "type": "boolean",
              "description": "Output a complete HTML document"
            },
            "Customized Header ID": {
              "type": "boolean",
              "description": "Support custom heading IDs"
            },
            "Emoji Support": {
              "type": "boolean",
              "description": "Support emojis"
            },
            "Encode Emails": {
              "type": "boolean",
              "description": "Transform ASCII character emails to decimal entities"
            },
            "Exclude Trailing Punctuation From URLs": {
              "type": "boolean",
              "description": "Exclude trailing punctuation from automatically linked URLs"
            },
            "GitHub Code Blocks": {
              "type": "boolean",
              "description": "Enable GitHub Flavored Markdown code blocks"
            },
            "GitHub Compatible Header IDs": {
              "type": "boolean",
              "description": "Generate GitHub Flavored Markdown heading IDs"
            },
            "GitHub Mention Link": {
              "type": "string",
              "description": "Link used with GitHub Mentions"
            },
            "GitHub Mentions": {
              "type": "boolean",
              "description": "Support tagging GitHub users with @"
            },
            "GitHub Task Lists": {
              "type": "boolean",
              "description": "Support GitHub Flavored Markdown task lists"
            },
            "Header Level Start": {
              "type": "number",
              "description": "Start level for headers"
            },
            "Mandatory Space Before Header": {
              "type": "boolean",
              "description": "Require space between # and heading text"
            },
            "Middle Word Asterisks": {
              "type": "boolean",
              "description": "Treat asterisks in words as literal asterisks"
            },
            "Middle Word Underscores": {
              "type": "boolean",
              "description": "Treat underscores in words as literal underscores"
            },
            "No Header ID": {
              "type": "boolean",
              "description": "Disable automatic generation of header IDs"
            },
            "Parse Image Dimensions": {
              "type": "boolean",
              "description": "Support setting maximum image dimensions in Markdown syntax"
            },
            "Prefix Header ID": {
              "type": "string",
              "description": "Prefix to add to header IDs"
            },
            "Raw Header ID": {
              "type": "boolean",
              "description": "Remove spaces, ', and \" from header IDs"
            },
            "Raw Prefix Header ID": {
              "type": "boolean",
              "description": "Prevent n8n from modifying header prefixes"
            },
            "Simple Line Breaks": {
              "type": "boolean",
              "description": "Create line breaks without double space at end of line"
            },
            "Smart Indentation Fix": {
              "type": "boolean",
              "description": "Fix indentation problems related to ES6 template strings"
            },
            "Spaces Indented Sublists": {
              "type": "boolean",
              "description": "Remove requirement to indent sublists four spaces"
            },
            "Split Adjacent Blockquotes": {
              "type": "boolean",
              "description": "Split adjacent blockquote blocks"
            },
            "Strikethrough": {
              "type": "boolean",
              "description": "Support strikethrough syntax (~~word~~)"
            },
            "Tables Header ID": {
              "type": "boolean",
              "description": "Add an ID to table header tags"
            },
            "Tables Support": {
              "type": "boolean",
              "description": "Support tables"
            }
          }
        },
        "HTML to Markdown": {
          "parameters": {
            "HTML": {
              "type": "string",
              "description": "HTML data to convert"
            }
          },
          "options": {
            "Bullet Marker": {
              "type": "string",
              "description": "Character for unordered lists",
              "default": "*"
            },
            "Code Block Fence": {
              "type": "string",
              "description": "Characters for code blocks"
            },
            "Emphasis Delimiter": {
              "type": "string",
              "description": "Character for `<em>`",
              "default": "_"
            },
            "Global Escape Pattern": {
              "type": "string",
              "description": "Overrides default character escape settings"
            },
            "Ignored Elements": {
              "type": "string",
              "description": "HTML elements to ignore"
            },
            "Keep Images With Data": {
              "type": "boolean",
              "description": "Keep images with data (up to 1MB)"
            },
            "Line Start Escape Pattern": {
              "type": "string",
              "description": "Overrides default character escape settings"
            },
            "Max Consecutive New Lines": {
              "type": "number",
              "description": "Maximum consecutive new lines allowed",
              "default": 3
            },
            "Place URLs At The Bottom": {
              "type": "boolean",
              "description": "Place URLs at the bottom of the page"
            },
            "Strong Delimiter": {
              "type": "string",
              "description": "Characters for `<strong>`",
              "default": "**"
            },
            "Style For Code Block": {
              "type": "select",
              "options": [
                "Fence",
                "Indented"
              ],
              "description": "Styling for code blocks",
              "default": "Fence"
            },
            "Text Replacement Pattern": {
              "type": "string",
              "description": "Text replacement pattern using regex"
            },
            "Treat As Blocks": {
              "type": "string",
              "description": "HTML elements to treat as blocks"
            }
          }
        },
        "Destination Key": {
          "type": "string",
          "description": "Field to put the output in"
        }
      },
      "parsers": {
        "HTML to Markdown": "[node-html-markdown](https://www.npmjs.com/package/node-html-markdown)",
        "Markdown to HTML": "[Showdown](https://www.npmjs.com/package/showdown) (GitHub Flavored Markdown optional)"
      }
    },
    "n8n-nodes-base.merge": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Merge",
      "description": "Use the Merge node to combine data from multiple streams, once data of all streams is available.",
      "noteMajorChanges": "The n8n team overhauled this node in n8n 0.194.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document [here](https://github.com/n8n-io/n8n-docs/blob/4ff688642cc9ee7ca7d00987847bf4e4515da59d/docs/integrations/builtin/core-nodes/n8n-nodes-base.merge.md){:target=_blank .external-link}.",
      "noteMinorChanges": "n8n version 1.49.0 introduced the option to add more than two inputs. Older versions only support up to two inputs. If you're running an older version and want to combine multiple inputs in these versions, use the [Code node](https://deploy-preview-2225--n8n-docs.netlify.app/code/code-node/).\n\nThe **Mode > SQL Query** feature was also added in n8n version 1.49.0 and isn't available in older versions.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "Append",
            "Combine",
            "SQL Query",
            "Choose Branch"
          ],
          "description": "Mode of data combination"
        },
        "Append": {
          "parameters": {
            "Number of Inputs": {
              "type": "number",
              "description": "Number of input streams to append"
            }
          }
        },
        "Combine": {
          "parameters": {
            "Combine By": {
              "type": "select",
              "options": [
                "Matching Fields",
                "Position",
                "All Possible Combinations"
              ],
              "description": "Method to combine input data"
            },
            "Matching Fields": {
              "parameters": {
                "Fields to Match": {
                  "type": "string",
                  "description": "Comma-separated list of fields to match"
                },
                "Output Type": {
                  "type": "select",
                  "options": [
                    "Keep Matches",
                    "Keep Non-Matches",
                    "Keep Everything",
                    "Enrich Input 1",
                    "Enrich Input 2"
                  ],
                  "description": "Type of output for matching fields"
                }
              }
            }
          }
        },
        "SQL Query": {
          "parameters": {
            "Query": {
              "type": "sql",
              "description": "Custom SQL query to merge data"
            }
          }
        },
        "Choose Branch": {
          "parameters": {
            "Output": {
              "type": "select",
              "options": [
                "Input 1 Data",
                "Input 2 Data",
                "A Single, Empty Item"
              ],
              "description": "Input to output"
            }
          }
        }
      },
      "options": {
        "Combine": {
          "options": {
            "Clash Handling": {
              "type": "select",
              "options": [
                "Input 1 takes precedence",
                "Input 2 takes precedence",
                "Combine"
              ],
              "description": "How to merge when data streams clash"
            },
            "Fuzzy Compare": {
              "type": "boolean",
              "description": "Tolerate type differences in field comparison"
            },
            "Disable Dot Notation": {
              "type": "boolean",
              "description": "Disable dot notation for child fields"
            },
            "Multiple Matches": {
              "type": "select",
              "options": [
                "Include All Matches",
                "Include First Match Only"
              ],
              "description": "Handling multiple matches in data streams"
            },
            "Include Any Unpaired Items": {
              "type": "boolean",
              "description": "Keep or discard unpaired items when merging by position"
            }
          }
        }
      },
      "mergingDataStreams": "The items passed into Input 1 of the Merge node will take precedence.",
      "branchExecution": "<!-- --8<-- \"_snippets/integrations/builtin/core-nodes/merge/if-merge-branch-execution.md\" -->"
    },
    "n8n-nodes-base.n8n": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "n8n",
      "description": "A node to integrate with n8n itself. This node allows you to consume the [n8n API](/api/index.md) in your workflows.",
      "apiDocumentation": "Refer to the [n8n REST API documentation](/api/index.md) for more information on using the n8n API. Refer to [API endpoint reference](/api/api-reference.md) for working with the API endpoints directly.",
      "note": "You can find authentication information for this node in the [API authentication](/api/authentication.md) documentation.",
      "warning": "This node doesn't support SSL. If your server requires an SSL connection, use the [HTTP Request node](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) to call the [n8n API](/api/index.md).\nThe HTTP Request node has options to [provide the SSL certificate](/integrations/builtin/credentials/httprequest.md#provide-an-ssl-certificate).",
      "operations": [
        "Audit",
        "Credential",
        "Execution",
        "Workflow"
      ],
      "Generate audit": {
        "description": "Generate a security audit.",
        "options": {
          "Categories": {
            "type": "multiOptions",
            "options": [
              "Credentials",
              "Database",
              "Filesystem",
              "Instance",
              "Nodes"
            ],
            "description": "Risk categories to include in audit"
          },
          "Days Abandoned Workflow": {
            "type": "number",
            "description": "Days without execution after which workflow is considered abandoned",
            "default": 90
          }
        }
      },
      "Credential": {
        "operations": [
          "Create",
          "Delete",
          "Get Schema"
        ],
        "Create": {
          "parameters": {
            "Name": {
              "type": "string",
              "description": "Name of the credential to create"
            },
            "Credential Type": {
              "type": "string",
              "description": "Type of the credential"
            },
            "Data": {
              "type": "json",
              "description": "Valid JSON object with required properties (use Get Schema to see format)"
            }
          }
        },
        "Delete": {
          "parameters": {
            "Credential ID": {
              "type": "string",
              "description": "ID of the credential to delete"
            }
          }
        },
        "Get Schema": {
          "parameters": {
            "Credential Type": {
              "type": "string",
              "description": "Type of the credential"
            }
          }
        }
      },
      "Execution": {
        "operations": [
          "Get",
          "Get Many",
          "Delete"
        ],
        "Get": {
          "parameters": {
            "Execution ID": {
              "type": "string",
              "description": "ID of the execution to retrieve"
            }
          },
          "options": {
            "Include Execution Details": {
              "type": "boolean",
              "description": "Include detailed execution data"
            }
          }
        },
        "Get Many": {
          "parameters": {
            "Return All": {
              "type": "boolean",
              "description": "Return all results"
            },
            "Limit": {
              "type": "number",
              "description": "Number of results to return (if Return All is off)"
            }
          },
          "filters": {
            "Workflow": {
              "type": "select",
              "options": [
                "From list",
                "By URL",
                "By ID"
              ],
              "description": "Filter executions by workflow",
              "details": {
                "By URL": {
                  "parameters": {
                    "Workflow URL": {
                      "type": "string",
                      "description": "Workflow URL to filter by"
                    }
                  }
                },
                "By ID": {
                  "parameters": {
                    "Workflow ID": {
                      "type": "string",
                      "description": "Workflow ID to filter by"
                    }
                  }
                }
              }
            },
            "Status": {
              "type": "multiOptions",
              "options": [
                "Error",
                "Success",
                "Waiting"
              ],
              "description": "Filter executions by status"
            }
          },
          "options": {
            "Include Execution Details": {
              "type": "boolean",
              "description": "Include detailed execution data"
            }
          }
        },
        "Delete": {
          "parameters": {
            "Execution ID": {
              "type": "string",
              "description": "ID of the execution to delete"
            }
          }
        }
      },
      "Workflow": {
        "operations": [
          "Activate",
          "Create",
          "Deactivate",
          "Delete",
          "Get",
          "Get Many",
          "Update"
        ],
        "Activate, Deactivate, Delete, and Get": {
          "parameters": {
            "Workflow": {
              "type": "select",
              "options": [
                "From list",
                "By URL",
                "By ID"
              ],
              "description": "Workflow to operate on",
              "details": {
                "By URL": {
                  "parameters": {
                    "Workflow URL": {
                      "type": "string",
                      "description": "Workflow URL"
                    }
                  }
                },
                "By ID": {
                  "parameters": {
                    "Workflow ID": {
                      "type": "string",
                      "description": "Workflow ID"
                    }
                  }
                }
              }
            }
          }
        },
        "Create": {
          "parameters": {
            "Workflow Object": {
              "type": "json",
              "description": "Valid JSON object with new workflow details (name, nodes, connections, settings)"
            }
          }
        },
        "Get Many": {
          "parameters": {
            "Return All": {
              "type": "boolean",
              "description": "Return all results"
            },
            "Limit": {
              "type": "number",
              "description": "Number of results to return (if Return All is off)"
            }
          },
          "filters": {
            "Return Only Active Workflows": {
              "type": "boolean",
              "description": "Return only active workflows"
            },
            "Tags": {
              "type": "string",
              "description": "Comma-separated list of tags for returned workflows"
            }
          }
        },
        "Update": {
          "parameters": {
            "Workflow": {
              "type": "select",
              "options": [
                "From list",
                "By URL",
                "By ID"
              ],
              "description": "Workflow to update",
              "details": {
                "By URL": {
                  "parameters": {
                    "Workflow URL": {
                      "type": "string",
                      "description": "Workflow URL"
                    }
                  }
                },
                "By ID": {
                  "parameters": {
                    "Workflow ID": {
                      "type": "string",
                      "description": "Workflow ID"
                    }
                  }
                }
              }
            },
            "Workflow Object": {
              "type": "json",
              "description": "Valid JSON object to update workflow with (name, nodes, connections, settings)"
            }
          }
        }
      }
    },
    "n8n-nodes-base.n8ntrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "n8n Trigger node",
      "description": "The n8n Trigger node triggers when the current workflow updates or activates, or when the n8n instance starts or restarts. You can use the n8n Trigger node to notify when these events occur.",
      "parameters": {
        "Events": {
          "type": "multiOptions",
          "options": [
            "Active Workflow Updated",
            "Instance started",
            "Workflow Activated"
          ],
          "description": "Events to trigger on"
        }
      }
    },
    "n8n-nodes-base.noop": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "No Operation, do nothing",
      "description": "Use the No Operation, do nothing node when you don't want to perform any operations. The purpose of this node is to make the workflow easier to read and understand where the flow of data stops. This can help others visually get a better understanding of the workflow."
    },
    "n8n-nodes-base.readwritefile": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Read/Write Files from Disk",
      "description": "Use the Read/Write Files from Disk node to read and write files from/to the machine where n8n is running.",
      "note": "This node isn't available on n8n Cloud.",
      "operations": [
        "Read File(s) From Disk",
        "Write File to Disk"
      ],
      "Read File(s) From Disk": {
        "parameters": {
          "File(s) Selector": {
            "type": "string",
            "description": "Path of the file(s) to read (supports path patterns)"
          }
        },
        "options": {
          "File Extension": {
            "type": "string",
            "description": "Extension for the output file"
          },
          "File Name": {
            "type": "string",
            "description": "Name for the output file"
          },
          "MIME Type": {
            "type": "string",
            "description": "MIME type of the output file"
          },
          "Put Output File in Field": {
            "type": "string",
            "description": "Field in the output data to contain the file"
          }
        }
      },
      "Write File to Disk": {
        "parameters": {
          "File Path and Name": {
            "type": "string",
            "description": "Destination path, name, and extension for the file"
          },
          "Input Binary Field": {
            "type": "string",
            "description": "Field in the input data containing binary file"
          }
        },
        "options": {
          "Append": {
            "type": "boolean",
            "description": "Append data to an existing file"
          }
        }
      },
      "fileLocations": "If you run n8n in Docker, your command runs in the n8n container and not the Docker host.\n\nThis node looks for files relative to the n8n install path. n8n recommends using absolute file paths to prevent any errors."
    },
    "n8n-nodes-base.renamekeys": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Rename Keys",
      "description": "Use the Rename Keys node to rename the keys of a key-value pair in n8n.",
      "parameters": {
        "Add new key": {
          "type": "repeatable",
          "description": "Rename a key",
          "template": {
            "Current Key Name": {
              "type": "string",
              "description": "Current name of the key to rename"
            },
            "New Key Name": {
              "type": "string",
              "description": "New name for the key"
            }
          }
        }
      },
      "options": {
        "Regex": {
          "type": "boolean",
          "description": "Use regular expression to identify keys to rename",
          "parameters": {
            "Regular Expression": {
              "type": "string",
              "description": "Regular expression to identify keys"
            },
            "Replace With": {
              "type": "string",
              "description": "New name to assign to matching keys"
            },
            "Case Insensitive": {
              "type": "boolean",
              "description": "Regular expression should be case insensitive"
            },
            "Max Depth": {
              "type": "number",
              "description": "Maximum depth to replace keys (-1 for unlimited, 0 for top-level)"
            }
          }
        }
      },
      "warningRegexImpacts": "Using a regular expression can affect any keys that match the expression, including keys you've already renamed."
    },
    "n8n-nodes-base.respondtowebhook": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Respond to Webhook",
      "description": "Use the Respond to Webhook node to control the response to incoming webhooks. This node works with the [Webhook](/integrations/builtin/core-nodes/n8n-nodes-base.webhook/index.md) node.",
      "note": "The Respond to Webhook node runs once, using the first incoming data item. Refer to [Return more than one data item](#return-more-than-one-data-item-deprecated) for more information.",
      "parameters": {
        "Respond With": {
          "type": "select",
          "options": [
            "All Incoming Items",
            "Binary",
            "First Incoming Item",
            "JSON",
            "No Data",
            "Redirect",
            "Text"
          ],
          "description": "Data to send in webhook response",
          "details": {
            "Binary": {
              "parameters": {
                "Response Data Source": {
                  "type": "binaryProperty",
                  "description": "Binary property containing file for response"
                }
              }
            },
            "JSON": {
              "parameters": {
                "Response Body": {
                  "type": "json",
                  "description": "JSON object for response"
                }
              }
            },
            "Redirect": {
              "parameters": {
                "Redirect URL": {
                  "type": "string",
                  "description": "URL to redirect to"
                }
              }
            },
            "Text": {
              "parameters": {
                "Response Body": {
                  "type": "string",
                  "description": "Text for response"
                }
              }
            }
          }
        }
      },
      "options": {
        "Response Code": {
          "type": "number",
          "description": "HTTP response code to use"
        },
        "Response Headers": {
          "type": "keyValuePair",
          "description": "Headers to send in response"
        },
        "Put Response in Field": {
          "type": "string",
          "description": "Field name for response data (All/First Incoming Items)"
        }
      },
      "workflowBehavior": "When using the Respond to Webhook node, workflows behave as follows:\n\n- The workflow finishes without executing the Respond to Webhook node: it returns a standard message with a 200 status.\n- The workflow errors before the first Respond to Webhook node executes: the workflow returns an error message with a 500 status.\n- A second Respond to Webhook node executes after the first one: the workflow ignores it.\n- A Respond to Webhook node executes but there was no webhook: the workflow ignores the Respond to Webhook node."
    },
    "n8n-nodes-base.rssfeedread": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "RSS Read",
      "description": "Use the RSS Read node to read data from RSS feeds published on the internet.",
      "parameters": {
        "URL": {
          "type": "string",
          "description": "URL for the RSS publication"
        }
      },
      "options": {
        "Ignore SSL Issues": {
          "type": "boolean",
          "description": "Ignore SSL/TLS verification failures"
        }
      },
      "relatedResources": "n8n provides a trigger node for RSS Read. You can find the trigger node docs [here](/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedreadtrigger.md)."
    },
    "n8n-nodes-base.rssfeedreadtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "RSS Feed Trigger node",
      "description": "The RSS Feed Trigger node allows you to start an n8n workflow when a new RSS feed item has been published.",
      "parameters": {
        "Poll Times": {
          "type": "pollTimes",
          "description": "Polling schedule configuration"
        },
        "Feed URL": {
          "type": "string",
          "description": "URL of the RSS feed to poll"
        }
      },
      "templatesAndExamples": "<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'rss-feed-trigger') ]]",
      "relatedResources": "n8n provides an app node for RSS Feeds. You can find the node docs [here](/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedread.md)."
    },
    "n8n-nodes-base.sendemail": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Send Email",
      "description": "The Send Email node sends emails using an SMTP email server.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/sendemail/index.md).",
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "smtpEmail",
          "description": "SMTP account credential to connect with"
        },
        "From Email": {
          "type": "string",
          "description": "Email address to send from (Name <email@sample.com> format supported)"
        },
        "To Email": {
          "type": "string",
          "description": "Email address to send to (Name <email@sample.com> format supported)"
        },
        "Subject": {
          "type": "string",
          "description": "Subject line for the email"
        },
        "Email Format": {
          "type": "select",
          "options": [
            "Text",
            "HTML",
            "Both"
          ],
          "description": "Format to send the email in"
        }
      },
      "options": {
        "Append n8n Attribution": {
          "type": "boolean",
          "description": "Include 'This email was sent automatically with n8n' attribution"
        },
        "Attachments": {
          "type": "string",
          "description": "Comma-separated list of binary properties for attachments"
        },
        "CC Email": {
          "type": "email",
          "description": "Email address for the cc: field"
        },
        "BCC Email": {
          "type": "email",
          "description": "Email address for the bcc: field"
        },
        "Ignore SSL Issues": {
          "type": "boolean",
          "description": "Ignore TLS/SSL certificate validation failures"
        },
        "Reply To": {
          "type": "email",
          "description": "Email address for the Reply To field"
        }
      }
    },
    "n8n-nodes-base.set": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Edit Fields (Set)",
      "description": "Use the Edit Fields node to set workflow data. This node can set new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values to Google Sheets or databases.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "Manual Mapping",
            "JSON Output"
          ],
          "description": "Mode for setting fields"
        },
        "Fields to Set": {
          "type": "keyValuePair",
          "description": "Fields to set manually",
          "manualMapping": true
        },
        "Keep Only Set Fields": {
          "type": "boolean",
          "description": "Discard input data not used in Fields to Set"
        },
        "Include in Output": {
          "type": "select",
          "options": [
            "All Input Fields",
            "Only Set Fields"
          ],
          "description": "Input data to include in output"
        }
      },
      "options": {
        "Include Binary Data": {
          "type": "boolean",
          "description": "Include binary data in output"
        },
        "Ignore Type Conversion Errors": {
          "type": "boolean",
          "description": "Ignore data type errors when mapping fields (Manual Mapping only)"
        },
        "Support Dot Notation": {
          "type": "boolean",
          "description": "Support dot notation for nested fields"
        }
      },
      "arraysAndExpressions": "You can use arrays and expressions when creating your JSON Output."
    },
    "n8n-nodes-base.sort": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "Sort",
      "description": "Use the Sort node to organize lists of items in a desired ordering, or generate a random selection.",
      "note": "The Sort operation uses the default JavaScript operation where the elements to be sorted are converted into strings and their values compared. Refer to [Mozilla's guide to Array sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort){:target=_blank .external-link} to learn more.",
      "parameters": {
        "Type": {
          "type": "select",
          "options": [
            "Simple",
            "Random",
            "Code"
          ],
          "description": "Type of sorting input"
        },
        "Simple": {
          "parameters": {
            "Add Field To Sort By": {
              "type": "repeatable",
              "description": "Fields to sort by",
              "template": {
                "Field Name": {
                  "type": "string",
                  "description": "Field name to sort by"
                },
                "Order": {
                  "type": "select",
                  "options": [
                    "Ascending",
                    "Descending"
                  ],
                  "description": "Sort order"
                }
              }
            }
          }
        },
        "Code": {
          "parameters": {
            "Code": {
              "type": "code",
              "description": "Custom JavaScript code for sorting"
            }
          }
        }
      },
      "options": {
        "Simple": {
          "options": {
            "Disable Dot Notation": {
              "type": "boolean",
              "description": "Disable dot notation for child fields"
            }
          }
        }
      }
    },
    "n8n-nodes-base.splitinbatches": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Loop Over Items (Split in Batches)",
      "description": "The Loop Over Items node helps you loop through data.",
      "usage": "By default, n8n nodes process input items one at a time. Depending on what you're trying to achieve, you often don't need the Loop Over Items node in your workflow. You can learn more about how n8n processes multiple items on the [looping in n8n](/flow-logic/looping.md) page.\n\nIn particular, these two sections are of particular interest to the Loop Over Items node:\n\n* [Loop until all items are processed](/flow-logic/looping.md#loop-until-all-items-are-processed): describes how the Loop Over Items node differs from normal item processing and when you might want to incorporate this node.\n* [Node exceptions](/flow-logic/looping.md#node-exceptions): outlines specific cases and nodes where you may need to use the Loop Over Items node to manually build looping logic.",
      "parameters": {
        "Batch Size": {
          "type": "number",
          "description": "Number of items to return with each call"
        }
      },
      "options": {
        "Reset": {
          "type": "boolean",
          "description": "Reset with current input-data newly initialized with each loop"
        }
      }
    },
    "n8n-nodes-base.splitout": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Split Out",
      "description": "Use the Split Out node to separate a single data item containing a list into multiple items. For example, a list of customers, and you want to split them so that you have an item for each customer.",
      "parameters": {
        "Field to Split Out": {
          "type": "string",
          "description": "Field containing list to separate out"
        },
        "Include": {
          "type": "select",
          "options": [
            "No Other Fields",
            "All Other Fields",
            "Selected Other Fields"
          ],
          "description": "Fields to include from input data",
          "details": {
            "Selected Other Fields": {
              "parameters": {
                "Fields to Include": {
                  "type": "string",
                  "description": "Comma separated list of fields to include"
                }
              }
            }
          }
        }
      },
      "options": {
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disable dot notation for child fields"
        },
        "Destination Field Name": {
          "type": "string",
          "description": "Field to put split field contents in output"
        },
        "Include Binary": {
          "type": "boolean",
          "description": "Include binary data from input"
        }
      }
    },
    "n8n-nodes-base.ssetrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "SSE Trigger node",
      "description": "Server-Sent Events (SSE) is a server push technology enabling a client to receive automatic updates from a server using HTTP connection. The SSE Trigger node is used to receive server-sent events.",
      "parameters": {
        "URL": {
          "type": "string",
          "description": "URL from which to receive server-sent events (SSE)"
        }
      }
    },
    "n8n-nodes-base.ssh": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "SSH",
      "description": "The SSH node is useful for executing commands using the Secure Shell Protocol.",
      "note": "You can find authentication information for this node [here](/integrations/builtin/credentials/ssh.md).",
      "operations": [
        "Execute Command",
        "Download File",
        "Upload File"
      ],
      "Execute Command": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ssh",
            "description": "SSH credential to connect with"
          },
          "Command": {
            "type": "string",
            "description": "Command to execute on the remote device"
          },
          "Working Directory": {
            "type": "string",
            "description": "Directory to execute the command in"
          }
        }
      },
      "Download File": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ssh",
            "description": "SSH credential to connect with"
          },
          "Path": {
            "type": "string",
            "description": "Path of the file to download (includes filename)"
          },
          "File Property": {
            "type": "string",
            "description": "Object property holding binary data to download"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "Override binary data file name"
          }
        }
      },
      "Upload File": {
        "parameters": {
          "Credential to connect with": {
            "type": "credential",
            "credentialType": "ssh",
            "description": "SSH credential to connect with"
          },
          "Input Binary Field": {
            "type": "string",
            "description": "Input binary field containing file to upload"
          },
          "Target Directory": {
            "type": "string",
            "description": "Directory to upload the file to"
          }
        },
        "options": {
          "File Name": {
            "type": "string",
            "description": "Override binary data file name"
          }
        }
      }
    },
    "n8n-nodes-base.stopanderror": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Stop And Error",
      "description": "Use the Stop And Error node to display custom error messages, cause executions to fail under certain conditions, and send custom error information to error workflows.",
      "operations": [
        "Error Message",
        "Error Object"
      ],
      "parameters": {
        "Error Type": {
          "type": "select",
          "options": [
            "Error Message",
            "Error Object"
          ],
          "description": "Type of error to throw"
        },
        "Error Message": {
          "parameters": {
            "Error Message Input": {
              "type": "string",
              "description": "Message to throw"
            }
          }
        },
        "Error Object": {
          "parameters": {
            "Error Object JSON": {
              "type": "json",
              "description": "JSON object containing error properties"
            }
          }
        }
      },
      "relatedResources": "You can use the Stop And Error node with the [Error trigger](/integrations/builtin/core-nodes/n8n-nodes-base.errortrigger.md) node.\n\nRead more about [Error workflows](/flow-logic/error-handling.md) in n8n workflows."
    },
    "n8n-nodes-base.summarize": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Summarize",
      "description": "Use the Summarize node to aggregate items together, in a manner similar to Excel pivot tables.",
      "parameters": {
        "Fields to Summarize": {
          "type": "repeatable",
          "description": "Fields to summarize",
          "template": {
            "Aggregation": {
              "type": "select",
              "options": [
                "Append",
                "Average",
                "Concatenate",
                "Count",
                "Count Unique",
                "Max",
                "Min",
                "Sum"
              ],
              "description": "Aggregation method"
            },
            "Field": {
              "type": "string",
              "description": "Field to perform aggregation on"
            },
            "Include Empty Values": {
              "type": "boolean",
              "description": "Include empty values in aggregation (for Append and Concatenate)"
            },
            "Separator": {
              "type": "select",
              "options": [
                "Comma",
                "Newline",
                "Space",
                "Tab"
              ],
              "description": "Separator for concatenation"
            }
          }
        },
        "Fields to Split By": {
          "type": "string",
          "description": "Fields to split the summary by (comma-separated)"
        }
      },
      "options": {
        "Continue if Field Not Found": {
          "type": "boolean",
          "description": "Continue and return empty item if field not found"
        },
        "Disable Dot Notation": {
          "type": "boolean",
          "description": "Disable dot notation for child fields"
        },
        "Output Format": {
          "type": "select",
          "options": [
            "Each Split in a Separate Item",
            "All Splits in a Single Item"
          ],
          "description": "Output format for splits"
        },
        "Ignore items without valid fields to group by": {
          "type": "boolean",
          "description": "Ignore input items without Fields to Split By"
        }
      }
    },
    "n8n-nodes-base.switch": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Switch",
      "description": "Use the Switch node to route a workflow conditionally based on comparison operations. It's similar to the [IF](/integrations/builtin/core-nodes/n8n-nodes-base.if.md) node, but supports multiple output routes.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "Rules",
            "Expression"
          ],
          "description": "Mode for switch node operation"
        },
        "Rules": {
          "parameters": {
            "Routing Rules": {
              "type": "group",
              "description": "Routing rules to define comparison conditions",
              "repeatable": true,
              "template": {
                "DataType": {
                  "type": "selectDataType",
                  "description": "Data type and comparison operation type"
                }
              }
            },
            "Rename Output": {
              "type": "boolean",
              "description": "Rename the output field",
              "parameters": {
                "Output Name": {
                  "type": "string",
                  "description": "Desired output name"
                }
              }
            }
          }
        },
        "Expression": {
          "parameters": {
            "Number of Outputs": {
              "type": "number",
              "description": "Number of outputs for the node"
            },
            "Output Index": {
              "type": "string",
              "description": "Expression to calculate output index (must return a number)"
            }
          }
        }
      },
      "options": {
        "Rules": {
          "options": {
            "Fallback Output": {
              "type": "select",
              "options": [
                "None",
                "Extra Output",
                "Output 0"
              ],
              "description": "Fallback output for non-matching items"
            },
            "Ignore Case": {
              "type": "boolean",
              "description": "Ignore letter case in conditions"
            },
            "Less Strict Type Validation": {
              "type": "boolean",
              "description": "Attempt to convert value types based on operator"
            },
            "Send data to all matching outputs": {
              "type": "boolean",
              "description": "Send data to all outputs meeting conditions"
            }
          }
        }
      },
      "relatedResources": "Refer to [Splitting with conditionals](/flow-logic/splitting.md) for more information on using conditionals to create complex logic in n8n."
    },
    "n8n-nodes-base.totp": {
      "contentType": [
        "integration",
        "reference"
      ],
      "title": "TOTP",
      "description": "The TOTP node provides a way to generate a TOTP (time-based one-time password).",
      "note": "Refer to [TOTP credentials](/integrations/builtin/credentials/totp.md) for guidance on setting up authentication.",
      "parameters": {
        "Credential to connect with": {
          "type": "credential",
          "credentialType": "totp",
          "description": "TOTP credential to connect with"
        },
        "Operation": {
          "type": "select",
          "options": [
            "Generate Secret"
          ],
          "description": "Operation to perform"
        }
      },
      "options": {
        "Algorithm": {
          "type": "select",
          "options": [
            "SHA1",
            "SHA256",
            "SHA512"
          ],
          "description": "HMAC hashing algorithm",
          "default": "SHA1"
        },
        "Digits": {
          "type": "number",
          "description": "Number of digits in generated code",
          "default": 6
        },
        "Period": {
          "type": "number",
          "description": "Validity period of TOTP in seconds",
          "default": 30
        }
      }
    },
    "n8n-nodes-base.wait": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "critical",
      "title": "Wait",
      "description": "Use the Wait node pause your workflow's execution. When the workflow pauses it offloads the execution data to the database. When the resume condition is met, the workflow reloads the data and the execution continues.",
      "operations": [
        "After Time Interval",
        "At Specified Time",
        "On Webhook Call",
        "On Form Submitted"
      ],
      "After Time Interval": {
        "parameters": {
          "Wait Amount": {
            "type": "number",
            "description": "Amount of time to wait"
          },
          "Wait Unit": {
            "type": "select",
            "options": [
              "Seconds",
              "Minutes",
              "Hours",
              "Days"
            ],
            "description": "Unit of measure for wait amount"
          }
        }
      },
      "At Specified Time": {
        "parameters": {
          "Date and Time": {
            "type": "datetime",
            "description": "Date and time to wait until"
          }
        }
      },
      "On Webhook Call": {
        "parameters": {
          "Authentication": {
            "type": "select",
            "options": [
              "Basic Auth",
              "Header Auth",
              "JWT Auth",
              "None"
            ],
            "description": "Authentication for incoming resume-webhook-requests"
          },
          "Basic Auth": {
            "parameters": {
              "Credential for Basic Auth": {
                "type": "credential",
                "credentialType": "httpBasicAuth",
                "description": "Basic authentication credential"
              }
            }
          },
          "Header Auth": {
            "parameters": {
              "Credential for Header Auth": {
                "type": "credential",
                "credentialType": "httpHeaderAuth",
                "description": "Header authentication credential"
              }
            }
          },
          "JWT Auth": {
            "parameters": {
              "Credential for JWT Auth": {
                "type": "credential",
                "credentialType": "jwt",
                "description": "JWT authentication credential"
              }
            }
          },
          "HTTP Method": {
            "type": "select",
            "options": [
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT"
            ],
            "description": "HTTP method for webhook"
          },
          "Response Code": {
            "type": "number",
            "description": "HTTP response code for webhook"
          },
          "Respond": {
            "type": "select",
            "options": [
              "Immediately",
              "When Last Node Finishes",
              "Using 'Respond to Webhook' Node"
            ],
            "description": "How and when to respond to webhook",
            "details": {
              "When Last Node Finishes": {
                "parameters": {
                  "Response Data": {
                    "type": "select",
                    "options": [
                      "All Entries",
                      "First Entry JSON",
                      "First Entry Binary",
                      "No Response Body"
                    ],
                    "description": "Data to return in response"
                  }
                }
              }
            }
          },
          "Limit Wait Time": {
            "type": "boolean",
            "description": "Automatically resume execution after a limit",
            "parameters": {
              "Limit Type": {
                "type": "select",
                "options": [
                  "After Time Interval",
                  "At Specified Time"
                ],
                "description": "Type of wait time limit",
                "details": {
                  "After Time Interval": {
                    "parameters": {
                      "Amount": {
                        "type": "number",
                        "description": "Amount of time to wait"
                      },
                      "Unit": {
                        "type": "select",
                        "options": [
                          "Seconds",
                          "Minutes",
                          "Hours",
                          "Days"
                        ],
                        "description": "Unit of time for the limit"
                      }
                    }
                  },
                  "At Specified Time": {
                    "parameters": {
                      "Max Date and Time": {
                        "type": "datetime",
                        "description": "Specified time the node should resume"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "options": {
          "On Webhook Call": {
            "options": {
              "Binary Property": {
                "type": "string",
                "description": "Binary property to write received file data to"
              },
              "Ignore Bots": {
                "type": "boolean",
                "description": "Ignore requests from bots"
              },
              "IP(s) Whitelist": {
                "type": "string",
                "description": "Comma-separated list of allowed IP addresses"
              },
              "No Response Body": {
                "type": "boolean",
                "description": "Prevent n8n from sending a response body"
              },
              "Raw Body": {
                "type": "boolean",
                "description": "Return body in a raw format (JSON/XML)"
              },
              "Response Data": {
                "type": "string",
                "description": "Custom data to send in response"
              },
              "Response Headers": {
                "type": "keyValuePair",
                "description": "Additional headers to send in response"
              },
              "Webhook Suffix": {
                "type": "string",
                "description": "Suffix to append to resume URL for unique URLs"
              }
            }
          }
        }
      },
      "On Form Submitted": {
        "parameters": {
          "Form Title": {
            "type": "string",
            "description": "Title to display at the top of the form"
          },
          "Form Description": {
            "type": "string",
            "description": "Description to display beneath the form title"
          },
          "Form Fields": {
            "type": "repeatable",
            "description": "Fields to appear on the form",
            "template": {
              "Field Label": {
                "type": "string",
                "description": "Label for the form field"
              },
              "Field Type": {
                "type": "select",
                "options": [
                  "Date",
                  "Dropdown List",
                  "Number",
                  "Password",
                  "Text",
                  "Textarea"
                ],
                "description": "Type of form field"
              },
              "Dropdown List": {
                "parameters": {
                  "Field Options": {
                    "type": "repeatable",
                    "description": "Dropdown options",
                    "template": {
                      "Field Option": {
                        "type": "string",
                        "description": "Option for the dropdown list"
                      }
                    }
                  },
                  "Multiple Choice": {
                    "type": "boolean",
                    "description": "Allow multiple choices in dropdown"
                  }
                }
              },
              "Required Field": {
                "type": "boolean",
                "description": "Field must be completed to submit form"
              }
            }
          },
          "Respond When": {
            "type": "select",
            "options": [
              "Form Is Submitted",
              "Workflow Finishes",
              "Using 'Respond to Webhook' Node"
            ],
            "description": "When to respond to form submission"
          },
          "Limit Wait Time": {
            "type": "boolean",
            "description": "Automatically resume execution after a limit",
            "parameters": {
              "Limit Type": {
                "type": "select",
                "options": [
                  "After Time Interval",
                  "At Specified Time"
                ],
                "description": "Type of wait time limit",
                "details": {
                  "After Time Interval": {
                    "parameters": {
                      "Amount": {
                        "type": "number",
                        "description": "Amount of time to wait"
                      },
                      "Unit": {
                        "type": "select",
                        "options": [
                          "Seconds",
                          "Minutes",
                          "Hours",
                          "Days"
                        ],
                        "description": "Unit of time for the limit"
                      }
                    }
                  },
                  "At Specified Time": {
                    "parameters": {
                      "Max Date and Time": {
                        "type": "datetime",
                        "description": "Specified time the node should resume"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "options": {
          "On Form Response": {
            "options": {
              "Form Response": {
                "type": "select",
                "options": [
                  "Form Submitted Text",
                  "Redirect URL"
                ],
                "description": "How and what you want the form to Respond With",
                "details": {
                  "Form Submitted Text": {
                    "parameters": {
                      "Text to Show": {
                        "type": "string",
                        "description": "Text to display after user fills out form"
                      }
                    }
                  },
                  "Redirect URL": {
                    "parameters": {
                      "URL to Redirect to": {
                        "type": "string",
                        "description": "URL to redirect to after form submission"
                      }
                    }
                  }
                }
              },
              "Webhook Suffix": {
                "type": "string",
                "description": "Suffix to append to resume URL for unique URLs"
              }
            }
          }
        }
      },
      "timeBasedOperations": "For the time-based resume operations, note that:\n\n* For wait times less than 65 seconds, the workflow doesn't offload execution data to the database. Instead, the process continues to run and the execution resumes after the specified interval passes.\n* The n8n server time is always used regardless of the timezone setting. Workflow timezone settings, and any changes made to them, don't affect the Wait node interval or specified time."
    },
    "n8n-nodes-base.workflowtrigger": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "high",
      "title": "Workflow Trigger node",
      "description": "The Workflow Trigger node gets triggered when a workflow is updated or activated.",
      "warning": "n8n has deprecated the Workflow Trigger node and moved its functionality to the [n8n Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.n8ntrigger.md).",
      "note": "If you want to use the Workflow Trigger node for a workflow, add the node to the workflow. You don't have to create a separate workflow.",
      "parameters": {
        "Events": {
          "type": "multiOptions",
          "options": [
            "Active Workflow Updated",
            "Workflow Activated"
          ],
          "description": "Events to trigger on"
        }
      }
    },
    "n8n-nodes-base.xml": {
      "contentType": [
        "integration",
        "reference"
      ],
      "priority": "medium",
      "title": "XML",
      "description": "Use the XML node to convert data from and to XML.",
      "note": "If your XML is within a binary file, use the [Extract from File](/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile.md) node to convert it to text first.",
      "parameters": {
        "Mode": {
          "type": "select",
          "options": [
            "JSON to XML",
            "XML to JSON"
          ],
          "description": "Format for data conversion"
        },
        "Property Name": {
          "type": "string",
          "description": "Property containing data to convert"
        }
      },
      "options": {
        "Attribute Key": {
          "type": "string",
          "description": "Prefix used to access attributes",
          "default": "$"
        },
        "Character Key": {
          "type": "string",
          "description": "Prefix used to access character content",
          "default": "_"
        },
        "JSON to XML": {
          "options": {
            "Allow Surrogate Chars": {
              "type": "boolean",
              "description": "Allow using characters from Unicode surrogate blocks"
            },
            "Cdata": {
              "type": "boolean",
              "description": "Wrap text nodes in <![CDATA[ ... ]]>"
            },
            "Headless": {
              "type": "boolean",
              "description": "Omit the XML header"
            },
            "Root Name": {
              "type": "string",
              "description": "Root element name to use"
            }
          }
        },
        "XML to JSON": {
          "options": {
            "Explicit Array": {
              "type": "boolean",
              "description": "Put child nodes in an array"
            },
            "Explicit Root": {
              "type": "boolean",
              "description": "Get the root node in the resulting object"
            },
            "Ignore Attributes": {
              "type": "boolean",
              "description": "Ignore all XML attributes"
            },
            "Merge Attributes": {
              "type": "boolean",
              "description": "Merge attributes and child elements as properties"
            },
            "Normalize": {
              "type": "boolean",
              "description": "Trim whitespaces inside text nodes"
            },
            "Normalize Tags": {
              "type": "boolean",
              "description": "Normalize all tag names to lowercase"
            },
            "Trim": {
              "type": "boolean",
              "description": "Trim whitespace at start/end of text nodes"
            }
          }
        }
      }
    },
    "n8n-nodes-base.code": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Code node",
        "description": "<!-- --8<-- \"_snippets/integrations/builtin/core-nodes/code-node.md\" -->"
      },
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Code node common issues",
        "description": "Here are some common errors and issues with the [Code node](/integrations/builtin/core-nodes/n8n-nodes-base.code/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Code doesn't return items properly",
          "A 'json' property isn't an object",
          "Code doesn't return an object",
          "'import' and 'export' may only appear at the top level",
          "Cannot find module '<module>'",
          "Using global variables"
        ]
      },
      "keyboard-shortcuts": {
        "contentType": "reference",
        "title": "Code editor keyboard shortcuts",
        "description": "A list of the keyboard shortcuts, for multiple platforms, which are supported by the Code node editor.",
        "priority": "high",
        "sections": [
          "Cursor Movement",
          "Selection",
          "Basic Operations",
          "Delete Operations",
          "Line Operations",
          "Autocomplete",
          "Indentation",
          "Code Folding",
          "Multi-cursor",
          "Formatting",
          "Search & Navigation"
        ]
      }
    },
    "n8n-nodes-base.executecommand": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Execute Command",
        "description": "The Execute Command node runs shell commands on the host machine that runs n8n.",
        "noteWhichShell": "This node executes the command in the default shell of the host machine. For example, `cmd` on Windows and `zsh` on macOS.\n\nIf you run n8n with Docker, your command will run in the n8n container and not the Docker host.",
        "noteNotAvailableCloud": "This node isn't available on n8n Cloud.",
        "parameters": {
          "Execute Once": {
            "type": "boolean",
            "description": "Execute only once or per input item"
          },
          "Command": {
            "type": "string",
            "description": "Command to execute on the host machine"
          }
        },
        "runMultipleCommands": "Use one of two methods to run multiple commands in one Execute Command node:\n\n* Enter each command on one line separated by `&&`.\n* Enter each command on a separate line.",
        "runCurlCommand": "You can also use the [HTTP Request](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) node to make a cURL request.\n\nIf you want to run the curl command in the Execute Command node, you will have to build a Docker image based on the existing n8n image. The default n8n Docker image uses Alpine Linux. You will have to install the curl package."
      },
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Execute Command node common issues",
        "description": "Here are some common errors and issues with the [Execute Command node](/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Command failed: <command> /bin/sh: <command>: not found",
          "Error: stdout maxBuffer length exceeded"
        ]
      }
    },
    "n8n-nodes-base.httprequest": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "HTTP Request node",
        "description": "The HTTP Request node is one of the most versatile nodes in n8n. It allows you to make HTTP requests to query data from any app or service with a REST API.",
        "apiTerminology": "When using this node, you're creating a REST API call. You need some understanding of basic API terminology and concepts.",
        "waysToCreateRequest": [
          "configure node parameters",
          "import a curl command"
        ],
        "noteCredentials": "Refer to [HTTP Request credentials](/integrations/builtin/credentials/httprequest.md) for guidance on setting up authentication."
      },
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "HTTP Request node common issues",
        "description": "Here are some common errors and issues with the [HTTP Request node](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Bad request - please check your parameters",
          "The resource you are requesting could not be found",
          "JSON parameter need to be an valid JSON",
          "Forbidden - perhaps check your credentials",
          "429 - The service is receiving too many requests from you"
        ],
        "solutions429Error": {
          "batching": "Use this option to send requests in batches and introduce a delay between them.",
          "retryOnFail": "Use this option to retry the node after a failed attempt."
        }
      }
    },
    "n8n-nodes-base.removeduplicates": {
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "medium",
        "title": "Remove Duplicates node",
        "description": "Use the Remove Duplicates node to identify and delete items that are:\n\n* identical across all fields or a subset of fields in a single execution\n* identical to or surpassed by items seen in previous executions\n\nThis is helpful in situations where you can end up with duplicate data, such as a user creating multiple accounts, or a customer submitting the same order multiple times. When working with large datasets it becomes more difficult to spot and remove these items.\n\nBy comparing against data from previous executions, the Remove Duplicates node can  delete items seen in earlier executions. It can also ensure that new items have a later date or a higher value than previous values.",
        "noteMajorChanges": "The n8n team overhauled this node in n8n 1.64.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document [here](https://github.com/n8n-io/n8n-docs/blob/7a66308290e6e5b104fcb82a3beafa0d6987df36/docs/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates.md){:target=_blank .external-link}.",
        "operationModes": [
          "Remove Items Repeated Within Current Input",
          "Remove Items Processed in Previous Executions",
          "Clear Deduplication History"
        ],
        "Remove Items Repeated Within Current Input": {
          "parameters": {
            "Compare": {
              "type": "select",
              "options": [
                "All Fields",
                "All Fields Except",
                "Selected Fields"
              ],
              "description": "Fields of input data to compare"
            }
          },
          "options": {
            "Disable Dot Notation": {
              "type": "boolean",
              "description": "Disable dot notation for child fields"
            },
            "Remove Other Fields": {
              "type": "boolean",
              "description": "Remove fields not used in comparison"
            }
          }
        },
        "Remove Items Processed in Previous Executions": {
          "parameters": {
            "Keep Items Where": {
              "type": "select",
              "options": [
                "Value Is New",
                "Value Is Higher than Any Previous Value",
                "Value Is a Date Later than Any Previous Date"
              ],
              "description": "Criteria for keeping items"
            },
            "Value to Dedupe On": {
              "type": "string",
              "description": "Input field(s) to compare based on Keep Items Where"
            }
          },
          "options": {
            "Scope": {
              "type": "select",
              "options": [
                "Node",
                "Workflow"
              ],
              "description": "Scope for deduplication data storage"
            },
            "History Size": {
              "type": "number",
              "description": "Number of items to store for duplicate tracking (Value Is New only)"
            }
          }
        },
        "Clear Deduplication History": {
          "parameters": {
            "Mode": {
              "type": "select",
              "options": [
                "Clean Database"
              ],
              "description": "Mode for managing stored items"
            }
          },
          "options": {
            "Scope": {
              "type": "select",
              "options": [
                "Node",
                "Workflow"
              ],
              "description": "Scope for managing deduplication database"
            }
          }
        }
      },
      "templates-and-examples": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "medium",
        "title": "Remove Duplicates node templates and Examples",
        "description": "Documentation for templates and examples in the Remove Duplicates node in n8n, a workflow automation platform. Includes templates using the node and examples of how to use it."
      }
    },
    "n8n-nodes-base.scheduletrigger": {
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Schedule Trigger node common issues",
        "description": "Here are some common errors and issues with the [Schedule Trigger node](/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Invalid cron expression",
          "Scheduled workflows run at the wrong time",
          "Variables not working as expected",
          "Changing the trigger interval"
        ]
      },
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Schedule Trigger node",
        "description": "Use the Schedule Trigger node to run workflows at fixed intervals and times. This works in a similar way to the Cron software utility in Unix-like systems.",
        "note": "If a workflow uses the Schedule node as a trigger, make sure that you save and activate the workflow.",
        "parameters": {
          "Trigger Rules": {
            "type": "group",
            "description": "Schedule trigger rules",
            "repeatable": true,
            "template": {
              "Trigger Interval": {
                "type": "select",
                "options": [
                  "Seconds",
                  "Minutes",
                  "Hours",
                  "Days",
                  "Weeks",
                  "Months",
                  "Custom (Cron)"
                ],
                "description": "Time interval unit of measure"
              },
              "Seconds": {
                "parameters": {
                  "Seconds Between Triggers": {
                    "type": "number",
                    "description": "Seconds between each trigger"
                  }
                }
              },
              "Minutes": {
                "parameters": {
                  "Minutes Between Triggers": {
                    "type": "number",
                    "description": "Minutes between each trigger"
                  }
                }
              },
              "Hours": {
                "parameters": {
                  "Hours Between Triggers": {
                    "type": "number",
                    "description": "Hours between each trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Days": {
                "parameters": {
                  "Days Between Triggers": {
                    "type": "number",
                    "description": "Days between each trigger"
                  },
                  "Trigger at Hour": {
                    "type": "selectHour",
                    "description": "Hour of the day to trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Weeks": {
                "parameters": {
                  "Weeks Between Triggers": {
                    "type": "number",
                    "description": "Weeks between each trigger"
                  },
                  "Trigger on Weekdays": {
                    "type": "multiOptions",
                    "options": [
                      "Monday",
                      "Tuesday",
                      "Wednesday",
                      "Thursday",
                      "Friday",
                      "Saturday",
                      "Sunday"
                    ],
                    "description": "Day(s) of the week to trigger"
                  },
                  "Trigger at Hour": {
                    "type": "selectHour",
                    "description": "Hour of the day to trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Months": {
                "parameters": {
                  "Months Between Triggers": {
                    "type": "number",
                    "description": "Months between each trigger"
                  },
                  "Trigger at Day of Month": {
                    "type": "number",
                    "description": "Day of the month to trigger (1-31)"
                  },
                  "Trigger at Hour": {
                    "type": "selectHour",
                    "description": "Hour of the day to trigger"
                  },
                  "Trigger at Minute": {
                    "type": "number",
                    "description": "Minute past the hour to trigger (0-59)"
                  }
                }
              },
              "Custom (Cron)": {
                "parameters": {
                  "Expression": {
                    "type": "cronExpression",
                    "description": "Custom cron expression for schedule"
                  }
                }
              }
            }
          }
        },
        "customCronIntervalExamples": {
          "everyXSeconds": "`*/10 * * * * *` - Every 10 seconds.",
          "everyXMinutes": "`*/5 * * * *` - Every 5 minutes.",
          "hourly": "`0 * * * *` - Every hour on the hour.",
          "daily": "`0 6 * * *` - At 6:00 AM every day.",
          "weekly": "`0 12 * * 1` - At noon every Monday.",
          "monthly": "`0 0 1 * *` - At midnight on the 1st of every month.",
          "everyXDays": "`0 0 */3 * *` - At midnight every 3rd day.",
          "onlyWeekdays": "`0 9 * * 1-5` - At 9:00 AM Monday through Friday.",
          "customHourlyRange": "`0 9-17 * * *` - Every hour from 9:00 AM to 5:00 PM every day.",
          "quarterly": "`0 0 1 1,4,7,10 *` - At midnight on the 1st of January, April, July, and October."
        },
        "warningVariablesInCron": "While variables can be used in the scheduled trigger, their values only get evaluated when the workflow is activated. If you alter a variable's value in the settings after a workflow is activated, the changes won't alter the cron schedule. To re-evaluate the variable, set the workflow to **Inactive** and then back to **Active** again"
      }
    },
    "n8n-nodes-base.webhook": {
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Webhook node common issues",
        "description": "Here are some common issues and questions for the [Webhook node](/integrations/builtin/core-nodes/n8n-nodes-base.webhook/index.md) and suggested solutions.",
        "issues": [
          "Listen for multiple HTTP methods",
          "Use the HTTP Request node to trigger the Webhook node",
          "Use curl to trigger the Webhook node",
          "Send a response of type string",
          "Test URL versus Production URL",
          "IPs in Whitelist are failing to connect"
        ]
      },
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Webhook node",
        "description": "Use the Webhook node to create [webhooks](https://en.wikipedia.org/wiki/Webhook){:target=_blank .external-link}, which can receive data from apps and services when an event occurs. It's a trigger node, which means it can start an n8n workflow. This allows services to connect to n8n and run a workflow.",
        "usage": "You can use the Webhook node as a trigger for a workflow when you want to receive data and run a workflow based on the data. The Webhook node also supports returning the data generated at the end of a workflow. This makes it useful for building a workflow to process data and return the results, like an API endpoint.",
        "workflowDevelopmentProcess": "n8n provides different **Webhook URL**s for testing and production. The testing URL includes an option to **Listen for test event**. Refer to [Workflow development](/integrations/builtin/core-nodes/n8n-nodes-base.webhook/workflow-development.md) for more information on building, testing, and shifting your Webhook node to production.",
        "parameters": {
          "Webhook URLs": {
            "type": "urls",
            "description": "Test and Production Webhook URLs"
          },
          "HTTP Method": {
            "type": "selectHttpMethod",
            "description": "HTTP Request Method",
            "noteMaxPayload": "The webhook maximum payload size is 16MB. If you're self-hosting n8n, you can change this using the [endpoint environment variable](/hosting/configuration/environment-variables/endpoints.md) `N8N_PAYLOAD_SIZE_MAX`."
          },
          "Path": {
            "type": "string",
            "description": "Webhook URL path (supports route parameters)"
          },
          "Authentication": {
            "type": "selectAuthentication",
            "description": "Authentication method for webhook access"
          },
          "Respond": {
            "type": "select",
            "options": [
              "Immediately",
              "When Last Node Finishes",
              "Using 'Respond to Webhook' Node"
            ],
            "description": "How and when to respond to webhook calls"
          },
          "Response Code": {
            "type": "number",
            "description": "HTTP response code for successful execution"
          },
          "Response Data": {
            "type": "select",
            "options": [
              "All Entries",
              "First Entry JSON",
              "First Entry Binary",
              "No Response Body"
            ],
            "description": "Data to include in response body (When Last Node Finishes only)"
          }
        },
        "options": {
          "Allowed Origins (CORS)": {
            "type": "string",
            "description": "Permitted cross-origin domains (CORS)"
          },
          "Binary Property": {
            "type": "string",
            "description": "Binary property to write received file data to"
          },
          "Ignore Bots": {
            "type": "boolean",
            "description": "Ignore requests from bots"
          },
          "IP(s) Whitelist": {
            "type": "string",
            "description": "Comma-separated list of allowed IP addresses"
          },
          "No Response Body": {
            "type": "boolean",
            "description": "Prevent sending a response body"
          },
          "Raw Body": {
            "type": "boolean",
            "description": "Receive data in raw format (JSON/XML)"
          },
          "Response Content-Type": {
            "type": "selectContentType",
            "description": "Format for the webhook body"
          },
          "Response Data": {
            "type": "string",
            "description": "Custom data to send with the response"
          },
          "Response Headers": {
            "type": "keyValuePair",
            "description": "Extra headers to send in webhook response"
          },
          "Property Name": {
            "type": "string",
            "description": "JSON key to return (First Entry JSON Response Data only)"
          }
        }
      },
      "workflow-development": {
        "contentType": "howto",
        "priority": "critical",
        "title": "Webhook node workflow development documentation",
        "description": "Learn how to build, test, and use the Webhook node in your workflows in n8n.",
        "webhookURLs": "n8n generates two **Webhook URLs** for each Webhook node: a **Test URL** and a **Production URL**.",
        "buildAndTestWorkflows": "While building or testing a workflow, use the **Test** webhook URL.",
        "productionWorkflows": "When your workflow is ready, switch to using the **Production** webhook URL. You can then activate your workflow, and n8n runs it automatically when an external service calls the webhook URL."
      }
    },
    "n8n-nodes-langchain.chattrigger": {
      "common-issues": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "high",
        "title": "Chat Trigger node common issues",
        "description": "Here are some common errors and issues with the [Chat Trigger node](/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/index.md) and steps to resolve or troubleshoot them.",
        "issues": [
          "Pass data from a website to an embedded Chat Trigger node",
          "Chat Trigger node doesn't fetch previous messages"
        ]
      },
      "index": {
        "contentType": [
          "integration",
          "reference"
        ],
        "priority": "critical",
        "title": "Chat Trigger node",
        "description": "Use the Chat Trigger node when building AI workflows for chatbots and other chat interfaces. You can configure how users access the chat, using one of n8n's provided interfaces, or your own. You can add authentication.",
        "workflowExecutionUsage": "Every message to the Chat Trigger executes your workflow. This means that one conversation where a user sends 10 messages uses 10 executions from your execution allowance. Check your payment plan for details of your allowance.",
        "noteManualChatTrigger": "This node replaces the Manual Chat Trigger node from version 1.24.0.",
        "parameters": {
          "Make Chat Publicly Available": {
            "type": "boolean",
            "description": "Make chat publicly available (Hosted Chat, Embedded Chat)"
          },
          "Mode": {
            "type": "select",
            "options": [
              "Hosted Chat",
              "Embedded Chat"
            ],
            "description": "Mode of chat access"
          },
          "Authentication": {
            "type": "select",
            "options": [
              "None",
              "Basic Auth",
              "n8n User Auth"
            ],
            "description": "Authentication method for chat access"
          },
          "Basic Auth": {
            "parameters": {
              "Credential for Basic Auth": {
                "type": "credential",
                "credentialType": "httpBasicAuth",
                "description": "Basic authentication credential"
              }
            }
          },
          "Initial Message(s)": {
            "type": "string",
            "description": "Message to display when user arrives on page (Hosted Chat only)"
          }
        },
        "options": {
          "Hosted Chat": {
            "options": {
              "Allowed Origin (CORS)": {
                "type": "string",
                "description": "Allowed origins (CORS) for chat URL"
              },
              "Input Placeholder": {
                "type": "string",
                "description": "Input placeholder text"
              },
              "Title": {
                "type": "string",
                "description": "Chat interface title"
              },
              "Subtitle": {
                "type": "string",
                "description": "Chat interface subtitle"
              },
              "Load Previous Session": {
                "type": "select",
                "options": [
                  "Off",
                  "From Memory"
                ],
                "description": "Load chat messages from previous session"
              },
              "Response Mode": {
                "type": "select",
                "options": [
                  "When Last Node Finishes",
                  "Using 'Respond to Webhook' Node"
                ],
                "description": "Response mode for chat workflow"
              },
              "Require Button Click to Start Chat": {
                "type": "boolean",
                "description": "Display 'New Conversation' button"
              }
            }
          },
          "Embedded Chat": {
            "options": {
              "Allowed Origin (CORS)": {
                "type": "string",
                "description": "Allowed origins (CORS) for chat URL"
              },
              "Load Previous Session": {
                "type": "select",
                "options": [
                  "Off",
                  "From Memory"
                ],
                "description": "Load chat messages from previous session"
              },
              "Response Mode": {
                "type": "select",
                "options": [
                  "When Last Node Finishes",
                  "Using 'Respond to Webhook' Node"
                ],
                "description": "Response mode for chat workflow"
              }
            }
          }
        },
        "relatedResources": "<!-- --8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\" -->",
        "setChatResponseManually": "You need to manually set the chat response when you don't want to directly send the output of an Agent or Chain node to the user. Instead, you want to take the output of an Agent or Chain node and modify it or do something else with it before sending it back to the user.\n\nIn a basic workflow, the Agent and Chain nodes output a parameter named either `output` or `text`, and the Chat trigger sends the value of this parameter to the user as the chat response. \n\nIf you need to manually create the response sent to the user, you must create a parameter named either `text` or `output`. If you use a different parameter name, the Chat trigger sends the entire object as its response, not just the value."
      }
    }
  }
}

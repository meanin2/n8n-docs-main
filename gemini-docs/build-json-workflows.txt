n8n workflows are defined entirely in JSON. Each workflow is a JSON object that specifies the nodes (the building blocks of your automation) and the connections between them. By studying the examples you provided, you can see a consistent structure and key elements that you need to include when writing a workflow from scratch.

Below is an overview of the core concepts and steps involved:

---

### 1. Overall Workflow Structure

- **Root Object:**  
  Every workflow JSON contains several key properties:
  - **name:** The workflow’s title.
  - **nodes:** An array where each object represents a node.
  - **connections:** An object that defines how the nodes are linked together (i.e., which node’s output is fed into which node’s input).
  - **pinData, meta, active, settings, etc.:** Additional metadata and settings for the workflow.

---

### 2. Nodes

Each node is a self-contained object that represents an action or trigger. Key properties include:

- **id:** A unique identifier (typically a UUID) for the node.
- **name:** A human-friendly name (helps in identifying the node in the editor).
- **type & typeVersion:** These define the node’s functionality (e.g., manualTrigger, code, HTTP Request, etc.) and the version of that node.
- **parameters:** An object that contains the node-specific settings (for example, the URL and options for an HTTP Request, or the code to execute in a Code node).
- **position:** An array (usually two numbers) that tells n8n where to place the node in the visual editor.
- **credentials (optional):** If the node requires authentication (like for Google Drive or Slack), credentials are referenced here.

*Example snippet from a node:*

```json
{
  "id": "manual-1",
  "name": "Trigger",
  "type": "n8n-nodes-base.manualTrigger",
  "typeVersion": 1,
  "position": [100, 100],
  "parameters": {}
}
```

---

### 3. Connections

The **connections** property maps the outputs of nodes to the inputs of other nodes, creating the workflow’s execution order. Each key in this object corresponds to a node (usually by its name) and contains arrays indicating which node receives the output.

*Example:*

```json
"connections": {
  "Trigger": {
    "main": [
      [
        {
          "node": "Run Code",
          "type": "main",
          "index": 0
        }
      ]
    ]
  }
}
```

In this example, the output of the "Trigger" node (a manual trigger) is connected to the "Run Code" node.

---

### 4. Writing a Workflow from Scratch

When writing a workflow JSON manually, follow these steps:

1. **Define the Root Object:**  
   Begin with a JSON object that includes a name, an empty "nodes" array, and an empty "connections" object.

2. **Add Your Nodes:**  
   For each step in your automation:
   - Create an object with a unique **id**, **name**, **type**, **typeVersion**, **parameters**, and **position**.
   - Configure the **parameters** based on what the node is supposed to do (e.g., for a code node, add your JavaScript code).

3. **Set Up Connections:**  
   Define the "connections" object to map the flow of data between nodes. This determines the execution order.
   
4. **Include Credentials When Needed:**  
   For nodes that integrate with external services, add a **credentials** key that references the necessary authentication details.

5. **Test and Iterate:**  
   Import the JSON into n8n’s editor. Use the visual canvas to verify the layout and connections, then test the workflow.

---

### 5. A Minimal Example

Below is a very simple workflow JSON that demonstrates the key structure:

```json
{
  "name": "My First Workflow",
  "nodes": [
    {
      "id": "manual-1",
      "name": "Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [100, 100],
      "parameters": {}
    },
    {
      "id": "code-1",
      "name": "Run Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [300, 100],
      "parameters": {
        "jsCode": "return [{ json: { message: 'Hello, n8n!' } }];"
      }
    }
  ],
  "connections": {
    "Trigger": {
      "main": [
        [
          {
            "node": "Run Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}
```

In this workflow:
- A **manual trigger** node initiates the process.
- Its output is passed to a **code** node that returns a simple message.

---

### 6. Observations from the Examples

- **Complexity and Variety:**  
  The provided examples range from simple triggers to complex integrations involving AI nodes, HTTP requests, and even branching logic using switch nodes. They demonstrate how you can mix and match different node types to build sophisticated automations.

- **Dynamic Expressions:**  
  Many workflows use n8n’s expression syntax (e.g., `={{ $json.fieldName }}`) to dynamically pass data between nodes, which is key to making workflows flexible and data-driven.

- **Documentation within Workflows:**  
  Sticky Note nodes are often used to add documentation or instructions directly in the workflow. This is a useful practice for maintaining clarity, especially in complex workflows.

---

### Conclusion

By understanding the JSON structure of n8n workflows:
- You learn that each workflow is built from an array of nodes and a mapping of their connections.
- You see that each node must be configured with its type, parameters, and position.
- And you understand that the “connections” object controls the execution order.

Using this knowledge, you can write your own JSON workflows from scratch—whether it’s for a simple automation or a complex integration—and then import them into n8n for testing and further development.